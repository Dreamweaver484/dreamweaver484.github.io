<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>welcome</title>
  
  <subtitle>拾忆生活--Lewis</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lewis.qi.tk/"/>
  <updated>2020-05-16T12:05:39.170Z</updated>
  <id>http://lewis.qi.tk/</id>
  
  <author>
    <name>Lewis-qi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js中let、const、var区别-浅谈</title>
    <link href="http://lewis.qi.tk/2020/05/16/js%E4%B8%ADlet%E3%80%81const%E3%80%81var%E5%8C%BA%E5%88%AB-%E6%B5%85%E8%B0%88/"/>
    <id>http://lewis.qi.tk/2020/05/16/js%E4%B8%ADlet%E3%80%81const%E3%80%81var%E5%8C%BA%E5%88%AB-%E6%B5%85%E8%B0%88/</id>
    <published>2020-05-16T11:56:24.000Z</published>
    <updated>2020-05-16T12:05:39.170Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/104784380" target="_blank" rel="noopener">js中let、const、var区别-浅谈</a></p><h2 id="var变量"><a href="#var变量" class="headerlink" title="var变量"></a>var变量</h2><p>1.var变量：可以不初始化，可以修改，若不初始化输出undefined<br>2.var变量：跨块访问,。（没有块的概念）<br>3.var变量：不能跨函数访问</p><h2 id="let变量（es6块级作用域）"><a href="#let变量（es6块级作用域）" class="headerlink" title="let变量（es6块级作用域）"></a>let变量（es6块级作用域）</h2><p>1.let变量：函数内部let定义，对函数外部无影响<br>2.let变量：块作用域里访问，<br>3.let变量：不能跨块访问，不能跨函数访问</p><h2 id="const-常量（同宏定义一样）"><a href="#const-常量（同宏定义一样）" class="headerlink" title="const 常量（同宏定义一样）"></a>const 常量（同宏定义一样）</h2><p>1.const常量：必须初始化，不可以修改<br>2.const常量：块作用域里访问，<br>3.const常量：不能跨块访问，不能跨函数访问</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/104784380&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;js中let、const、var区别-浅谈&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="es6" scheme="http://lewis.qi.tk/categories/es6/"/>
    
    
      <category term="es6" scheme="http://lewis.qi.tk/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习（中级）</title>
    <link href="http://lewis.qi.tk/2020/05/16/MongoDB%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%AD%E7%BA%A7%EF%BC%89/"/>
    <id>http://lewis.qi.tk/2020/05/16/MongoDB%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%AD%E7%BA%A7%EF%BC%89/</id>
    <published>2020-05-16T11:56:04.000Z</published>
    <updated>2020-05-16T12:04:23.562Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105012851" target="_blank" rel="noopener">MongoDB学习（中级）</a></p><h2 id="10-mongoose"><a href="#10-mongoose" class="headerlink" title="10.mongoose"></a>10.mongoose</h2><ul><li>nodejs用对象的形式表示MongoDB的文档，即数据把文档转换为对象<ul><li>用中间件和应用逻辑挂钩</li><li>创建schema的文档结构约束</li><li>Model对象是集合中的所有文档的表示，相当于MongoDB数据库中的集合</li></ul></li></ul><pre><code>//引入var mongoose = require(&quot;mongoose&quot;);//连接数据库(端口号默认27017，可以省略不写)//因为没有事务操作，所以只需要连接一次//mongoose.connect(&#39;mongodb://数据库的ip地址：端口号/数据库名&#39;,{useMongoClient:true});// mongoose.connect(&#39;mongodb://localhost:27017/test&#39;,{useMongoClient:true});mongoose.connect(&#39;mongodb://localhost:27017/test&#39;);var Schema = mongoose.Schema;//创建Scheme（模式）对象，就是文档结构约束var stuSchema = new Schema({    name:String,    age:Number,    gender:{        type:String,        default:&quot;male&quot;    },    address:String});//通过Scheme来创建Model模型，就是来映射数据库的集合//mongoose.model(modelName,Schema);//modelName是数据库的集合名（表）//注意：自动将集合名添加s（复数）var StuModel = mongoose.model(&quot;student&quot;,stuSchema);//向数据库插入文档StuModel.create([    {        name:&quot;zhangsan&quot;,        age:20,        gender:&quot;famale&quot;,        address:&quot;HangZhou&quot;    },    {        name:&quot;lisi&quot;,        age:22,        gender:&quot;male&quot;,        address:&quot;ShangHai&quot;     }],function(err){    if(!err){        console.log(&quot;插入成功&quot;);    }else{        console.log(&quot;插入失败&quot;);    }});//监听数据库的连接状态mongoose.connection.once(&#39;open&#39;,function(){    console.log(&quot;数据库连接成功&quot;);    //在node控制台显示    //console.log(arguments);});mongoose.connection.once(&#39;close&#39;,function(){    console.log(&quot;数据库连接断开&quot;);});// //断开数据库连接（不常用）mongoose.disconnect();</code></pre><h3 id="注：node中Model用法"><a href="#注：node中Model用法" class="headerlink" title="注：node中Model用法"></a>注：node中Model用法</h3><p> $\color{red}10.1创建、查询$</p><ul><li>1.向数据库插入文档<ul><li>Model名.create(doc,function(err){});</li></ul></li><li>2.查询符合条件的第一个文档<ul><li>Model名.findOne(conditions,projection,options,callback)</li></ul></li><li>3.查询所有符合条件的文档<ul><li>Model名.find(conditions,projection,options,callback)</li></ul></li><li>4.根据文档的id属性查询文档<ul><li>Model名.findById(id,projection,options,callback)<ul><li>doc是要插入的文档,function(err){}是回调函数</li><li>conditions查询条件</li><li>projection投影</li><li>options查询选项（skip、limit）</li><li>callback查询结果通过回调函数返回</li></ul></li></ul></li><li>5.还可以在Navicat中用db.students.find();查询，</li><li>$\color{red}查询结果都是文档对象，是Model的实例$</li></ul><pre><code>//查询符合条件的第一个文档StuModel.findOne(    {},    function(err,doc){        if(!err){            console.log(doc);        }});StuModel.find(    {        name:&quot;zhangsan&quot;    },function(err,doc){        if(!err){            console.log(doc);        }});//查询所有符合条件的文档StuModel.find(    {},    function(err,doc){        if(!err){            console.log(doc);        }});//查询所有符合条件的文档//第二个参数，投影：是否显示（用数字表示）StuModel.find(    {},    {        name:1,        _id:0    },    function(err,doc){        if(!err){            console.log(doc);        }});//查询所有符合条件的文档//第二个参数，投影：是否显示（用字符串表示，加-为不显示）StuModel.find(    {},    &#39;name age -_id&#39;,    function(err,doc){        if(!err){            console.log(doc);        }});//查询所有符合条件的文档//第三个参数，skip、limitStuModel.find(    {},    &#39;name age -_id&#39;,    {        skip:1,limit:1    },    function(err,doc){        if(!err){            console.log(doc);        }});//根据文档的id属性查询文档//第一个参数idStuModel.findById(    &quot;5e7434c09a64954b6077c4a1&quot;,    function(err,doc){        if(!err){            console.log(doc);        }});</code></pre><p>$\color{red}10.2更新$</p><ul><li>1.修改一个或多个文档<ul><li>Model名.update(conditions,doc,options,callback);</li></ul></li><li>2.修改一个文档<ul><li>Model名.updateOne(conditions,doc,options,callback);</li></ul></li><li>3.修改多个文档<ul><li>Model名.updateMany(conditions,doc,options,callback);</li></ul></li><li>4.替换一个文档<ul><li>Model名.replaceOne(conditions,doc,options,callback);<ul><li>conditions修改条件</li><li>doc是修改后的文档对象</li><li>options修改选项（oldEnough、ferret、multi）</li><li>callback修改结果通过回调函数返回</li></ul></li></ul></li></ul><pre><code>//更新操作StuModel.update(    {        name:&quot;zhangsan&quot;    },    {        $set:{age:22}    },    {        //更新所有文档        multi:true        //更新一个文档        //multi:false    },    function(err){        if(!err){            console.log(&quot;修改成功&quot;);        }    });StuModel.updateOne(    {        name:&quot;zhangsan&quot;    },    {        $set:{age:22}    },function(err){        if(!err){            console.log(&quot;修改成功&quot;);        }    });StuModel.updateMany(    {        name:&quot;zhangsan&quot;    },    {        $set:{age:22}    },function(err){        if(!err){            console.log(&quot;修改成功&quot;);        }    });</code></pre><p>$\color{red}10.3删除、计数$</p><ul><li>1.删除一个或多个文档（包括文档结构）<ul><li>Model名.remove(conditions,callback);</li></ul></li><li>2.删除一个文档<ul><li>Model名.deleteOne(conditions,callback);</li></ul></li><li>3.删除多个文档<ul><li>Model名.deleteMany(conditions,callback);</li></ul></li><li>4.统计文档数量<ul><li>Model名.count(conditions,callback);<ul><li>conditions修改条件</li><li>callback修改结果通过回调函数返回</li></ul></li></ul></li></ul><pre><code>//删除操作StuModel.remove(    {        name:&quot;zhangsan&quot;    },function(err){        if(!err){            console.log(&quot;删除成功&quot;);        }    });StuModel.deleteOne(    {        name:&quot;zhangsan&quot;    },function(err){        if(!err){            console.log(&quot;删除成功&quot;);        }    });StuModel.deleteMany(    {        name:&quot;zhangsan&quot;    },function(err){        if(!err){            console.log(&quot;删除成功&quot;);        }    });//统计文档数量StuModel.count(    {},    function(err,doc){        if(!err){            console.log(count);        }    });</code></pre><h2 id="color-red-10-4-document和集合中的文档一一对应，document是Model的实例"><a href="#color-red-10-4-document和集合中的文档一一对应，document是Model的实例" class="headerlink" title="$\color{red}10.4 document和集合中的文档一一对应，document是Model的实例$"></a>$\color{red}10.4 document和集合中的文档一一对应，document是Model的实例$</h2><ul><li>1.var doc = new StuModel({…});</li><li>doc.save(options,fn)</li><li>doc.updata(updata,options,callback)</li><li>doc.get(“age”);</li><li>doc.set(“age”,”123”);doc.save();</li><li>doc._id;</li></ul><pre><code>var mongoose = require(&quot;mongoose&quot;);mongoose.connect(&#39;mongodb://localhost:27017/test&#39;);var Schema = mongoose.Schema;//创建Scheme（模式）对象，就是来文档结构约束var stuSchema = new Schema({    name:String,    age:Number,    gender:{        type:String,        default:&quot;male&quot;    },    address:String});var StuModel = mongoose.model(&quot;student&quot;,stuSchema);//document(doc)的方法//创建一个document//方式1var stu = new StuModel({    name:&quot;lisi&quot;,    age:&quot;30&quot;,    gender:&quot;male&quot;,    address:&quot;HangZhou&quot;});//doc.save(options,fn)stu.save(function(err){    if(!err){        console.log(&quot;保存成功&quot;);    }});//方式2StuModel.findOne(    {},    function(err,doc){        //doc.updata(updata,options,callback)        doc.update({$set:{age:28}},function(err){            if(!err){                console.log(&quot;修改成功&quot;);            }        })        //doc.remove(callback)        doc.remove(function(err){            if(!err){                console.log(&quot;删除成功&quot;);            }        })    });//方式3(方式2的化简，直接调用属性)StuModel.findOne(    {},    function(err,doc){        if(!err){            doc.age = 28;            doc.save();            console.log(&quot;修改成功&quot;);        }    });//doc.get(&quot;age&quot;);//doc.set(&quot;age&quot;,&quot;123&quot;);doc.save();//doc.id;StuModel.findOne(    {},    function(err,doc){        if(!err){            //doc.get(&quot;age&quot;);            //等价于doc.age；            //doc.set(&quot;age&quot;,&quot;123&quot;);doc.save();            //等价于doc.age = 28;doc.save();            //console.log(doc._id);            console.log(&quot;修改成功&quot;);        }    });</code></pre><h2 id="color-red-10-5mongoose模块化"><a href="#color-red-10-5mongoose模块化" class="headerlink" title="$\color{red}10.5mongoose模块化$"></a>$\color{red}10.5mongoose模块化$</h2><p>把连接数据库、创建model模型约束、增删查改分成三个js文件</p><p>连接数据库tools/connect-mongoose.js</p><pre><code>//引入var mongoose = require(&quot;mongoose&quot;);//连接数据库(端口号默认27017，可以省略不写)//mongoose.connect(&#39;mongodb://数据库的ip地址：端口号/数据库名&#39;,{useMongoClient:true});// mongoose.connect(&#39;mongodb://localhost:27017/test&#39;,{useMongoClient:true});mongoose.connect(&#39;mongodb://localhost:27017/test&#39;);//监听数据库的连接状态mongoose.connection.once(&#39;open&#39;,function(){    console.log(&quot;数据库连接成功&quot;);    //在node控制台显示    //console.log(arguments);});//没有暴露变量</code></pre><p>创建model模型约束models/student-model.js</p><pre><code>//引入var mongoose = require(&quot;mongoose&quot;);var Schema = mongoose.Schema;//创建Scheme（模式）对象，就是来文档结构约束var stuSchema = new Schema({    name:String,    age:Number,    gender:{        type:String,        default:&quot;male&quot;    },    address:String});//通过Scheme来创建Model模型，就是来映射数据库的集合//注意：自动将集合名添加s（复数）var StuModel = mongoose.model(&quot;student&quot;,stuSchema);//暴露model.exports = StuModel;</code></pre><p>增删查改student.js</p><pre><code>//引入连接require(&quot;./static/tools/connect-mongoose&quot;);//引入模型（文档约束）var StuModel = require(&quot;./static/models/student-model&quot;);//查询符合条件的第一个文档StuModel.findOne(    {},    function(err,doc){        if(!err){            console.log(doc);        }});</code></pre><h2 id="11-用户"><a href="#11-用户" class="headerlink" title="11.用户"></a>11.用户</h2><p>1.默认情况下，MongoDB 不会进行身份验证，也没有账号<br>2.超级用户和数据库用户。用户信息保存在 db.system.users<br>3.一个数据库可以包含多个用户，$\color{red}一个用户只能在一个数据库下，不同数据库中的用户可以同名$<br>4.特定数据库比如 test1 下的用户 test_user1，不能够访问其他数据库 test2，但是可以访问本数据库下其他用户创建的数据  </p><p>一、添加用户<br>$\color{red}用户在哪个库创建，就要在哪个库auth认证，并在mongo登录时也要先连接认证库$</p><pre><code>&gt;use admin&gt;db.createUser({  user:&#39;test_user&#39;,  pwd:&#39;123456&#39;,  customData:{&quot;desc&quot;:&quot;这是介绍&quot;}，  roles:[{role:&#39;userAdminAnyDatabase&#39;,db:&#39;admin&#39;} | &quot;&lt;role&gt;&quot; ] })//验证是否存在对应用户&gt; db.auth(&quot;test_user&quot;,&quot;password&quot;)</code></pre><ul><li>user用户名</li><li>pwd密码</li><li>customData介绍</li><li>roles<ul><li>role用户的角色</li><li>db数据库</li><li>roles字段，指定内置角色和用户定义的角色</li></ul></li></ul><p>注：用户的角色:</p><ul><li><ol><li>数据库用户角色</li></ol><ul><li>read;允许用户读取指定数据库</li><li>readWrite;  允许用户读写指定数据库</li></ul></li><li><ol start="2"><li>数据库管理角色</li></ol><ul><li>dbAdmin:允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</li><li>dbOwner</li><li>userAdmin:允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</li></ul></li><li><ol start="3"><li>集群管理角色(只在admin数据库中可用)</li></ol><ul><li>clusterAdmin:赋予用户所有分片和复制集相关函数的管理权限</li><li>clusterManager</li><li>clusterMonitor</li><li>hostManager；  </li></ul></li><li><ol start="4"><li>备份恢复角色</li></ol><ul><li>backup</li><li>restore</li></ul></li><li><ol start="5"><li>所有数据库角色(只在admin数据库中可用)</li></ol><ul><li>readAnyDatabase:赋予用户所有数据库的读权限</li><li>readWriteAnyDatabase:赋予用户所有数据库的读写权限</li><li>userAdminAnyDatabase:赋予用户所有数据库的userAdmin权限</li><li>dbAdminAnyDatabase  :赋予用户所有数据库的dbAdmin权限</li></ul></li><li><ol start="6"><li>超级用户角色(只在admin数据库中可用)</li></ol><ul><li>root:赋予用户所有数据库的dbAdmin权限</li></ul></li><li><ol start="7"><li>内部角色</li></ol><ul><li>__system  </li></ul></li></ul><p>二、修改用户</p><pre><code>db.updateUser(  &quot;&lt;username&gt;&quot;,  {    customData : { 这是介绍 },    roles : [              { role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot; } | &quot;&lt;role&gt;&quot;,              ...            ],    pwd: &quot;123456&quot;    },    writeConcern: {&quot;xxx&quot;})</code></pre><ul><li>username用户名</li><li>customData介绍</li><li>roles修改的角色们<ul><li>role用户的角色</li><li>db数据库</li></ul></li><li>pwd密码</li><li>writeConcern：用来指定mongod对写操作的回执行为</li></ul><p>三、修改用户权限，不会覆盖原权限信息，只新增权限</p><ul><li>db.grantRolesToUser(<br>  “jianlong”,<br>  [<pre><code>{    role:&#39;readWrite&#39;,    db:&#39;test&#39;}</code></pre>  ]<br>);</li></ul><p>四、修改用户密码</p><ul><li>db.changeUserPassword(“username”,”newPasswd”)</li></ul><p>五、删除用户</p><ul><li>db.dropUser(“username”)</li></ul><p>六、查看角色的具体privilege（权限）</p><ul><li>db.getRole(“SenderHis_Read”,{showPrivileges:true})</li></ul><p>测试：</p><pre><code>1.查看数据库&gt; show dbs2.转到 test 数据库，查看 admin 数据库中的用户信息&gt; use admin&gt; db.getUsers()&gt; db.system.users.find()3.转到 test 数据库，查看 admin 数据库中的用户信息&gt; use test&gt; db.getUsers()&gt; db.system.users.find()4.在 test 数据库，插入test_data 集合，测试数据&gt; db.test_data.insert({&quot;id&quot;:1,&quot;info&quot;:&quot;I am a test&quot;})&gt; db.test_data.insert({&quot;id&quot;:2,&quot;info&quot;:&quot;I am a test&quot;})&gt; db.test_data.insert({&quot;id&quot;:3,&quot;info&quot;:&quot;I am a test&quot;})&gt; db.test_data.find();输出：{ &quot;_id&quot; : ObjectId(&quot;5e75b23efc2d5603a1090b4c&quot;), &quot;id&quot; : 1, &quot;info&quot; : &quot;I am a test&quot; }输出：{ &quot;_id&quot; : ObjectId(&quot;5e75b247fc2d5603a1090b4d&quot;), &quot;id&quot; : 2, &quot;info&quot; : &quot;I am a test&quot; }输出：{ &quot;_id&quot; : ObjectId(&quot;5e75b24dfc2d5603a1090b4e&quot;), &quot;id&quot; : 3, &quot;info&quot; : &quot;I am a test&quot; }5.在 test 数据库创建用户&gt;db.createUser({  user:&#39;test_user&#39;,  pwd:&#39;123456&#39;,  customData:{&quot;desc&quot;:&quot;测试testuser用户&quot;},  roles:[{role:&#39;readWrite&#39;,db:&#39;test&#39;}] })6.验证数据库中是否存在对应的用户&gt; use admin&gt; db.getUsers()&gt; db.system.users.find()7.以认证的方式启动数据库（在test中实现）&gt; use test&gt; db.getUsers()&gt; db.auth(&quot;test_user&quot;,&quot;123456&quot;)8.再创建 test1 数据库，创建对象 test1_data，插入数据&gt; use test1&gt; db.getUsers()&gt; db.test1_data.insert({&quot;id&quot;:1,&quot;info&quot;:&quot;I am in test1&quot;})&gt; db.test1_data.insert({&quot;id&quot;:2,&quot;info&quot;:&quot;I am in test1&quot;})&gt; db.test1_data.insert({&quot;id&quot;:3,&quot;info&quot;:&quot;I am in test1&quot;})&gt; db.test1_data.find()9.再创建 test2 数据库，创建对象 test2_data，插入数据&gt; use test2&gt; db.getUsers()&gt; db.test2_data.insert({&quot;id&quot;:1,&quot;info&quot;:&quot;I am in test2&quot;})&gt; db.test2_data.insert({&quot;id&quot;:2,&quot;info&quot;:&quot;I am in test2&quot;})&gt; db.test2_data.insert({&quot;id&quot;:3,&quot;info&quot;:&quot;I am in test2&quot;})&gt; db.test2_data.find()10.重新以认证的方式启动数据库，启动时添加 –auth 参数mongod --dbpath=D:\mongoDB\data\db --logpath=D:\mongoDB\data\log\mongod.log --auth11.先登录   再 admin.system.users 中添加super用户，使认证授权服务生效   再 admin 数据库中创建用户 supper，密码为 123456&gt; mongo&gt; use admin&gt; db.getUsers()&gt; db.createUser({  user:&#39;super&#39;,  pwd:&#39;123456&#39;,  customData:{&quot;desc&quot;:&quot;测试super用户&quot;},  roles:[{role:&#39;readWriteAnyDatabase&#39;,db:&#39;admin&#39;}] })&gt; db.getUsers()&gt; db.auth(&quot;super&quot;,&quot;123456&quot;)12.总结以默认方式登录，即以无认证用户登录，查询的时候会显示无权限&gt; mongo&gt; show dbs使用 test 数据库中的用户可以查询 test 的数据，但是不能查看其他的数据库的数据(已经在test数据库中认证的)&gt; mongo 127.0.0.1/test -u test_user -p 123456&gt; show dbs使用 supper 用户登录，可以对 MongoDB 系统内的所有数据库进行操作(已经在admin数据库中认证的)&gt; mongo 127.0.0.1/admin -u super -p 123456&gt; show dbs</code></pre><h2 id="12-复制（最好使用逻辑DNS主机名而不是IP地址）"><a href="#12-复制（最好使用逻辑DNS主机名而不是IP地址）" class="headerlink" title="12.复制（最好使用逻辑DNS主机名而不是IP地址）"></a>12.复制（最好使用逻辑DNS主机名而不是IP地址）</h2><ul><li>mongodb的复制至少需要两个节点。</li><li>各个节点常见的搭配方式为：一主一从、一主多从。<ul><li>主节点，负责处理客户端请求，同步主节点的数据；</li><li>其余的都是从节点，负责复制主节点上的数据</li></ul></li><li>副本集<ul><li>N 个节点的集群</li><li>任何节点可作为主节点</li><li>所有写入操作都在主节点上</li></ul></li></ul><p>1.副本集各节点IP如下：</p><ul><li>172.16.250.238  </li><li>172.16.250.239  </li><li>172.16.250.240  </li></ul><p>2.依次修改各个节点的 $\color{red}mongodb.conf$ 配置文件，增加副本集相关配置:</p><pre><code>dbpath=D:\mongoDB\data\dblogpath=D:\mongoDB\data\logfork=truelogappend=truebind_ip=172.16.250.238   # 此处填写服务器的IP(三个不同的写三次)port=27017replSet=rs0             # 设置副本集名称，在各个配置文件中，其值必须相同</code></pre><p>3.在三个节点上执行,加载文件配置,启动MongoDB服务:<br>mongod -config D:\mongoDB\mongodb.conf</p><p>4.副本集初始化(连接到任意一个MongoDB实例，对副本集进行初始化)<br>出现rs0:SECONDARY&gt;即可</p><pre><code>&gt; mongo 172.16.250.238:27017&gt; conf={    &quot;_id&quot; : &quot;rs0&quot;,    &quot;members&quot; : [        { &quot;_id&quot; : 0, &quot;host&quot; : &quot;172.16.250.234:27017&quot; },        { &quot;_id&quot; : 1, &quot;host&quot; : &quot;172.16.250.239:27017&quot; },        { &quot;_id&quot; : 2, &quot;host&quot; : &quot;172.16.250.240:27017&quot; }        ]  }&gt; rs.initiate(conf)输出：{    &quot;ok&quot; : 1,    &quot;operationTime&quot; : Timestamp(1542247326, 1),    &quot;$clusterTime&quot; : {        &quot;clusterTime&quot; : Timestamp(1542247326, 1),        &quot;signature&quot; : {            &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;),            &quot;keyId&quot; : NumberLong(0)        }    }}rs0:SECONDARY&gt;</code></pre><p>5.副本集更新</p><pre><code># 1.向副本集中添加成员&gt; rs.add(&quot;172.16.250.239:27017&quot;)# 2.从副本集中删除成员&gt; rs.remove(&quot;172.16.250.239:27017&quot;)# 3.向副本集中添加仲裁&gt; rs.addArb(&quot;172.16.250.239:27017&quot;)# 4.向副本集中添加备份节点&gt; rs.add({&quot;_id&quot;:3,&quot;host&quot;:&quot;172.16.250.239:27017&quot;,&quot;priority&quot;:0,&quot;hidden&quot;:true})</code></pre><p>6.强制让一个从节点成为Primary主节点<br>$\color{red}优先级越高，级别越高，，在主节点崩溃时，按顺位继承主节点$</p><pre><code># 更改副本集主节点rs0:PRIMARY&gt; var conf=rs.conf()rs0:PRIMARY&gt; conf.members[0].priority = 2   # 原来的主节点rs0:PRIMARY&gt; conf.members[0].priority = 3   # 现在的主节点rs0:PRIMARY&gt; conf.members[0].priority = 1rs0:PRIMARY&gt; rs.reconfig(cfg)               # 刷新配置</code></pre><p>7.副本集监控  </p><pre><code># 1.查看副本集的配置信息rs0:PRIMARY&gt; rs.conf()# 2.查看副本集运行状态rs0:PRIMARY&gt; rs.status()# 3.查看主从关系rs0:PRIMARY&gt; rs.isMaster()</code></pre><p>8.副本集复制测试</p><pre><code>步骤一：在 Primary 主节点上插入一万条客户数据rs0:PRIMARY&gt; for(var i=0;i&lt;10000;i++){db.customer.insert({&quot;name&quot;:&quot;user&quot;+i})}输出：WriteResult({ &quot;nInserted&quot; : 1 })rs0:PRIMARY&gt; db.customer.count()输出：10000步骤二：在 Secondary 从节点上查看客户数据是否已经同步rs0:SECONDARY&gt; rs.slaveOk()rs0:SECONDARY&gt; db.customer.count()输出：10000</code></pre><p>9.副本集故障转移测试</p><pre><code>步骤一：关闭Primar主节点的数据库mongod --shutdown --dbpath D:\mongoDB\data步骤二：查看Primary节点关闭之前的状态rs0:PRIMARY&gt; rs.isMaster()rs0:PRIMARY&gt; rs.status()步骤三：登录任意其他节点上查看Primary节点关闭之后的状态&gt; mongo 172.16.250.239:27017&gt; rs.isMaster()&gt; rs.status()步骤四：再次启动 172.16.250.238:27017 节点，由于其选举优先级最高，自动被选举为Primary&gt; mongo 172.16.250.238:27017&gt; rs.isMaster()&gt; rs.status()</code></pre><h2 id="13-MongoDB分片"><a href="#13-MongoDB分片" class="headerlink" title="13.MongoDB分片"></a>13.MongoDB分片</h2><ul><li><p>Shard:(Shard Server)<br>用于存储实际的数据块。一个shard server角色可由几台机器组个一个replica set承担，防止主机单点故障</p></li><li><p>Config Server:<br>mongod实例。存储了整个 ClusterMetadata，其中包括 chunk信息。</p></li><li><p>Query Routers:（Route Process）<br>前端路由。客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用。</p></li></ul><p>1.分片结构端口分布</p><pre><code>Shard Server 1：27020Shard Server 2：27021Shard Server 3：27022Config Server ：27100Route Process：40000</code></pre><pre><code>步骤一：启动Shard Server新建D:\mongoDB\shared（在里面新建s0、s1、s2、log文件夹）bin目录下运行下列命令：&gt; mongod --port 27020 --dbpath &quot;D:\mongoDB\shared\s0&quot; --logpath &quot;D:\mongoDB\shared\log\s0.log&quot; --logappend --fork&gt; mongod --port 27021 --dbpath &quot;D:\mongoDB\shared\s1&quot; --logpath &quot;D:\mongoDB\shared\log\s1.log&quot; --logappend --fork&gt; mongod --port 27022 --dbpath &quot;D:\mongoDB\shared\s2&quot; --logpath &quot;D:\mongoDB\shared\log\s2.log&quot; --logappend --fork步骤二： 启动Config Server新建D:\mongoDB\shared（在里面新建config文件夹）bin目录下运行下列命令：&gt; mongod --port 27100 --dbpath &quot;D:\mongoDB\shared\sconfig&quot; --logpath &quot;D:\mongoDB\shared\log\config.log --logappend --fork步骤三： 启动Route Process【chunkSize这一项是用来指定chunk的大小的，单位是MB，默认大小为200MB】&gt; mongos --port 40000 --configdb localhost:27100 --fork --logpath &quot;D:\mongoDB\shared\log\route.log&quot; --chunkSize 500步骤四： 配置Sharding登录到mongos，添加Shard节点&gt; mongo admin --port 40000mongos&gt; db.runCommand({ addshard:&quot;localhost:27020&quot; })输出：{ &quot;shardAdded&quot; : &quot;shard0000&quot;, &quot;ok&quot; : 1 }...(一共添加10个)mongos&gt; db.runCommand({ addshard:&quot;localhost:27029&quot; })输出：{ &quot;shardAdded&quot; : &quot;shard0009&quot;, &quot;ok&quot; : 1 }#设置分片存储的数据库mongos&gt; db.runCommand({ enablesharding:&quot;test&quot; })输出{ &quot;ok&quot; : 1 }mongos&gt; db.runCommand({ shardcollection: &quot;test.log&quot;, key: { id:1,time:1}})输出：{ &quot;collectionsharded&quot; : &quot;test.log&quot;, &quot;ok&quot; : 1 }步骤五：将数据库连接接入接口40000</code></pre><h2 id="14-数据库的备份-恢复-监控"><a href="#14-数据库的备份-恢复-监控" class="headerlink" title="14.数据库的备份\恢复\监控"></a>14.数据库的备份\恢复\监控</h2><p>数据备份</p><pre><code>&gt;mongodump -h 127.0.0.1:27017 -d test -o D:\mongoDB\data\dump-h：MongDB所在服务器地址:端口号-d：需要备份的数据库-o：备份的数据存放位置</code></pre><p>数据恢复</p><pre><code>&gt;mongorestore -h 127.0.0.1:27017 -d test-h：MongDB所在服务器地址:端口号-d：需要备份的数据库</code></pre><p>数据监控</p><pre><code>间隔固定时间获取mongodb的当前运行状态&gt;mongostat跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据(后跟参数，默认情况下，mongotop返回值的每一秒)&gt;mongotop&gt;mongotop 10</code></pre><h2 id="15-DBRefs数据库引用"><a href="#15-DBRefs数据库引用" class="headerlink" title="15.DBRefs数据库引用"></a>15.DBRefs数据库引用</h2><pre><code>{ $ref : , $id : , $db :  }$ref：  集合名称$id：   引用的id$db:    数据库名称，可选参数实例：（3.0版本）&gt;var user = db.users.findOne({&quot;name&quot;:&quot;Tom Benzamin&quot;})&gt;var dbRef = user.address&gt;db[dbRef.$ref].findOne({&quot;_id&quot;:(dbRef.$id)})实例：（4.0版本）&gt;var user = db.users.findOne({&quot;name&quot;:&quot;Tom Benzamin&quot;})&gt;var dbRef = user.address&gt;db[dbRef.$ref].findOne({&quot;_id&quot;:ObjectId(dbRef.$id)})</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105012851&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB学习（中级）&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://lewis.qi.tk/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://lewis.qi.tk/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB简单学习（初级）</title>
    <link href="http://lewis.qi.tk/2020/05/16/MongoDB%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/"/>
    <id>http://lewis.qi.tk/2020/05/16/MongoDB%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/</id>
    <published>2020-05-16T11:55:44.000Z</published>
    <updated>2020-05-16T12:03:04.023Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/104993090" target="_blank" rel="noopener">MongoDB简单学习（初级）</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>1.NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。非关系型的数据存储库<br>2.分布式系统是建立在网络之上的软件系统，是一个基于分布式文件存储的开源数据库系统。<br>3.文档存储一般用类似json的格式存储，存储的内容是文档型的.这样也就有机会对某些字段建立索引，实现关系数据库的某些功能。  </p><p>4.MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。<br>2.MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。  </p><pre><code>{    name:&quot;Lewis&quot;,               &lt;--fields:value    age:20,                     &lt;--fields:value    group:[&quot;news&quot;,&quot;sports&quot;]     &lt;--fields:value}</code></pre><p>配置：</p><pre><code>1.创建数据目录D:\mongoDB\data\db2.运行 MongoDB 服务器D:\mongoDB\binmongod.exe --dbpath &quot;D:\MongoDB\data\db&quot;3.在浏览器输入http://localhost:27017 （27017是mongodb的端口号）查看，若显示如下，则表示连接成功。如果不成功，可以查看端口是否被占用。4.添加你安装MongoDB的bin目录到环境变量中的pathD:\MongoDB\bin5.一定不要关闭，保持MongoDB开启连接MongoDBD:\mongoDB\bin&gt;mongo将MongoDB设置为系统服务，可以自动在后台启动1.创建D:\mongoDB\data\log2.创建D:\mongoDB，添加配置文件mongod.cfgsystemLog:    destination: file    path: D:\mongoDB\data\log\mongod.logstorage:    dbPath: D:\mongoDB\data\db3.管理员打开cmdsc.exe create MongoDB binPath= &quot;\&quot;D:\mongoDB\bin\mongod.exe\&quot; --service --config=\&quot;D:\mongoDB\mongod.cfg\&quot;&quot; DisplayName= &quot;MongoDB&quot; start= &quot;auto&quot;</code></pre><p>$\color{red}介绍$</p><ul><li>数据库的服务器<ul><li>用来保存数据</li><li>mongod用来启动服务器</li></ul></li><li>数据库的客户端<ul><li>用来操作服务器，对数据增删查改</li><li>mongo用来启动客户端</li></ul></li></ul><p>$\color{red}设置系统服务前的打开方式$</p><pre><code>1.在一个cmd中打开：D:\mongoDB\bin指定数据库路径和其使用的端口号输入：mongod.exe --dbpath &quot;D:\MongoDB\data\db&quot; --port 270172.在另一个cmd中打开输入：mongo</code></pre><p>$\color{red}设置系统服务后的打开方式$</p><pre><code>1.启动MongoDB服务(管理员身份cmd)net start MongoDB  2.关闭MongoDB服务  net stop MongoDB  3.移除 MongoDB 服务  C:\mongodb\bin\mongod.exe --remove 4.在另一个cmd中打开输入：mongo</code></pre><p>$\color{red}基本概念$<br>数据库（database），不需要手动创建，数据库中包含集合<br>集合（collection），不需要手动创建，集合中包含文档<br>文档（document）  </p><p>$\color{red}navicat for MongoDB$</p><pre><code>F6            打开一个mongodb命令行窗口ctrl+r        运行查询窗口的mongodb语句ctrl+/        注释sql语句ctrl+shift +/ 解除注释</code></pre><p>$\color{red}连接$</p><pre><code>mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]mongodb://固定格式username:password@可选登录用户名密码host连接服务器的地址。如果要连接复制集，请指定多个主机地址。portX可选端口，如果不填，默认为27017/database如果指定username:password@，连接并验证登陆指定数据库。若不指定，默认打开 test 数据库。?options是连接选项。如果不使用/database，则前面需要加上/。所有连接选项都是键值对name=value，键值对之间通过&amp;或;（分号）隔开</code></pre><p>举例：</p><pre><code>1.使用用户名和密码连接登陆到本地指定数据库服务器mongodb://admin:123456@localhost/test2.连接 replica pair, 服务器1为example1.com服务器2为example2。mongodb://example1.com:27017,example2.com:270173.连接 replica set 三台服务器, 写入操作应用在主服务器 并且分布查询到从服务器。mongodb://host1,host2,host3/?slaveOk=true4.直接连接第一个服务器，无论是replica set一部分或者主服务器或者从服务器。mongodb://host1,host2,host3/?connect=direct;slaveOk=true5.安全模式连接到localhost:mongodb://localhost/?safe=true以安全模式连接到replica set，并且等待至少两个复制服务器成功写入，超时时间设置为2秒。mongodb://host1,host2,host3/?safe=true;w=2;wtimeoutMS=2000</code></pre><p>$\color{red}使用数据库$</p><pre><code>1.显示当前的数据库名称&gt; dbtest2.显示当前服务器下所有数据库database&gt; show dbsadmin   0.000GBconfig  0.000GBlocal   0.000GB3.如果test数据库不存在，则创建test数据库;  如果test已存在，则切换到test数据库。&gt; use test4.删除当前数据库&gt;db.dropDatabase()</code></pre><p>$\color{red}使用集合$</p><pre><code>1.显示当前数据库下集合collections&gt; show collections2.当前数据库自动创建stu集合db.stu.insert({&quot;name&quot; : &quot;菜鸟教程&quot;})3.当前数据库手动创建stu集合&gt; db.createCollection(&quot;stu&quot;)     # 先创建集合，类似数据库中的表4.当前数据库创建固定stu集合，整个集合空间大小 6142800 KB, 文档最大个数为 10000 个&gt; db.createCollection(&quot;stu&quot;, { capped:true, autoIndexId:true, size:6142800, max:10000 } )5.删除当前数据库指定的stu集合&gt;db.stu.drop()</code></pre><p>$\color{red}CRUD使用$</p><pre><code>先明确使用数据库db    (加入返回test，则当前在test数据库)</code></pre><h2 id="1-插入文档"><a href="#1-插入文档" class="headerlink" title="1.插入文档"></a>1.插入文档</h2><pre><code>注：向集合中添加文档，如果文档没有指定_id属性，会自动添加  {&quot;_id&quot;:objectId(xxxxxx),···}，作为文档的唯一标识  根据时间戳和机器码来生成  自己指定id：db.stu.insert({_id:&quot;id123&quot;,name:&quot;zhangsan&quot;});查询id：ObjectId();</code></pre><pre><code>1.插入json格式文档&gt;db.stu.insert({  title: &#39;MongoDB&#39;,    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,    by: &#39;教程&#39;,    url: &#39;https://www.baidu.com&#39;,    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],    likes: 100})2.插入的文档定义为变量&gt; document=({title: &#39;MongoDB 教程&#39;,     description: &#39;MongoDB 是一个 Nosql 数据库&#39;,    by: &#39;菜鸟教程&#39;,    url: &#39;http://www.runoob.com&#39;,    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],    likes: 100});db.stu.insert(document);3.插入方法 db.collection.insertOne():        向指定集合中插入一条文档数据 db.collection.insertMany():    向指定集合中插入多条文档数据#  插入单条数据&gt; var document = db.collection.insertOne({&quot;a&quot;: 3})返回：document{        &quot;acknowledged&quot; : true,        &quot;insertedId&quot; : ObjectId(&quot;571a218011a82a1d94c02333&quot;)}#  插入多条数据&gt; var res = db.collection.insertMany([{&quot;b&quot;: 3}, {&#39;c&#39;: 4}])返回：res{        &quot;acknowledged&quot; : true,        &quot;insertedIds&quot; : [                ObjectId(&quot;571a22a911a82a1d94c02337&quot;),                ObjectId(&quot;571a22a911a82a1d94c02338&quot;)        ]}</code></pre><p>$\color{red}极重要的实例$<br>插入20000条记录</p><pre><code>1.（执行20000次）该方法7.2sfor(i=1;1&lt;=20000;i++){  db.stu.insert({num:i});}2.（执行一次，添加到数组）该方法0.4svar arr = [];for(var i=1 ; i&lt;=20000 ; i++){    arr.push({num:i});}db.numbers.insert(arr);</code></pre><h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h2><h3 id="find查询函数的属性"><a href="#find查询函数的属性" class="headerlink" title="find查询函数的属性"></a>find查询函数的属性</h3><p>注：<br>find（）        返回的是一个数组<br>findOne（）        返回的是第一个文档对象<br>findMany（）</p><p>所以</p><ul><li><p>1.返回所有文档对象</p><ul><li>db.stu.find({});</li><li>db.col.find({},{“title”:1,_id:0})<br>$\color{red}第一个 {} 放 where 条件，为空表示返回集合中所有文档$<br>$\color{red}第二个 {} 指定那些列显示和不显示 （0表示不显示,1表示显示)$</li></ul></li><li><p>2.返回文档对象有几个</p><ul><li>db.stu.find({}).count();</li></ul></li><li><p>3.返回符合条件的第一个文档对象</p><ul><li>db.stu.find({name:’a’})[0];</li></ul></li><li><p>4.返回符合条件的第一个文档对象的name属性</p><ul><li>db.stu.findOne({age:’a’}).name;</li></ul></li><li><p>5.查询stu集合中的第一个文档对象</p><ul><li>db.stu.findOne()</li></ul></li><li><p>6.查询stu集合中前5条数据</p><ul><li>db.stu.find().limit(5)</li></ul></li><li><p>7.查询stu集合中跳过前5条后的数据<br>  $\color{red}skip()方法来跳过指定数量的数据，默认参数为0$</p><ul><li>db.stu.find().skip(5)</li></ul></li><li><p>8.查询stu集合中的全部数据，并按name属性正序排列  注：1：正序 -1: 倒序</p><ul><li>db.stu.find().sort({name:1})</li></ul></li><li><p>pretty() 方法以格式化的方式来显示所有文档</p><ul><li>db.stu.find().pretty()</li></ul></li></ul><p>注：limit和skip可用于分页<br>skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是<br>$\color{red}先 sort(), 然后 skip()，最后 limit()$<br>    查看第11条到20条的记录  </p><blockquote><p>db.stu.find().skip(10).limit(10);</p></blockquote><h3 id="find查询函数"><a href="#find查询函数" class="headerlink" title="find查询函数"></a>find查询函数</h3><ul><li>1.查询stu集合中所有的数据<ul><li>db.stu.find()</li></ul></li><li>2.查询stu集合中name=’a’的数据<ul><li>db.stu.find({name:’a’})</li></ul></li><li>3.查询stu集合中name=’a’的数据<ul><li>db.stu.find({name:{$eq:’a’}})</li></ul></li><li>4.查询stu集合中age&gt;18的数据<ul><li>db.stu.find({age:{$gt:18}})</li></ul></li><li>5.如果是 age 大于 50 小于 80<ul><li>不能这样写：db.posts.find( {  age: { $gt: 50 }, qty: { $lt: 80 } } )</li><li>应该这样写：db.posts.find( {  age: { $gt: 50 ,$lt: 80}} )</li></ul></li></ul><pre><code>格式：{ field: {符号: value}}$eq   等号        equal  $gt   大于        great  $gte  大于等于    great equal  $lt   小于        less than  $lte  小于等于    less than equal  $ne   不等于      not equal  $in   在范围内  $nin  不在范围内  </code></pre><ul><li><p>5.查找stu集合中name域中以“华为”字符的开头的数据</p><ul><li>db.stu.find({name:/^华为/})</li></ul></li><li><p>6.查询stu集合中name=’手机1’和name=’手机2’的数据</p><ul><li>db.stu.find({name:{$in:[‘手机1’,’手机2’]}})</li></ul></li></ul><pre><code>格式：{ field:{符号:[value1,value2,....]}}$in        在范围内$nin    不在范围内</code></pre><ul><li><p>7.查找name=”华为手机”并且price:800的数据</p><ul><li>db.stu.find({name:”华为手机”,price:800})</li></ul></li><li><p>8.查询stu集合中name=’华为手机’ 或者 price&lt;1000的数据</p><ul><li>db.stu.find({$or:[ {name:’华为手机’},{price:{$lt:1000}} ]})</li></ul></li><li><p>9.查询stu集合中price&lt;=100的数据，不存在price属性的数据也会查询出来</p><ul><li>db.stu.find({price:{$not:{$gt:100}}})</li></ul></li><li><p>10.AND 和 OR联合使用</p><ul><li>db.col.find({“likes”: {$gt:50}, $or: [{“by”: “菜鸟教程”},{“title”: “MongoDB 教程”}]}).pretty()</li></ul></li></ul><pre><code>格式：$or:[{},{},....]$or        或者  $and    并且  $nor    与$or相反 $not    取反 </code></pre><ul><li>11.查询stu集合中包含域名称为price的数据<ul><li>db.stu.find({price:{$exists: true}})</li></ul></li><li>12.查询stu集合中name属性为字符串类型的数据<ul><li>db.stu.find({name:{$type:2}})</li></ul></li></ul><pre><code>格式：$exists: true$type:2       (type操作符不细讲)</code></pre><ul><li>13.查询products集合中name=’华为手机’的数据</li></ul><pre><code>db.products.find({  $where: function(){    return this.name == &#39;华为手机&#39;  }})</code></pre><ul><li>14.查询products集合中name域中包含“华为手机”字符的数据</li></ul><pre><code>db.products.find({  $where: function(){    return  this.name.indexOf(&#39;华为手机&#39;) &gt; -1;  }})</code></pre><pre><code>格式：$where: function(){    return  xxx;  }</code></pre><ul><li>15.$\color{red}修改内嵌文档的属性$（外文档的内文档的属性）  </li></ul><p>$\color{red}极重要的实例$</p><pre><code>{  _id:xxxxxxxx,  name:&quot;zhangsan&quot;,  hobby:{    citys:[      &quot;hangzhou&quot;,&quot;BeiJing&quot;,&quot;shanghai&quot;    ],    movie:[      &quot;movie-a&quot;,&quot;movie-b&quot;    ]  }}向name:zhangsan的文档中添加一个age:20db.stu.update({name:zhangsan},{$set:{age:20}})//通过内嵌文档来对文档查询，必须其属性名要加引号“”和&#39;.&#39;号连接查询喜欢电影movie-a的文档db.stu.find({&quot;hobby.movie&quot;:&quot;movie-a&quot;})//push在数组中添加,如果数组中已存在，还继续添加向name:zhangsan中添加一个新的元素movie-cdb.ustu.updata({name:&quot;zhangsan&quot;},{$push:{&quot;hobby.movie&quot;:&quot;movie-c&quot;}})//addToSet在数组中添加,如果数组中已存在，不添加向name:zhangsan中添加一个新的元素movie-cdb.ustu.updata({name:&quot;zhangsan&quot;},{$addToSet:{&quot;hobby.movie&quot;:&quot;movie-c&quot;}})</code></pre><h3 id="集合查询函数"><a href="#集合查询函数" class="headerlink" title="集合查询函数"></a>集合查询函数</h3><ul><li><p>14.查询users集合中不重复的name属性，返回的是数组</p><ul><li>db.stu.distinct(‘name’)</li></ul></li><li><p>15.查询stu集合中name=’zhangshan’的数据数量</p><ul><li>db.stu.count({name:’zhangshan’})</li></ul></li></ul><h2 id="3-更新"><a href="#3-更新" class="headerlink" title="3.更新"></a>3.更新</h2><ul><li>1.update()$\color{red}更新已存在的文档$<ul><li>$set&emsp;&emsp;&emsp;数据存在则更新,更改属性列表,不在列表中其他属性会被保留，如果不加此符号，其它属性会被丢弃（_id属性不会丢失）</li><li>$unset&emsp;&emsp;数据存在时不进行操作,移除集合中的键值对</li><li>$setOnInsert&emsp;数据存在时不进行操作</li></ul></li></ul><pre><code>db.collection.update(   &lt;query&gt;,   &lt;update&gt;,   {     upsert: &lt;boolean&gt;,     multi: &lt;boolean&gt;,     writeConcern: &lt;document&gt;   })query         查询条件，类似sql内where后面的update        类似sql内set后面的upsert        可选，如果不存在，是否插入,              true为插入，默认是false，不插入。multi         可选，默认是false,只更新找到的第一条记录，              true,就把按条件查出来多条记录全部更新。writeConcern  可选，抛出异常的级别。</code></pre><p>例子：</p><pre><code>只会修改第一条发现的文档&gt;db.stu.update({&#39;title&#39;:&#39;MongoDB 教程&#39;},{$set:{&#39;title&#39;:&#39;MongoDB&#39;}})修改多条相同的文档&gt;db.stu.update({&#39;title&#39;:&#39;MongoDB 教程&#39;},{$set:{&#39;title&#39;:&#39;MongoDB&#39;}},{multi:true})$set用来在原有属性上，添加指定属性$unset用来删除指定属性，其他属性不变不存在-只添加第一条：db.col.update( { &quot;count&quot; : { $gt : 4 } } , { $set : { &quot;test5&quot; : &quot;OK&quot;} },true,false );不存在-全部添加进去:db.col.update( { &quot;count&quot; : { $gt : 5 } } , { $set : { &quot;test5&quot; : &quot;OK&quot;} },true,true );已存在-只更新第一条记录：db.col.update( { &quot;count&quot; : { $gt : 10 } } , { $inc : { &quot;count&quot; : 1} },false,false );已存在-全部更新：db.col.update( { &quot;count&quot; : { $gt : 3 } } , { $set : { &quot;test2&quot; : &quot;OK&quot;} },false,true );</code></pre><ul><li>2.save()$\color{red}传入的文档来替换已有文档$</li></ul><pre><code>db.collection.save(   &lt;document&gt;,   {     writeConcern: &lt;document&gt;   })document      文档数据。writeConcern  可选，抛出异常的级别。</code></pre><p>例子：</p><pre><code>替换了 _id 为 56064f89ade2f21f36b03136 的已存在的文档数据&gt;db.col.save({    &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),    &quot;title&quot; : &quot;MongoDB&quot;})</code></pre><ul><li>3.updateOne()$\color{red}向指定集合更新单个文档$</li><li>4.updateMany()$\color{red}向指定集合更新多个文档$</li></ul><p>例子：</p><pre><code>更新单个文档&gt; db.stu.updateOne({&quot;name&quot;:&quot;abc&quot;},{$set:{&quot;age&quot;:&quot;28&quot;}})更新多个文档&gt; db.stu.updateMany({&quot;age&quot;:{$gt:&quot;10&quot;}},{$set:{&quot;status&quot;:&quot;xyz&quot;}})</code></pre><ul><li>5.replaceOne()$\color{red}替换单个文档$</li></ul><h2 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h2><ul><li><p>1.remove()即使把集合stu中的所有数据都删除了stu集合仍然存在</p><ul><li>需要继续执行 db.repairDatabase() 来回收磁盘空间。</li></ul></li><li><p>2.drop()不仅会删除数据，还会把集合的结构给删除</p></li><li><p>3.deleteOne()</p></li><li><p>4.deleteMany()</p></li></ul><pre><code>db.collection.remove(   &lt;query&gt;,   &lt;justOne&gt;)query           可选,删除文档的条件。justOne         可选,如果设为 true 或 1，则只删除一个文档，                如果不设置，或默认值 false，则删除所有匹配条件的文档。writeConcern    可选,抛出异常的级别。</code></pre><p>例子：</p><pre><code>1.删除stu集合中name=&#39;abc&#39;的文档(所有)db.stu.remove({name:&#39;abc&#39;})删除stu集合中name=&#39;abc&#39;的文档(一个)db.stu.remove({name:&#39;abc&#39;}，true)2.删除 status 等于 A 的一个文档db.stu.deleteOne( { status: &quot;A&quot; } )3.删除 status 等于 A 的全部文档db.stu.deleteMany({ status : &quot;A&quot; })4.清空集合stu文档,保留数据【性能差】db.stu.remove({})5.清空集合stu文档,不保留数据【性能好】db.stu.drop()6.删除集合下全部文档db.stu.deleteMany({})</code></pre><p>$\color{red}极重要的实例：（现实中不能真的删除数据）$</p><pre><code>设置isDel为已经删除的意思：0=未删除，1=删除db.stu.insert({  {    name:&quot;zhangsan&quot;,    idDel:0  },  {    name:&quot;lisi&quot;,    idDel:0  },  {    name:&quot;wangwu&quot;,    idDel:0  },})//更新name:zhangsan，将isDel:0改为1，即表示删除了，但实际并没有删db.stu.updataOne({name:zhangsan},{$set:{isDel:1}});//给用户看的显示数据只需调用isDel:0的数据即可db.stu.finf({isDel:0});</code></pre><h2 id="5-排序"><a href="#5-排序" class="headerlink" title="5.排序"></a>5.排序</h2><ul><li>sort(keys)<ul><li>Keys 为要创建的索引字段：1 为升序排列，-1 是降序排列</li></ul></li></ul><pre><code>按字段 key 的升序排列&gt;db.COLLECTION_NAME.find().sort({KEY:1})按字段 likes 的降序排列,且显示title，不显示_id字段&gt;db.col.find({},{&quot;title&quot;:1,_id:0}).sort({&quot;likes&quot;:-1})</code></pre><p>注：<br>skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是<br>先 sort(), 然后 skip()，最后 limit()。</p><h2 id="6-1索引"><a href="#6-1索引" class="headerlink" title="6.1索引"></a>6.1索引</h2><ul><li>createIndex(keys, options)<ul><li>Keys 为要创建的索引字段：1 为升序排列，-1 是降序排列</li><li>options 有很多</li></ul></li></ul><pre><code>1.对title字段按升序索引&gt;db.stu.createIndex({&quot;title&quot;:1})2.多个字段创建索引&gt;db.stu.createIndex({&quot;title&quot;:1,&quot;description&quot;:-1})3.后台创建索引db.stu.createIndex({open: 1, close: 1}, {background: true})4.查看集合索引db.stu.getIndexes()5.查看集合索引大小db.stu.totalIndexSize()6.删除集合所有索引db.stu.dropIndexes()7.删除集合指定索引db.stu.dropIndex(&quot;索引名称&quot;)另：数据记录中有日期类型，可以设置定时自动删除任务（单字段索引，混合索引不支持）{expireAfterSeconds: 180}设置为180秒后删除索引db.col.createIndex({&quot;createDate&quot;: 1},{expireAfterSeconds: 180})</code></pre><h2 id="6-2覆盖索引查询、查询分析、查询限制、全文检索"><a href="#6-2覆盖索引查询、查询分析、查询限制、全文检索" class="headerlink" title="6.2覆盖索引查询、查询分析、查询限制、全文检索"></a>6.2覆盖索引查询、查询分析、查询限制、全文检索</h2><p>1.索引存在于RAM中，从索引中获取数据比通过扫描文档读取数据要快得多<br>很少对集合进行读取操作，建议不使用索引<br>2.$\color{red}所有索引字段是一个子文档$<br>3.db.xxx.ensureIndex()<br>4.db.xxx.ensureIndex().explain()<br>5.db.xxx.ensureIndex().hint()<br>6.$search</p><pre><code>现有例子{   &quot;_id&quot;: ObjectId(&quot;53402597d852426020000002&quot;),   &quot;gender&quot;: &quot;male&quot;,   &quot;name&quot;: &quot;zhangsan&quot;,   &quot;tags&quot;: [      &quot;music&quot;,      &quot;cricket&quot;,      &quot;blogs&quot;   ],   &quot;address&quot;: {      &quot;city&quot;: &quot;Los Angeles&quot;,      &quot;state&quot;: &quot;California&quot;,      &quot;pincode&quot;: &quot;123&quot;   },   &quot;commit&quot;:&quot;This ia a commint&quot;}1.创建索引（0不显示，1显示）&gt;db.users.ensureIndex({gender:1,name:1})2.通过索引查找&gt;db.users.find({gender:&quot;male&quot;},{name:1,_id:0})3.查询分析&gt;db.users.find({gender:&quot;male&quot;},{name:1,_id:0}).explain()&gt;db.users.find({gender:&quot;male&quot;},{name:1,_id:0}).hint()  1.索引数组字段，加引号（tags是数组）&gt;db.users.ensureIndex({&quot;tags&quot;:1})2.通过索引查找包含的字段的文档&gt;db.users.find({tags:&quot;cricket&quot;})1.索引子文档字段，加引号（address是子文档对象）&gt;db.users.ensureIndex({&quot;address.city&quot;:1,&quot;address.state&quot;:1,&quot;address.pincode&quot;:1})2.通过索引查找&gt;db.users.find({&quot;address.city&quot;:&quot;Los Angeles&quot;})  &gt;db.users.find({&quot;address.city&quot;:&quot;Los Angeles&quot;,&quot;address.state&quot;:&quot;California&quot;,&quot;address.pincode&quot;:&quot;123&quot;})</code></pre><pre><code>1.全文检索，加引号（a是commit的自定义别名,加引号）&gt;db.users.ensureIndex({&quot;commit&quot;:&quot;a&quot;})2.查找包含特定的内容&gt;db.users.find({$a:{$search:&quot;This&quot;}})3.删除全文索引(先查找全文索引名，再删除)&gt;db.users.getIndexes()&gt;db.posts.dropIndex(&quot;a&quot;)</code></pre><pre><code>查询限制1.正则表达式及非操作符，如 $nin, $not, 等。2.算术运算符，如 $mod等。3.$where 子句</code></pre><h2 id="7-聚合"><a href="#7-聚合" class="headerlink" title="7.聚合"></a>7.聚合</h2><p>用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果</p><ul><li>db.stu.aggregate(AGGREGATE_OPERATION)</li></ul><pre><code>聚合框架常用操作：$match      过滤数据，只输出符合条件的文档。$limit      限制返回的文档数。$skip       跳过指定数量的文档，并返回余下的文档。$project    是否显示文档结构。重命名、增加、删除域、创建计算结果、嵌套文档$unwind     文档中某一个数组类型字段拆分成多条，每条包含数组中的一个值。$group      文档分组，用于统计结果。$sort       文档排序后输出。$geoNear    输出接近某一地理位置的有序文档。</code></pre><pre><code>$group实例聚合表达式$sum      计算总和。$avg      计算平均值。$min      获取集合中所有文档对应值得最小值。$max      获取集合中所有文档对应值得最大值。$push     在结果文档中插入值到一个数组中，若重复会再创建。$pushAll  同$push,只是一次可以追加多个值到一个数组字段内。$pop      在结果文档中删除数组的第一个或最后一个元素。$addToSet 在结果文档中插入值到一个数组中，若重复不会再创建。$first    根据资源文档的排序获取第一个文档数据。$last     根据资源文档的排序获取最后一个文档数据。$rename   修改字段名称$bit      位操作，integer类型例：db.stu.aggregate([{$group:{_id:&quot;$by_user&quot;,url:{$push:&quot;$url&quot;}}}])db.stu.aggregate([{$group:{_id:&quot;$by_user&quot;,first_url:{$first:&quot;$url&quot;}}}db.stu.aggregate([{$group:{_id:&quot;$by_user&quot;,last_url:{$last:&quot;$url&quot;}}}]){ $push : { field : value } }{ $pushAll : { field : value_array } }{ $pull : { field : _value } }{ $pop : { field : 1 } }{ $rename : { old_field_name : new_field_name } }{ $bit : { field : {and : 5}}}</code></pre><pre><code>$project实例0显示，1不显示，默认情况下_id字段是被包含的，想不包含的话_id : 0db.stu.aggregate(    {      $project : {        title : 1 ,        author : 1 ,      }    } );</code></pre><pre><code>$match实例db.articles.aggregate( [   { $match : { score : { $gt : 70, $lte : 90 } } },   { $group: { _id: null, count: { $sum: 1 } } }                    ] );</code></pre><h2 id="8-一对一、一对多、多对多的联系"><a href="#8-一对一、一对多、多对多的联系" class="headerlink" title="8.一对一、一对多、多对多的联系"></a>8.一对一、一对多、多对多的联系</h2><h3 id="8-1-ObjectId"><a href="#8-1-ObjectId" class="headerlink" title="8.1 ObjectId"></a>8.1 ObjectId</h3><ul><li>ObjectId 是一个12字节 BSON 类型数据<ul><li>前4个字节：时间戳</li><li>紧接的3个字节：机器标识码</li><li>紧接的两个字节：进程id组成（PID）</li><li>最后三个字节：随机数。</li></ul></li></ul><pre><code>1.创建新的ObjectId&gt;newObjectId = ObjectId()2.获取文档的创建时间&gt;ObjectId(&quot;xxxxxxxxxxxxxxxxxxxxx&quot;).getTimestamp()3.ObjectId 转换为字符串&gt;new ObjectId().str</code></pre><h3 id="8-2-指定的序列会自动增长-1-并返回最新序列值"><a href="#8-2-指定的序列会自动增长-1-并返回最新序列值" class="headerlink" title="8.2 指定的序列会自动增长 1 并返回最新序列值"></a>8.2 指定的序列会自动增长 1 并返回最新序列值</h3><p>（最好不要对_id调用这个函数）</p><pre><code>1.自己创建自增函数&gt;function Autoincrement(sequenceName){   var sequenceDocument = db.counters.findAndModify(      {         query:{_id: sequenceName },         update: {$inc:{sequence_value:1}},         &quot;new&quot;:true      });   return sequenceDocument.sequence_value;}2.调用自增函数&gt;db.user.insert({   &quot;userid&quot;:Autoincrement(&quot;userid&quot;),   &quot;name&quot;:&quot;zhangsan&quot;})&gt;db.user.insert({   &quot;userid&quot;:Autoincrement(&quot;userid&quot;),   &quot;name&quot;:&quot;lisi&quot;})3.读取文档&gt;db.user.find()输出：{ &quot;_id&quot; : ObjectId(xxxxxxx), &quot;userid&quot; : 1, &quot;name&quot; : &quot;zhangsan&quot;}{ &quot;_id&quot; : ObjectId(xxxxxxx), &quot;userid&quot; : 2, &quot;name&quot; : &quot;lisi&quot;}</code></pre><p>1.一对一：如夫妻</p><pre><code>wifeAndHusband集合db.wifeAndHusband.insert([  {    name:&quot;男1&quot;    wife:{      name:&quot;女1&quot;      }  },  {    name:&quot;男2&quot;    wife:{      name:&quot;女2&quot;      }  },]);</code></pre><p>2.$\color{red}一对多（相当于mysql的外键、多表查询）:如文章和评论$</p><pre><code>article集合（文章）db.article.insert([  {    article:&quot;a&quot;  },  {    article:&quot;b&quot;  }]);假设find（）后,id为12个标准字节{&quot;_id&quot;:ObjectId(&quot;xxxxxxxxxxx1&quot;),&quot;article&quot;:&quot;a&quot;}{&quot;_id&quot;:ObjectId(&quot;xxxxxxxxxxx2&quot;),&quot;article&quot;:&quot;b&quot;}comment集合（评论）db.comment.insert([  list:[&quot;评论1&quot;,&quot;评论2&quot;,&quot;评论3&quot;]  article_id:ObjectId(&quot;xxxxxxxxxxx1&quot;)]);db.comment.insert([  list:[&quot;评论4&quot;,&quot;评论5&quot;]  article_id:ObjectId(&quot;xxxxxxxxxxx1&quot;)]);db.comment.insert([  list:[&quot;评论1&quot;,&quot;评论2&quot;,&quot;评论3&quot;]  article_id:ObjectId(&quot;xxxxxxxxxxx2&quot;)]);此时两表已关联先查找文章a(一篇)的评论的所有_id：var article = db.article.findOne({article:&quot;a&quot;})._id;再查找所有与文章a的_id有关的评论：db.comment.find({article_id:article});</code></pre><p>3.$\color{red}多对多（相当于mysql的外键、多表查询）:如老师和学生$<br>把_id变成一个数组</p><pre><code>teachers集合db.teachers.insert([  {teachername:&quot;老师1&quot;},  {teachername:&quot;老师2&quot;},  {teachername:&quot;老师3&quot;},]);假设find（）后,id为12个标准字节{&quot;_id&quot;:ObjectId(&quot;xxxxxxxxxxx1&quot;),&quot;teachername&quot;:&quot;老师1&quot;}}{&quot;_id&quot;:ObjectId(&quot;xxxxxxxxxxx2&quot;),&quot;teachername&quot;:&quot;老师2&quot;}}{&quot;_id&quot;:ObjectId(&quot;xxxxxxxxxxx3&quot;),&quot;teachername&quot;:&quot;老师2&quot;}}students集合db.students.insert([  {    stuname:&quot;学生1&quot;，    teacher_id:[      ObjectId(&quot;xxxxxxxxxxx1&quot;),      ObjectId(&quot;xxxxxxxxxxx2&quot;)    ]  },  {    stuname:&quot;学生2&quot;，    teacher_id:[      ObjectId(&quot;xxxxxxxxxxx1&quot;),      ObjectId(&quot;xxxxxxxxxxx3&quot;)    ]  },  {    stuname:&quot;学生3&quot;，    teacher_id:[      ObjectId(&quot;xxxxxxxxxxx2&quot;),      ObjectId(&quot;xxxxxxxxxxx3&quot;)    ]  },]);此时两表已关联先查找老师1(一个)的所有_id：var teacher = db.teachers.findOne({teachername:&quot;老师1&quot;})._id;再查找所有与老师1的_id有关的学生：db.students.find({teacher_id:teacher});</code></pre><h2 id="9-多表查询深入"><a href="#9-多表查询深入" class="headerlink" title="9.多表查询深入"></a>9.多表查询深入</h2><p>第13课</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/104993090&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB简单学习（初级）&lt;/a&gt;&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://lewis.qi.tk/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://lewis.qi.tk/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>webpack--打包基础</title>
    <link href="http://lewis.qi.tk/2020/05/16/webpack-%E6%89%93%E5%8C%85%E5%9F%BA%E7%A1%80/"/>
    <id>http://lewis.qi.tk/2020/05/16/webpack-%E6%89%93%E5%8C%85%E5%9F%BA%E7%A1%80/</id>
    <published>2020-05-16T11:55:22.000Z</published>
    <updated>2020-05-16T11:58:14.609Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/104749506" target="_blank" rel="noopener">webpack–打包基础</a></p><h1 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a>webpack打包</h1><p>异步编程的直接体现就是回调,处理大量的并发请求<br>一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作</p><h2 id="cmd（npm、node-js）"><a href="#cmd（npm、node-js）" class="headerlink" title="cmd（npm、node.js）"></a>cmd（npm、node.js）</h2><p>允许用户从NPM服务器下载别人编写的第三方包到本地使用。<br>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。<br>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。  </p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><ul><li><p>webpack是前端资源构建工具，静态模块打包器。</p></li><li><p>资源文件（js/json/css/img/less/sass/jq····）都作为模块处理</p></li><li><p>1.查看版本</p><ul><li><code>node -v</code></li><li><code>npm -v</code></li></ul></li><li><p>2.npm安装指令</p><ul><li>安装一个用于<strong>生产环境</strong>的安装包  </li><li><code>npm install --save  xxx</code></li><li>安装一个用于<strong>开发环境</strong>的安装包（例如linter, 测试库等）</li><li><code>npm install --save-dev  xxx</code></li></ul></li><li><p>3.升级npm</p><ul><li><code>npm install -g npm</code></li></ul></li><li><p>4.引入资源（简称：打包）</p><ul><li><code>import $ from &#39;jquery&#39;;</code>  【引入js资源】</li><li><code>import &#39;./index.less&#39;;</code>  【引入less资源（路径）】  </li><li><code>import x from &#39;./data.json&#39;;</code>  【引入json资源，用x作为变量】</li></ul></li></ul><blockquote><p>在E:\webpack-demo新建文件如webpack-test并进入<br>cd E:\webpack-demo\webpack-test  </p></blockquote><ul><li>5.创建一个新的本地项目目录名为webpack-demo<ul><li><code>mkdir webpack-test</code></li></ul></li><li>6.进入目录<ul><li><code>cd webpack-test</code></li></ul></li><li>7.安装webpack<ul><li><code>npm install --save-dev webpack</code> 【安装最新版本】</li><li><code>npm install --save-dev webpack@3.12.0</code>  【安装你需要的版本】</li></ul></li><li>8.安装webpack-cli<ul><li><code>npm install --save-dev webpack-cli</code></li></ul></li></ul><p>注：7和8混合：</p><ul><li><code>npm install webpack webpack-cli -D</code></li></ul><hr><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul><li>1.删除全局webpack-cli  <ul><li><code>npm uninstall -g webpack-cli</code>  </li></ul></li><li>2.删除全局webpack  <ul><li><code>npm uninstall -g webpack</code>  </li></ul></li><li>3.删除本地（局部）webpack-cli  <ul><li><code>npm uninstall webpack-cli</code>  </li></ul></li><li>4.删除本地（局部）webpack  <ul><li><code>npm uninstall webpack</code>  </li></ul></li><li>5.检查webpack残余文件  <ul><li><code>rm -rf node_modules package-lock.json package.json</code></li></ul></li></ul><hr><h2 id="webpack-5个核心概念"><a href="#webpack-5个核心概念" class="headerlink" title="webpack 5个核心概念"></a>webpack 5个核心概念</h2><ol><li><p><code>entry</code> 入口<br>指示webpack从哪个文件作为入口起点开始打包  </p></li><li><p><code>output</code> 输出<br>指示webpack打包后的资源bundles输出到哪里及如何命名  </p></li><li><p><code>loader</code> 编译<br>让webpack处理非js文件（webpack只能处理打包js、json文件，不能处理打包css、img文件）  </p></li><li><p><code>plugins</code> 插件<br>更广的任务（压缩、优化）  </p></li><li><p><code>mode</code> 编译模式  </p></li></ol><ul><li><code>development</code> （开发环境）<ul><li>处于开发阶段，不会进行压缩和混淆，打包速度会快一些</li></ul></li><li><code>production</code> （生产环境）<ul><li>项目处于上线发布阶段，会进行压缩和混淆，打包速度会慢一些</li></ul></li></ul><hr><h2 id="webpack-config-js-webpack的配置文件"><a href="#webpack-config-js-webpack的配置文件" class="headerlink" title="webpack.config.js: webpack的配置文件"></a>webpack.config.js: webpack的配置文件</h2><p>作用：指示webpack干哪些活（当运行webpack指令时，加载里面的配置）  </p><ul><li>src文件夹内文件采用 <code>es6</code> 编写</li><li>webpack.config.js采用 <code>commonjs</code> 编写</li></ul><h3 id="color-red-基本配置"><a href="#color-red-基本配置" class="headerlink" title="$\color{red}基本配置$"></a>$\color{red}基本配置$</h3><p>webpack.config.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//resolve用来拼接绝对路径的方法</span><span class="token keyword">const</span><span class="token punctuation">{</span> resolve <span class="token punctuation">}</span><span class="token operator">=</span>require<span class="token punctuation">{</span><span class="token string">'path'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//webpack配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//入口</span>    entry<span class="token punctuation">:</span> path<span class="token punctuation">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//输出</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出文件名</span>        filename<span class="token punctuation">:</span><span class="token string">'build.js'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//输出路径，__dirname代表当前文件的目录绝对路径，+build路径</span>        path<span class="token punctuation">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//loader配置</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//详细配置</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//插件配置</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//详细配置</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//模式</span>    mode：<span class="token string">'development'</span><span class="token punctuation">,</span>    或mode：<span class="token string">'production'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="一（1）、【打包普通js文件】"><a href="#一（1）、【打包普通js文件】" class="headerlink" title="一（1）、【打包普通js文件】"></a>一（1）、【打包普通js文件】</h2><p>src/index.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 本来引入的资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第1个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第2个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第3个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第4个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>npm install jQuery -S 【安装jQuery】</li></ul><p>src/index.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//导入jQuery</span><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li:odd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'backgroundColor'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li:even'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'backgroundColor'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-项目根目录安装webpack"><a href="#1-项目根目录安装webpack" class="headerlink" title="1.项目根目录安装webpack"></a>1.项目根目录安装webpack</h3><ul><li><code>npm install webpack webpack-cli -D</code></li></ul><h3 id="2-根目录中创建一个-webpack-config-js-来配置webpack"><a href="#2-根目录中创建一个-webpack-config-js-来配置webpack" class="headerlink" title="2.根目录中创建一个 webpack.config.js 来配置webpack"></a>2.根目录中创建一个 <code>webpack.config.js</code> 来配置webpack</h3><p>webpack.config.js</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span><span class="token string">"development"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-修改项目中的关于node的-package-json-文件添加运行脚本dev【可有可无】"><a href="#3-修改项目中的关于node的-package-json-文件添加运行脚本dev【可有可无】" class="headerlink" title="3.修改项目中的关于node的 package.json 文件添加运行脚本dev【可有可无】"></a>3.修改项目中的关于node的 <code>package.json</code> 文件添加运行脚本dev【可有可无】</h3><ul><li>dev脚本，dev是自定义的名字</li></ul><p>package.json</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token string">"scripts"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"dev"</span><span class="token punctuation">:</span><span class="token string">"webpack"</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-设置webpack的打包入口-出口"><a href="#4-设置webpack的打包入口-出口" class="headerlink" title="4.设置webpack的打包入口/出口"></a>4.设置webpack的打包入口/出口</h3><ul><li>默认 <code>src/index.js</code> 打包<strong>入口</strong>js 文件</li><li>默认 <code>dist/main.js</code> 打包<strong>输出</strong> js 文件</li></ul><h3 id="5-不想使用默认的入口-出口js文件"><a href="#5-不想使用默认的入口-出口js文件" class="headerlink" title="5.不想使用默认的入口/出口js文件"></a>5.不想使用默认的入口/出口js文件</h3><ul><li>改变 <code>webpack.config.js</code> 来设置入口/出口的js文件</li></ul><p>webpack.config.js</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>        mode<span class="token punctuation">:</span><span class="token string">"development"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//入口文件路径</span>        entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./src/a.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//出口文件路径</span>        output<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置路径</span>            path<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//设置文件名</span>            filename<span class="token punctuation">:</span><span class="token string">"b.js"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-设置webpack的自动打包"><a href="#6-设置webpack的自动打包" class="headerlink" title="6.设置webpack的自动打包"></a>6.设置webpack的自动打包</h3><ul><li><p><code>webpack-dev-server</code> 自动打包的输出文件，默认放到了服务器的根目录中.</p></li><li><p>A.安装自动打包功能的包： <code>webpack-dev-server</code></p><ul><li><code>npm install webpack-dev-server -D</code></li></ul></li><li><p>B.修改node的 <code>package.json</code> 中的dev指令如下：</p></li></ul><p>package.json</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span><span class="token string">"webpack-dev-server"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-在页面中引入项目打包生成的js文件"><a href="#7-在页面中引入项目打包生成的js文件" class="headerlink" title="7.在页面中引入项目打包生成的js文件"></a>7.在页面中引入项目打包生成的js文件</h3><p>（找到默认的dist路径中生成的main.js文件，将其引入到html页面中）</p><ul><li><p>现入口文件：src/a.js</p></li><li><p>现出口文件：dist/b.js</p></li><li><p>本来html引入的资源是</p><ul><li><code>&lt;script src=&quot;src/a.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li><p>html引入的资源是（更改后,未自动打包）</p><ul><li><code>&lt;script src=&quot;src/b.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li><p>html引入的资源是（更改后,已自动打包）【重要】</p><ul><li><code>&lt;script src=&quot;/b.js&quot;&gt;&lt;/script&gt;</code></li></ul></li></ul><h3 id="8-启动webpack进行项目打包-运行打包后资源"><a href="#8-启动webpack进行项目打包-运行打包后资源" class="headerlink" title="8.启动webpack进行项目打包,运行打包后资源"></a>8.启动webpack进行项目打包,运行打包后资源</h3><p>方式一：<br>默认的webpack会以 ./src/index.js 为入口文件开始打包，<br>打包后输出到 .build/built.js ，<br>其打包环境mode为development  </p><ul><li>打包：<code>webpack ./src/index.js -o .build/built.js --mode=development</code></li><li>运行：<code>node .build/built.js</code></li></ul><p>方式二:</p><ul><li><p>因为<code>webpack-dev-server</code> $\color{red}默认打开服务器网页$</p><ul><li>自动运行在<code>http://localhost:8080/</code>,且文件直接托管于根目录，</li><li><code>http://localhost:8080/b.js</code>可直接看到源代码</li></ul></li><li><p><code>npm run dev</code></p></li></ul><p>方法三：【重要】</p><ul><li>A.配置html-webpack-plugin，$\color{red}现在是默认直接打开对应文件$<ul><li><code>http://localhost:8080/</code>可直接看到源代码</li><li><code>npm install html-webpack-plugin -D</code></li></ul></li><li>B.修改 <code>webpack.config.js</code> 文件</li></ul><p>webpack.config.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//导入包</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建对象</span><span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置生成预览页面的模板文件</span>    template<span class="token punctuation">:</span><span class="token string">"./src/index.html"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//设置生成的预览页面名称</span>    filename<span class="token punctuation">:</span><span class="token string">"index.html"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token operator">...</span><span class="token operator">...</span>                plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>C.【运行的时候可自动弹出浏览器】两种方式等价</li></ul><p>方式一：打开 <code>package.json</code> 文件，修改dev命令</p><p>package.json</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --open --host localhost --port 8080"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方式二</p><p>webpack.config.js:  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span><span class="token punctuation">{</span> resolve <span class="token punctuation">}</span><span class="token operator">=</span>require<span class="token punctuation">{</span><span class="token string">'path'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mode<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//用于自动编译，打开浏览器并刷新（不用重复webpack进行编译）</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>        contentBase<span class="token punctuation">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//启动gzip压缩</span>        compress<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//服务端口号</span>        port<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//保存后自动打开浏览器</span>        open<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>D.运行打包后的html<ul><li><code>npm run dev</code></li></ul></li></ul><hr><h2 id="一（2）、【打包js文件中的高级语法】"><a href="#一（2）、【打包js文件中的高级语法】" class="headerlink" title="一（2）、【打包js文件中的高级语法】"></a>一（2）、【打包js文件中的高级语法】</h2><h3 id="A-安装包"><a href="#A-安装包" class="headerlink" title="A.安装包"></a>A.安装包</h3><ul><li><code>npm install html-webpack-plugin -D</code><ul><li>直接打开对应导入的文件index.html</li></ul></li><li><code>npm install babel-loader @babel/core @babel/runtime -D</code><ul><li>安装babel转换器</li></ul></li><li><code>npm install @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</code><ul><li>安装babel语法插件包</li></ul></li></ul><h3 id="B-配置规则【module中的rules数组】"><a href="#B-配置规则【module中的rules数组】" class="headerlink" title="B.配置规则【module中的rules数组】"></a>B.配置规则【module中的rules数组】</h3><ul><li><code>test</code> 设置需要匹配的文件类型，支持正则</li><li><code>use</code>  表示该文件类型需要调用的loader</li><li><strong>注意use的顺序：调用是从后往前</strong></li></ul><p>webpack.config.js:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">"./src/index.html"</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span><span class="token string">"index.html"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span> resolve <span class="token punctuation">}</span><span class="token operator">=</span>require<span class="token punctuation">{</span><span class="token string">'path'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span><span class="token string">'.src/index.js'</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        filename<span class="token punctuation">:</span><span class="token string">'build.js'</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>，    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//exclude为排除项，意思是不要处理node_modules中的js文件</span>                exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">,</span>    mode：<span class="token string">'development'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-根目录创建并配置-babel-config-js-文件"><a href="#C-根目录创建并配置-babel-config-js-文件" class="headerlink" title="C.根目录创建并配置 babel.config.js 文件"></a>C.根目录创建并配置 <code>babel.config.js</code> 文件</h3><p>babel.config.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// const presets = [</span><span class="token comment" spellcheck="true">//     ["@babel/env",{</span><span class="token comment" spellcheck="true">//         targets:{</span><span class="token comment" spellcheck="true">//             edge:"17",</span><span class="token comment" spellcheck="true">//             firefox:"60",</span><span class="token comment" spellcheck="true">//             chrome:"67",</span><span class="token comment" spellcheck="true">//             safari:"11.1"</span><span class="token comment" spellcheck="true">//         }</span><span class="token comment" spellcheck="true">//     }]</span><span class="token comment" spellcheck="true">// ]</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span> <span class="token string">"@babel/plugin-proposal-class-properties"</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/index.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//高级js语法</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> info <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以使用npx<strong>运行未打包前的高级js文件</strong><ul><li><code>npx babel-node src/index.js</code></li></ul></li></ul><p>src/index.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入的资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第1个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第2个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第3个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第4个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="D-运行打包后的html"><a href="#D-运行打包后的html" class="headerlink" title="D.运行打包后的html"></a>D.运行打包后的html</h3><ul><li><code>npm run dev</code></li></ul><hr><h2 id="二、【打包非js模块】加载器"><a href="#二、【打包非js模块】加载器" class="headerlink" title="二、【打包非js模块】加载器"></a>二、【打包非js模块】加载器</h2><ul><li>1.css-loader,style-loader<ul><li>处理样式文件</li></ul></li><li>2.less-loader</li><li>3.sass-loader</li><li>4.url-loader,file-loader<ul><li>打包处理css中与url路径有关的文件</li></ul></li><li>5.postcss-loader<ul><li>自动添加css的兼容性前缀</li></ul></li><li>6.babel-loader<ul><li>处理高级js语法的加载器</li></ul></li></ul><p>注意：<br><strong>指定多个loader时的顺序是固定的，而调用loader的顺序是从后向前进行调用</strong></p><hr><h3 id="二（1）、【打包css、style样式模块】"><a href="#二（1）、【打包css、style样式模块】" class="headerlink" title="二（1）、【打包css、style样式模块】"></a>二（1）、【打包css、style样式模块】</h3><h3 id="A-安装包-1"><a href="#A-安装包-1" class="headerlink" title="A.安装包"></a>A.安装包</h3><ul><li><code>npm install html-webpack-plugin -D</code><ul><li>直接打开对应导入的文件index.html</li></ul></li><li><code>npm install style-loader css-loader -D</code></li></ul><h3 id="B-配置规则【module中的rules数组】-1"><a href="#B-配置规则【module中的rules数组】-1" class="headerlink" title="B.配置规则【module中的rules数组】"></a>B.配置规则【module中的rules数组】</h3><ul><li><code>test</code> 设置需要匹配的文件类型，支持正则</li><li><code>use</code>  表示该文件类型需要调用的loader</li><li><strong>注意use的顺序：调用是从后往前</strong></li></ul><p>webpack.config.js【部分】</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-运行打包后的html"><a href="#C-运行打包后的html" class="headerlink" title="C.运行打包后的html"></a>C.运行打包后的html</h3><ul><li><code>npm run dev</code></li></ul><hr><h3 id="二（2）、【打包less样式模块】"><a href="#二（2）、【打包less样式模块】" class="headerlink" title="二（2）、【打包less样式模块】"></a>二（2）、【打包less样式模块】</h3><h3 id="A-安装包-2"><a href="#A-安装包-2" class="headerlink" title="A.安装包"></a>A.安装包</h3><ul><li><code>npm install html-webpack-plugin -D</code><ul><li>直接打开对应导入的文件index.html</li></ul></li><li><code>npm install style-loader css-loader -D</code></li><li><code>npm install less-loader less -D</code></li></ul><h3 id="B-配置规则【module中的rules数组】-2"><a href="#B-配置规则【module中的rules数组】-2" class="headerlink" title="B.配置规则【module中的rules数组】"></a>B.配置规则【module中的rules数组】</h3><ul><li><code>test</code> 设置需要匹配的文件类型，支持正则</li><li><code>use</code>  表示该文件类型需要调用的loader</li><li><strong>注意use的顺序：调用是从后往前</strong></li></ul><p>webpack.config.js【部分】</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-运行打包后的html-1"><a href="#C-运行打包后的html-1" class="headerlink" title="C.运行打包后的html"></a>C.运行打包后的html</h3><ul><li><code>npm run dev</code></li></ul><hr><h3 id="二（3）、【打包scss样式模块】"><a href="#二（3）、【打包scss样式模块】" class="headerlink" title="二（3）、【打包scss样式模块】"></a>二（3）、【打包scss样式模块】</h3><h3 id="A-安装包-3"><a href="#A-安装包-3" class="headerlink" title="A.安装包"></a>A.安装包</h3><ul><li><code>npm install html-webpack-plugin -D</code><ul><li>直接打开对应导入的文件index.html</li></ul></li><li><code>npm install style-loader css-loader -D</code></li><li><code>npm install sass-loader node-sass -D</code></li></ul><h3 id="B-配置规则【module中的rules数组】-3"><a href="#B-配置规则【module中的rules数组】-3" class="headerlink" title="B.配置规则【module中的rules数组】"></a>B.配置规则【module中的rules数组】</h3><ul><li><code>test</code> 设置需要匹配的文件类型，支持正则</li><li><code>use</code>  表示该文件类型需要调用的loader</li><li><strong>注意use的顺序：调用是从后往前</strong></li></ul><p>webpack.config.js【部分】</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    test<span class="token punctuation">:</span><span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'sass-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-运行打包后的html-2"><a href="#C-运行打包后的html-2" class="headerlink" title="C.运行打包后的html"></a>C.运行打包后的html</h3><ul><li><code>npm run dev</code></li></ul><hr><h3 id="二（4）、【打包图片以及字体文件】"><a href="#二（4）、【打包图片以及字体文件】" class="headerlink" title="二（4）、【打包图片以及字体文件】"></a>二（4）、【打包图片以及字体文件】</h3><h3 id="A-安装包-4"><a href="#A-安装包-4" class="headerlink" title="A.安装包"></a>A.安装包</h3><ul><li><code>npm install html-webpack-plugin -D</code><ul><li>直接打开对应导入的文件index.html</li></ul></li><li><code>npm install url-loader file-loader -D</code></li></ul><h3 id="B-配置规则【module中的rules数组】-4"><a href="#B-配置规则【module中的rules数组】-4" class="headerlink" title="B.配置规则【module中的rules数组】"></a>B.配置规则【module中的rules数组】</h3><ul><li><code>test</code> 设置需要匹配的文件类型，支持正则</li><li><code>use</code>  表示该文件类型需要调用的loader</li><li><strong>注意use的顺序：调用是从后往前</strong></li></ul><p>规则1：</p><ul><li>限制输入的原大小</li><li>$\color{red}输出结果可能会少图片，因为被base64处理成字符串的形式$  </li></ul><p>webpack.config.js【部分】</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    test<span class="token punctuation">:</span><span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//limit用来设置字节数，只有小于limit值的图片，才会转换成base64图片</span>    use<span class="token punctuation">:</span><span class="token string">"url-loader?limit=16940"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>规则2：</p><ul><li>限制输出后的大小</li><li>限制输出文件命名（hash随机10位+原文件的后缀名）<ul><li><code>ext</code> 表示原文件的后缀名</li></ul></li></ul><p>webpack.config.js【部分】</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    test<span class="token punctuation">:</span><span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span>    loader<span class="token punctuation">:</span><span class="token string">'url-loader'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span><span class="token punctuation">{</span>        limit<span class="token punctuation">:</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">1024</span>        esModule<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        name：<span class="token string">'[hash:10].[ext]'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-运行打包后的html-3"><a href="#C-运行打包后的html-3" class="headerlink" title="C.运行打包后的html"></a>C.运行打包后的html</h3><ul><li><code>npm run dev</code></li></ul><hr><h3 id="二（5）、【打包其他资源】"><a href="#二（5）、【打包其他资源】" class="headerlink" title="二（5）、【打包其他资源】"></a>二（5）、【打包其他资源】</h3><h3 id="A-安装包-5"><a href="#A-安装包-5" class="headerlink" title="A.安装包"></a>A.安装包</h3><ul><li><code>npm install html-webpack-plugin -D</code><ul><li>直接打开对应导入的文件index.html</li></ul></li><li><code>npm install url-loader file-loader -D</code></li></ul><h3 id="B-配置规则【module中的rules数组】-5"><a href="#B-配置规则【module中的rules数组】-5" class="headerlink" title="B.配置规则【module中的rules数组】"></a>B.配置规则【module中的rules数组】</h3><ul><li><p><code>test</code> 设置需要匹配的文件类型，支持正则</p></li><li><p><code>use</code>  表示该文件类型需要调用的loader</p></li><li><p><strong>注意use的顺序：调用是从后往前</strong></p></li><li><p>打包其他资源（排除了css、js、html、less、图片资源等）<br>前4个的综合  </p></li></ul><p>webpack.config.js【部分】</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    exclude<span class="token punctuation">:</span><span class="token regex">/.(css|js|html|less|jpg|png|svg)/</span><span class="token punctuation">,</span>    loader<span class="token punctuation">:</span><span class="token string">'file-loader'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span><span class="token punctuation">{</span>        name：<span class="token string">'[hash:10].[ext]'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-运行打包后的html-4"><a href="#C-运行打包后的html-4" class="headerlink" title="C.运行打包后的html"></a>C.运行打包后的html</h3><ul><li><code>npm run dev</code></li></ul><hr><p>webpack.config.js【全部】</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">"./src/index.html"</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span><span class="token string">"index.html"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span> resolve <span class="token punctuation">}</span><span class="token operator">=</span>require<span class="token punctuation">{</span><span class="token string">'path'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span><span class="token string">'.src/index.js'</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        filename<span class="token punctuation">:</span><span class="token string">'build.js'</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>，    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'sass-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token string">"url-loader?limit=16940"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span>                loader<span class="token punctuation">:</span><span class="token string">'url-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span><span class="token punctuation">{</span>                    limit<span class="token punctuation">:</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">1024</span>                    esModule<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                    name：<span class="token string">'[hash:10].[ext]'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                exclude<span class="token punctuation">:</span><span class="token regex">/.(css|js|html|less|jpg|png|svg)/</span><span class="token punctuation">,</span>                loader<span class="token punctuation">:</span><span class="token string">'file-loader'</span><span class="token punctuation">,</span>                options<span class="token punctuation">:</span><span class="token punctuation">{</span>                    name：<span class="token string">'[hash:10].[ext]'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">,</span>    mode：<span class="token string">'development'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前五个所有文件</p><p>src/css/1.css(含图片)</p><pre class="line-numbers language-js"><code class="language-js">li <span class="token punctuation">{</span>  list<span class="token operator">-</span>style<span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token punctuation">:</span>placeholder <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span>#box <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 580px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 340px<span class="token punctuation">;</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'../images/1.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/css/1.less</p><pre class="line-numbers language-less"><code class="language-less"><span class="token selector">body</span> <span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token selector">ul</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/css/1.scss</p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token selector">ul </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>  <span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/index.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token keyword">import</span> <span class="token string">'./css/1.css'</span><span class="token keyword">import</span> <span class="token string">'./css/1.less'</span><span class="token keyword">import</span> <span class="token string">'./css/1.scss'</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li:odd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'backgroundColor'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li:even'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'backgroundColor'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src/index.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入的资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第1个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第2个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第3个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>这是第4个li<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="二（6）、【打包css、style样式模块-自动添加css的兼容性前缀】"><a href="#二（6）、【打包css、style样式模块-自动添加css的兼容性前缀】" class="headerlink" title="二（6）、【打包css、style样式模块,自动添加css的兼容性前缀】"></a>二（6）、【打包css、style样式模块,自动添加css的兼容性前缀】</h3><h3 id="A-安装包-6"><a href="#A-安装包-6" class="headerlink" title="A.安装包"></a>A.安装包</h3><ul><li><code>npm install style-loader css-loader -D</code></li><li><code>npm install postcss-loader autoprefixer -D</code></li></ul><h3 id="B-配置规则【module中的rules数组】-6"><a href="#B-配置规则【module中的rules数组】-6" class="headerlink" title="B.配置规则【module中的rules数组】"></a>B.配置规则【module中的rules数组】</h3><ul><li><code>test</code> 设置需要匹配的文件类型，支持正则</li><li><code>use</code>  表示该文件类型需要调用的loader</li><li><strong>注意use的顺序：调用是从后往前</strong></li></ul><p>webpack.config.js:  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">"./src/index.html"</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span><span class="token string">"index.html"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span> resolve <span class="token punctuation">}</span><span class="token operator">=</span>require<span class="token punctuation">{</span><span class="token string">'path'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span><span class="token string">'.src/index.js'</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        filename<span class="token punctuation">:</span><span class="token string">'build.js'</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>，    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span><span class="token punctuation">,</span>    mode：<span class="token string">'development'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-根目录创建并配置postcss-config-js文件"><a href="#C-根目录创建并配置postcss-config-js文件" class="headerlink" title="C.根目录创建并配置postcss.config.js文件"></a>C.根目录创建并配置postcss.config.js文件</h3><p>postcss.config.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> autoprefixer <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="D-运行打包后的html-1"><a href="#D-运行打包后的html-1" class="headerlink" title="D.运行打包后的html"></a>D.运行打包后的html</h3><ul><li><code>npm run dev</code></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/104749506&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webpack–打包基础&lt;/a&gt;&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://lewis.qi.tk/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://lewis.qi.tk/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>cookie和session</title>
    <link href="http://lewis.qi.tk/2020/05/16/cookie%E5%92%8Csession/"/>
    <id>http://lewis.qi.tk/2020/05/16/cookie%E5%92%8Csession/</id>
    <published>2020-05-16T11:35:48.000Z</published>
    <updated>2020-05-16T11:53:16.380Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105281449" target="_blank" rel="noopener">cookie和session</a></p><h2 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h2><ul><li><p><code>cookie</code>是存储在客户端中，供$\color{red}服务器端$存储数据</p><ul><li>cookie中的数据以<strong>域名</strong>形式存储数据</li><li>cookie中的数据<strong>有过期时间</strong>,不设置的话，会在关闭浏览器时删除，在下次打开浏览器时服务器端会继续发送</li><li>cookie中的数据会随请求<strong>自动发送到服务器端</strong></li></ul></li><li><p>在网站中 <code>F12</code> 找到 </p><ul><li>方式一：<code>Application</code> 在 <code>Storge</code> 下的 <code>Cookies</code></li><li>方式二：<code>Network</code> 在当前主网站名中点击，找到 <code>Request Headers</code> 下的 <code>Cookie</code>(字符串形式)</li></ul></li><li><p><code>session</code>是对象，存储在服务器端的内存中</p><ul><li>session对象中可以存储多条数据</li><li>每一条数据都有一个 <code>sessionId</code> 做唯一标识</li></ul></li></ul><p>过程【重点】</p><ul><li>第一次访问  </li></ul><p>1.客户端将请求数据（用户名、密码）传递给服务器端<br>2.服务器端接收到请求参数，并<strong>验证请求参数</strong>成功后<br>3.服务器端使用 session，为该用户生成唯一的 sessionId ，在session对象中存储用户信息<br>4.服务器端将sessionId写入客户端的cookie，发送给客户端  </p><ul><li>以后访问  </li></ul><p>5.客户端下次访问浏览器时，cookie会自动发送给服务器端<br>6.服务器端拿到cookie中存储的sessionId，然后在服务器端存储的session对象中验证当前的sessionId<br>7.验证成功后，服务器端响应数据</p><h2 id="node-的-express-session模块"><a href="#node-的-express-session模块" class="headerlink" title="node 的 express-session模块"></a>node 的 express-session模块</h2><ul><li>在 <code>app.js</code> 中导入express-session模块,并配置session</li><li>用中间件 <code>app.use（）</code> 处理先拦截请求，再交给session处理<ul><li>session() 生成session对象</li><li><strong>secret参数</strong>：存储秘钥，对数据加密</li></ul></li></ul><p>app.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入express-session模块</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置session</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  secret<span class="token punctuation">:</span> <span class="token string">'secret key'</span><span class="token punctuation">,</span>  saveUninitialized<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  cookie<span class="token punctuation">:</span> <span class="token punctuation">{</span>    maxAge<span class="token punctuation">:</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105281449&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cookie和session&lt;/a&gt;&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="cookies、session" scheme="http://lewis.qi.tk/categories/cookies%E3%80%81session/"/>
    
    
      <category term="cookies" scheme="http://lewis.qi.tk/tags/cookies/"/>
    
      <category term="session" scheme="http://lewis.qi.tk/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>sequelize、moudle简单使用</title>
    <link href="http://lewis.qi.tk/2020/05/16/sequelize%E3%80%81moudle%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://lewis.qi.tk/2020/05/16/sequelize%E3%80%81moudle%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-16T11:34:59.000Z</published>
    <updated>2020-05-16T11:48:50.877Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/104836214" target="_blank" rel="noopener">sequelize、moudle简单使用</a></p><h1 id="MySQL-Node-js驱动程序"><a href="#MySQL-Node-js驱动程序" class="headerlink" title="MySQL Node.js驱动程序"></a>MySQL Node.js驱动程序</h1><h2 id="1-Node-js程序访问MySQL数据库"><a href="#1-Node-js程序访问MySQL数据库" class="headerlink" title="1.Node.js程序访问MySQL数据库"></a>1.Node.js程序访问MySQL数据库</h2><p>添加依赖包：<br>1.<strong>npm i mysql2</strong><br>2.<strong>npm i sequelize</strong>  </p><p>ORM、ODM区别：</p><pre><code>ODM对象数据模型、ORM对象关系模型ODM / ORM 能将网站中的数据表示为 JavaScript 对象，然后将它们映射到底层数据库1.ODM 通常慢一些，因为在对象和数据库格式之间存在一层用于映射的翻译代码2.ORM 可以继续用 JavaScript 对象的思维而不用转向数据库语义的思维。 在（同一个或不同网站）使用不同数据库时尤为明显Sequelize是一款基于Nodejs功能强大的异步ORM框架</code></pre><pre><code>mysql&gt; select * from pets;+----+--------+------------+| id | name   | birth      |+----+--------+------------+|  1 | Gaffey | 2007-07-07 ||  2 | Odie   | 2008-08-08 |+----+--------+------------+2 rows in set (0.00 sec)每一行可以用一个JavaScript对象第一行：JSON表示{    &quot;id&quot;: 1,    &quot;name&quot;: &quot;Gaffey&quot;,    &quot;birth&quot;: &quot;2007-07-07&quot;}用Sequelize查询pets表：(复杂)Pet.findAll()   .then(function (pets) {       for (let pet in pets) {           console.log(`${pet.id}: ${pet.name}`);       }   })   .catch(function (err) {       // error   });注：then()和catch()分别异步响应成功和失败</code></pre><p>在koa的async异步函数中直接写await访问数据库<br>ES7的await来调用任何一个Promise对象：（简单）</p><pre><code>(async () =&gt; {    var pets = await Pet.findAll();})();</code></pre><p>实例：</p><pre><code>hnode-MySQL/|+- .vscode/|  ||  +- launch.json       &lt;-- VSCode 配置文件|+- package.json         &lt;-- 项目描述文件|+- node_modules/        &lt;-- npm安装的所有依赖包|+- init.txt             &lt;-- 初始化SQL命令|+- config.js            &lt;-- MySQL配置文件|+- app.js               &lt;-- 使用koa的js</code></pre><p>config.js </p><pre><code>//数据库连接配置文件var config = {    database: &#39;node_test&#39;,    username: &#39;root&#39;,    password: &#39;123456&#39;,    host: &#39;localhost&#39;,    port: 3307};//暴露接口module.exports = config;</code></pre><p>app.js</p><pre><code>const Sequelize = require(&#39;sequelize&#39;);//config.js的自定义依赖包const config = require(&#39;./config&#39;);console.log(&#39;init sequelize...&#39;);//创建一个sequelize对象实例：//单个进程连接到数据库，则应仅创建一个Sequelize实例var sequelize = new Sequelize(config.database, config.username, config.password, {    host: config.host,    //连接数据库语言    dialect: &#39;mysql&#39;,    pool: {        //连接池中的最大、小连接数        max: 5,        min: 0,        //连接释放之前可以空闲的最长时间（以毫秒为单位）        idle: 30000    }});//测试连接是否正常sequelize  .authenticate()  .then(() =&gt; {    console.log(&#39;Connection has been established successfully.&#39;);  })  .catch(err =&gt; {    console.error(&#39;Unable to connect to the database:&#39;, err);  });//Model模型Pet，告诉Sequelize如何映射数据库表//第一个参数传入默认的表名pets//第二个参数指定(列名:数据类型)，如果是主键，指定true//第三个参数是额外的配置，传入{ timestamps: false }//是为了关闭Sequelize的自动添加timestamp的功能。//sequelize 连接表的时候，会默认给你传进去的表名加上s, //所以需要手动配置参数 freezeTableName: truevar Pet = sequelize.define(&#39;pets&#39;,     {    id: {type: Sequelize.STRING(50),primaryKey: true},    name: Sequelize.STRING(100),    gender: Sequelize.BOOLEAN,    birth: Sequelize.STRING(10),    createdAt: Sequelize.BIGINT,    updatedAt: Sequelize.BIGINT,    version: Sequelize.BIGINT    },     {        timestamps: false    });//日期对象var now = Date.now();//往数据库添加数据（Promise方式）//then()和catch()分别异步响应成功和失败Pet.create({    id: &#39;g-&#39; + now,    name: &#39;cat&#39;,    gender: false,    birth: &#39;2020-01-01&#39;,    createdAt: now,    updatedAt: now,    version: 0}).then(function (p) {    console.log(&#39;created.&#39; + JSON.stringify(p));}).catch(function (err) {    console.log(&#39;failed: &#39; + err);});//往数据库添加数据(await方式)(async () =&gt; {    var dog = await Pet.create({        id: &#39;d-&#39; + now,        name: &#39;dog&#39;,        gender: false,        birth: &#39;2020-01-02&#39;,        createdAt: now,        updatedAt: now,        version: 0    });    console.log(&#39;created: &#39; + JSON.stringify(dog));})();//查询数据(async () =&gt; {    var pets = await Pet.findAll({        where: {            name: &#39;dog&#39;        }    });    console.log(`find ${pets.length} pets:`);    for (let p of pets) {        console.log(JSON.stringify(p));        console.log(&#39;update pet...&#39;);        //更新数据        p.gender = true;        p.updatedAt = Date.now();        p.version ++;        await p.save();        //删除数据        if (p.version === 3) {            await p.destroy();            console.log(`${p.name} was destroyed.`);        }    }})();// 单独更新数据，await p.save();保存// (async () =&gt; {//     var p = await queryFromSomewhere();//     p.gender = true;//     p.updatedAt = Date.now();//     p.version ++;//     await p.save();// })();// 单独删除数据，await p.destroy();销毁// (async () =&gt; {//     var p = await queryFromSomewhere();//     await p.destroy();// })();</code></pre><h2 id="2-使用module"><a href="#2-使用module" class="headerlink" title="2.使用module"></a>2.使用module</h2><p>一个大型Web App通常都有几十个映射表，一个映射表就是一个Model。<br>Model存放的文件夹必须在models</p><p>每个Model必须遵守一套规范</p><p>1.统一主键，名称必须是id，类型必须是STRING(50)；<br>2.所有字段默认为NOT NULL，除非显式指定；<br>3.统一timestamp机制，每个Model必须有<strong>createdAt、updatedAt和version</strong>，分别记录<strong>创建时间、修改时间和版本号</strong>。  </p><ul><li>createdAt和updatedAt以BIGINT存储时间戳，<strong>无需处理时区</strong>。</li><li>version每次修改时自增。</li></ul><p>目录：</p><pre><code>model-sequelize/|+- .vscode/|  ||  +- launch.json       &lt;-- VSCode 配置文件|+- package.json         &lt;-- 项目描述文件|+- node_modules/        &lt;-- npm安装的所有依赖包|+- models/              &lt;-- 存放所有Model|  ||  +- Pet.js            &lt;-- Pet|  ||  +- User.js           &lt;-- User|+- config.js            &lt;-- 配置文件入口|+- config-default.js    &lt;-- 默认配置文件|+- config-test.js       &lt;-- 测试配置文件|+- db.js                &lt;-- 定义Model|+- model.js             &lt;-- 导入Model|+- init-db.js           &lt;-- 初始化数据库|+- app.js               &lt;-- 业务代码</code></pre><p>注：<br>1.<strong>npm i fs</strong><br>2.<strong>npm i sequelize</strong><br>3.<strong>npm i node-uuid</strong>(db.js中定义model使用)<br>4.<strong>npm i mysql2</strong></p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>实现不同环境读取不同的配置文件</p><ul><li>先读取config-default.js；</li><li>如果不是测试环境，就读取config-override.js，如果文件不存在，就忽略。</li><li>如果是测试环境，就读取config-test.js</li></ul><p>1.开发环境下，团队统一使用默认的配置config-default.js；<br>2.生产环境下，部署到服务器时，配置好config-override.js；<br>3.测试环境下，统一使用config-test.js，测试数据库可以反复清空，不会影响开发。  </p><p>config-default.js(第一步，$\color{red}连接数据库$)<br>1.开发环境下默认的配置</p><pre><code>var config = {    dialect: &#39;mysql&#39;,    database: &#39;default&#39;,    username: &#39;Lewis&#39;,    password: &#39;123456&#39;,    host: &#39;localhost&#39;,    port: 3307};module.exports = config;</code></pre><p>config-override.js（第二步，$\color{red}连接数据库$）<br>2.生产环境下，部署到服务器配置</p><pre><code>var config = {    database: &#39;override&#39;,    username: &#39;Lewis&#39;,    password: &#39;123456&#39;,    host: &#39;192.168.1.199&#39;,    port: 3307};module.exports = config;</code></pre><p>config-test.js（第三步，$\color{red}连接数据库$）<br>3.应用测试环境的配置：</p><pre><code>var config = {    dialect: &#39;mysql&#39;,    database: &#39;nodetest&#39;,    username: &#39;Lewis&#39;,    password: &#39;123456&#39;,    host: &#39;localhost&#39;,    port: 3307};module.exports = config;</code></pre><p>config.js（判断环境）<br>实现不同环境读取不同的配置文件</p><pre><code>// 配置文件导入集合const defaultConfig = &#39;./config-default.js&#39;;const overrideConfig = &#39;./config-override.js&#39;;const testConfig = &#39;./config-test.js&#39;;const fs = require(&#39;fs&#39;);var config = null;if (process.env.NODE_ENV === &#39;test&#39;) {    console.log(`Load ${testConfig}...`);    config = require(testConfig);} else {    console.log(`Load ${defaultConfig}...`);    config = require(defaultConfig);    try {        if (fs.statSync(overrideConfig).isFile()) {            console.log(`Load ${overrideConfig}...`);            config = Object.assign(config, require(overrideConfig));        }    } catch (err) {        console.log(`Cannot load ${overrideConfig}.`);    }}module.exports = config;</code></pre><h3 id="第二步（定义Model、写Model、判断环境使用Model）"><a href="#第二步（定义Model、写Model、判断环境使用Model）" class="headerlink" title="第二步（定义Model、写Model、判断环境使用Model）"></a>第二步（定义Model、写Model、判断环境使用Model）</h3><p>db.js(定义Model，数据库连接池)</p><pre><code>const Sequelize = require(&#39;sequelize&#39;);const uuid = require(&#39;node-uuid&#39;);const config = require(&#39;./config&#39;);console.log(&#39;init sequelize...&#39;);function generateId() {    return uuid.v4();}var sequelize = new Sequelize(config.database, config.username, config.password, {    host: config.host,    dialect: config.dialect,    pool: {        max: 5,        min: 0,        idle: 10000    }});const ID_TYPE = Sequelize.STRING(50);//defineModel强制实现上述规则function defineModel(name, attributes) {    var attrs = {};    for (let key in attributes) {        let value = attributes[key];        if (typeof value === &#39;object&#39; &amp;&amp; value[&#39;type&#39;]) {            value.allowNull = value.allowNull || false;            attrs[key] = value;        } else {            attrs[key] = {                type: value,                allowNull: false            };        }    }    attrs.id = {        type: ID_TYPE,        primaryKey: true    };    attrs.createdAt = {        type: Sequelize.BIGINT,        allowNull: false    };    attrs.updatedAt = {        type: Sequelize.BIGINT,        allowNull: false    };    attrs.version = {        type: Sequelize.BIGINT,        allowNull: false    };    console.log(&#39;model defined for table: &#39; + name + &#39;\n&#39; + JSON.stringify(attrs, function (k, v) {        if (k === &#39;type&#39;) {            for (let key in Sequelize) {                if (key === &#39;ABSTRACT&#39; || key === &#39;NUMBER&#39;) {                    continue;                }                let dbType = Sequelize[key];                if (typeof dbType === &#39;function&#39;) {                    if (v instanceof dbType) {                        if (v._length) {                            return `${dbType.key}(${v._length})`;                        }                        return dbType.key;                    }                    if (v === dbType) {                        return dbType.key;                    }                }            }        }        return v;    }, &#39;  &#39;));    return sequelize.define(name, attrs, {        tableName: name,        timestamps: false,        hooks: {            beforeValidate: function (obj) {                let now = Date.now();                if (obj.isNewRecord) {                    console.log(&#39;will create entity...&#39; + obj);                    if (!obj.id) {                        obj.id = generateId();                    }                    obj.createdAt = now;                    obj.updatedAt = now;                    obj.version = 0;                } else {                    console.log(&#39;will update entity...&#39;);                    obj.updatedAt = now;                    obj.version++;                }            }        }    });}const TYPES = [&#39;STRING&#39;, &#39;INTEGER&#39;, &#39;BIGINT&#39;, &#39;TEXT&#39;, &#39;DOUBLE&#39;, &#39;DATEONLY&#39;, &#39;BOOLEAN&#39;];var exp = {    defineModel: defineModel,    sync: () =&gt; {        // only allow create ddl in non-production environment:        if (process.env.NODE_ENV !== &#39;production&#39;) {            sequelize.sync({ force: true });        } else {            throw new Error(&#39;Cannot sync() when NODE_ENV is set to \&#39;production\&#39;.&#39;);        }    }};for (let type of TYPES) {    exp[type] = Sequelize[type];}exp.ID = ID_TYPE;exp.generateId = generateId;module.exports = exp;</code></pre><p>models/Pet.js（Model文件1,创建数据表结构，$\color{red}表名必须多一个s$）</p><pre><code>//导入上一层文件夹中的db.js的定义Model文件const db = require(&#39;../db&#39;);module.exports = db.defineModel(&#39;pets&#39;, {    ownerId: db.ID,    name: db.STRING(100),    gender: db.BOOLEAN,    birth: db.STRING(10),});</code></pre><p>models/User.js（Model文件2，创建数据表结构,$\color{red}表名必须多一个s$）</p><pre><code>//导入上一层文件夹中的db.js的定义Model文件const db = require(&#39;../db&#39;);//User具有email、passwd、name和gender这4个业务字段module.exports = db.defineModel(&#39;users&#39;, {    email: {        type: db.STRING(100),        unique: true    },    passwd: db.STRING(100),    name: db.STRING(100),    gender: db.BOOLEAN});</code></pre><p>model.js（合并，自动扫描并导入所有Model）</p><pre><code>const fs = require(&#39;fs&#39;);//导入当前文件夹中的db.jsconst db = require(&#39;./db&#39;);let files = fs.readdirSync(__dirname + &#39;/models&#39;);let js_files = files.filter((f)=&gt;{    return f.endsWith(&#39;.js&#39;);}, files);module.exports = {};for (let f of js_files) {    console.log(`import model from file ${f}...`);    let name = f.substring(0, f.length - 3);    module.exports[name] = require(__dirname + &#39;/models/&#39; + f);}module.exports.sync = () =&gt; {    db.sync();};</code></pre><p>init-db.js（测试时，用model.sync();方法自动创建出表结构）</p><pre><code>require(&#39;babel-core/register&#39;)({    presets: [&#39;stage-3&#39;]});//导入当前文件夹中的model.js导入所有Modeldeconst model = require(&#39;./model.js&#39;);model.sync();console.log(&#39;init db ok.&#39;);//process.exit(0);</code></pre><h3 id="最后一步：数据库数据表更改插入数据"><a href="#最后一步：数据库数据表更改插入数据" class="headerlink" title="最后一步：数据库数据表更改插入数据"></a>最后一步：数据库数据表更改插入数据</h3><p>app.js</p><pre><code>const model = require(&#39;./model&#39;);let    Pet = model.Pet,    User = model.User;(async () =&gt; {    var user = await User.create({        name: &#39;John&#39;,        gender: false,        email: &#39;john-&#39; + Date.now() + &#39;@garfield.pet&#39;,        passwd: &#39;hahaha&#39;    });    console.log(&#39;created: &#39; + JSON.stringify(user));    var cat = await Pet.create({        ownerId: user.id,        name: &#39;Garfield&#39;,        gender: false,        birth: &#39;2007-07-07&#39;,    });    console.log(&#39;created: &#39; + JSON.stringify(cat));    var dog = await Pet.create({        ownerId: user.id,        name: &#39;Odie&#39;,        gender: false,        birth: &#39;2008-08-08&#39;,    });    console.log(&#39;created: &#39; + JSON.stringify(dog));})();</code></pre><p>注：<br>学习廖大文章，小改<br>我第一步就没有实现，mysql连不上node，心态崩了~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/104836214&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sequelize、moudle简单使用&lt;/a&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="nodejs" scheme="http://lewis.qi.tk/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://lewis.qi.tk/tags/nodejs/"/>
    
      <category term="mysql" scheme="http://lewis.qi.tk/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql远程访问以及Access denied for user root@localhost (using password: YES)错误</title>
    <link href="http://lewis.qi.tk/2020/05/16/mysql%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E4%BB%A5%E5%8F%8AAccess-denied-for-user-root-localhost-using-password-YES-%E9%94%99%E8%AF%AF/"/>
    <id>http://lewis.qi.tk/2020/05/16/mysql%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E4%BB%A5%E5%8F%8AAccess-denied-for-user-root-localhost-using-password-YES-%E9%94%99%E8%AF%AF/</id>
    <published>2020-05-16T11:34:41.000Z</published>
    <updated>2020-05-16T11:43:23.605Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/104836144" target="_blank" rel="noopener">mysql远程访问以及Access denied for user root@localhost (using password: YES)错误</a></p><p>mysql8.0.18版本</p><h2 id="配置远程访问1"><a href="#配置远程访问1" class="headerlink" title="配置远程访问1"></a>配置远程访问1</h2><p>1.<strong>E:\WAMP\bin\mysql\mysql8.0.18\my.ini</strong></p><pre><code>找到[mysqld]default_authentication_plugin=mysql_native_passwordport = 3307方法一：(如果有这行，就添加#注释，或者改成skip-name-resolve)#bind-address = 127.0.0.1方法二：（添加bind-address = 0.0.0.0）bind-address = 0.0.0.0skip-grant-tables</code></pre><p>bind-address 服务监听在127.0.0.1和0.0.0.0上的区别:<br>0.0.0.0在服务器的环境中，指的就是服务器上所有的ipv4地址</p><ul><li>3307端口监听在127.0.0.1，只有本机客户端可以访问，其他服务器无法访问</li><li>3307端口监听在0.0.0.0上，如果没有端口限制，那么其他服务器则可以连接该服务器的该端口</li></ul><p>2.<strong>E:\WAMP\apps\phpmyadmin4.9.2\config.inc.php</strong></p><pre><code>if($wampConf[&#39;SupportMySQL&#39;] == &#39;on&#39;) {/* Server: localhost [1] */$i++;if($mariaFirst) $i++;$cfg[&#39;Servers&#39;][$i][&#39;verbose&#39;] = &#39;MySQL&#39;;$cfg[&#39;Servers&#39;][$i][&#39;host&#39;] = &#39;127.0.0.1&#39;;$cfg[&#39;Servers&#39;][$i][&#39;port&#39;] = $wampConf[&#39;mysqlPortUsed&#39;];$cfg[&#39;Servers&#39;][$i][&#39;extension&#39;] = &#39;mysqli&#39;;$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;] = &#39;cookie&#39;;$cfg[&#39;Servers&#39;][$i][&#39;user&#39;] = &#39;&#39;;$cfg[&#39;Servers&#39;][$i][&#39;password&#39;] = &#39;&#39;;把$cfg[&#39;Servers&#39;][$i][&#39;host&#39;] = &#39;127.0.0.1&#39;;将127.0.0.1更改为0.0.0.0</code></pre><p>3.配置防火墙以允许通过默认的Apache和MySQL端口进行连接</p><pre><code>1.控制面板-&gt; Windows防火墙 - &gt;高级设置2.在左侧窗格中，选择“入站规则”，选择“新建规则,选择“端口”并“下一步”3.选择“TCP”并在“特定本地端口”旁边的文本框中输入Apache和MySQL的端口（80,3307）并点击下一步4.选择“允许连接”并点击“下一步”5.检查你何时应用规则? ( 勾选 : 域 , 专用 , 公用 )6.为此规则指定一个名称，然后单击“完成”</code></pre><p>4.重新启动所有服务，现在可以远程连接数据库进行测试<br>service mysql restart</p><h2 id="配置远程访问2"><a href="#配置远程访问2" class="headerlink" title="配置远程访问2"></a>配置远程访问2</h2><pre><code>先开启wamp（mysql服务开启）再打开Navicat进行操作//1.创建node_test库create database node_test;//2.新建用户Lewiscreate user &#39;Lewis&#39;@&#39;%&#39; identified by  &#39;123456&#39;//3.远程访问mysql(@&quot;%&quot;),只能访问数据库node-test的所有表//with grant option这个选项表示该用户可以将自己拥有的权限授权给别人grant all privileges on node_test.* to &#39;Lewis&#39;@&#39;%&#39; with grant option//再授权权限//4.刷新权限flush privileges;//5.把当前数据库切换为node-testuse node_test;//6.建表create table pets (    id varchar(50) not null,    name varchar(100) not null,    gender bool not null,    birth varchar(10) not null,    createdAt bigint not null,    updatedAt bigint not null,    version bigint not null,    primary key (id)) engine=innodb;</code></pre><h2 id="1、创建新用户"><a href="#1、创建新用户" class="headerlink" title="1、创建新用户"></a>1、创建新用户</h2><p>通过root用户登录之后创建<br>create user ‘Lewis’@’%’ identified by ‘123456’</p><pre><code>//设置用户testuser，本地访问mysql(@localhost)&gt;&gt; grant all privileges on *.* to testuser@localhost;//设置用户testuser，远程访问mysql(@&quot;%&quot;)&gt;&gt; grant all privileges on *.* to testuser@&quot;%&quot;;//设置用户testuser，只能在客户端IP为192.168.1.100上才能远程访问mysql (@“192.168.1.100”)&gt;&gt; grant all privileges on *.* to testuser@“192.168.1.100”;//禁止testuser用户在远程机器上访问mysql&gt;&gt; delete from user where user=&quot;testuser&quot; and host=&quot;%&quot;;//设置用户root，远程访问mysql(@&quot;%&quot;)&gt;&gt; grant all privileges on *.* to root@&quot;%&quot; ;//禁止root用户在远程机器上访问mysql&gt;&gt; delete from user where user=&quot;root&quot; and host=&quot;%&quot;;//查询mysql中所有用户权限&gt;&gt; select host,user from user;//刷新MySQL的系统权限相关表，否则会出现拒绝访问，&gt;&gt; flush privileges;　　</code></pre><p>　　</p><h2 id="2、设置用户访问数据库权限"><a href="#2、设置用户访问数据库权限" class="headerlink" title="2、设置用户访问数据库权限"></a>2、设置用户访问数据库权限</h2><pre><code>//设置用户testuser，只能访问数据库test_db&gt;&gt; grant all privileges on test_db.* to testuser@localhost;　　//设置用户testuser，可以访问mysql上的所有数据库&gt;&gt; grant all privileges on *.* to testuser@localhost;　　//设置用户testuser，只能访问数据库test_db的表user_infor&gt;&gt; grant all privileges on test_db.user_infor to testuser@localhost;　　</code></pre><h2 id="3、设置用户操作权限"><a href="#3、设置用户操作权限" class="headerlink" title="3、设置用户操作权限"></a>3、设置用户操作权限</h2><pre><code>//设置用户testuser，拥有所有的操作权限,授权给其他人&gt;&gt; grant all privileges on *.* to testuser@localhost  WITH GRANT OPTION;　　//设置用户testuser，只拥有【查询\插入】操作权限&gt;&gt; grant select,insert on *.* to testuser@localhost;　　//取消用户testuser的【查询\插入】操作权限 ；&gt;&gt; REVOKE select,insert ON what FROM testuser;</code></pre><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>当然了，我搞鼓了一天愣是出现以下错误：  （输入密码，但拒绝访问）<br>Access denied for user ‘root’@’localhost’ (using password: YES)<br>我心态崩了，Navicat可以连上，可以进行增删查改，就是node连不上······<br><img src="https://img-blog.csdnimg.cn/2020031310524249.gif" alt="在这里插入图片描述"><br>哪位大神指导下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/104836144&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mysql远程访问以及Access denied fo
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://lewis.qi.tk/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://lewis.qi.tk/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MVC（node-koa应用）</title>
    <link href="http://lewis.qi.tk/2020/05/16/MVC%EF%BC%88node-koa%E5%BA%94%E7%94%A8%EF%BC%89/"/>
    <id>http://lewis.qi.tk/2020/05/16/MVC%EF%BC%88node-koa%E5%BA%94%E7%94%A8%EF%BC%89/</id>
    <published>2020-05-16T11:34:09.000Z</published>
    <updated>2020-05-16T11:41:41.554Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/104835542" target="_blank" rel="noopener">MVC（node-koa应用）</a></p><h1 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h1><pre><code>MVC/|+- .vscode/|  ||  +- launch.json       &lt;-- VSCode 配置文件|+- package.json         &lt;-- 项目描述文件|+- node_modules/        &lt;-- npm安装的所有依赖包|+- controllers/         &lt;-- Controller控制器,处理异步请求函数（async函数，直接moudle.esports暴露）   |   +- index.js          &lt;--定义一个async函数处理首页URL   |   +- login.js          &lt;--定义一个async函数处理登录请求|+- views/               &lt;-- html模板文件和html文件   |   +- base.html         &lt;- （第一层模板文件）   |   +- index.html        &lt;- 首页   |   +- login-success.html&lt;- 登录成功   |   +- login-failed.html &lt;- 登录失败|+- static/              &lt;-- 静态资源文件   |   +- css/              &lt;- 存放bootstrap.css等   |   +- fonts/            &lt;- 存放字体文件   |   +- js/               &lt;- 存放bootstrap.js等|+- controller.js        &lt;-- 扫描注册Controller控制器|+- static-file.js        &lt;-- 编写处理静态文件的middleware的js文件|+- app.js               &lt;-- 使用koa的js（主js）</code></pre><h2 id="controllers"><a href="#controllers" class="headerlink" title="controllers"></a>controllers</h2><p>index.js</p><pre><code>//定义一个async函数处理首页URL///最后一步调用ctx.render(view, model)就完成了页面输出。module.exports = {    &#39;GET /&#39;: async (ctx, next) =&gt; {        ctx.render(&#39;index.html&#39;, {            title: &#39;Welcome（登录界面）&#39;        });    }};</code></pre><p>login.js</p><pre><code>//再定义一个async函数处理登录请求/login//直接moudle.esports暴露//最后一步调用ctx.render(view, model)就完成了页面输出。//登录成功时我们用login-success.html渲染，//登录失败时我们用login-failed.html渲染module.exports = {    &#39;POST /signin&#39;: async (ctx, next) =&gt; {        var            email = ctx.request.body.email || &#39;&#39;,            password = ctx.request.body.password || &#39;&#39;;        if (email === &#39;Lewis@qq.com&#39; &amp;&amp; password === &#39;123456&#39;) {            console.log(&#39;login success!&#39;);            //寻找views目录下的html文件            ctx.render(&#39;login-success.html&#39;, {                title: &#39;Sign In OK&#39;,                name: &#39;Mr Lewis&#39;            });        } else {            console.log(&#39;login failed!&#39;);            //寻找views目录下的html文件            ctx.render(&#39;login-failed.html&#39;, {                title: &#39;Sign In Failed!&#39;            });        }    }};</code></pre><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>静态文件</p><h2 id="views"><a href="#views" class="headerlink" title="views"></a>views</h2><p>base.html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;    &lt;meta name=&quot;description&quot; content=&quot;learn javascript&quot;&gt;    &lt;title&gt;{{ title }}&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/bootstrap.css&quot;&gt;    &lt;script src=&quot;/static/js/bootstrap.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;header class=&quot;navbar navbar-static-top&quot;&gt;        &lt;div class=&quot;container&quot;&gt;            &lt;div class=&quot;navbar-header&quot;&gt;                &lt;a href=&quot;/&quot; class=&quot;navbar-brand&quot;&gt;Learn JavaScript&lt;/a&gt;            &lt;/div&gt;            &lt;nav class=&quot;collapse navbar-collapse&quot; id=&quot;bs-navbar&quot;&gt;                &lt;ul class=&quot;nav navbar-nav&quot;&gt;                    &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.baidu.com/&quot;&gt;Get one&lt;/a&gt;&lt;/li&gt;                    &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.baidu.com/&quot;&gt;Get two&lt;/a&gt;&lt;/li&gt;                    &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.baidu.com/&quot;&gt;Get three&lt;/a&gt;&lt;/li&gt;                &lt;/ul&gt;            &lt;/nav&gt;        &lt;/div&gt;    &lt;/header&gt;    &lt;div id=&quot;important&quot; style=&quot;color:#cdbfe3; background-color:#6f5499; padding:30px 0; margin:-20px 0 20px 0;&quot;&gt;        &lt;div class=&quot;container&quot;&gt;            &lt;h1 style=&quot;color:#fff; font-size:60px&quot;&gt;Getting started&lt;/h1&gt;            &lt;p style=&quot;font-size:24px; line-height:48px&quot;&gt;Learn JavaScript&lt;/p&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!-- 这两行为后续提供模板，插入使用 --&gt;    {% block main %}     {% endblock %}    &lt;footer style=&quot;background-color:#ddd; padding: 20px 0;&quot;&gt;        &lt;div class=&quot;container&quot;&gt;            &lt;p&gt;                &lt;a target=&quot;_blank&quot; href=&quot;https://www.baidu.com/&quot;&gt;A&lt;/a&gt; -                 &lt;a target=&quot;_blank&quot; href=&quot;https://www.baidu.com/&quot;&gt;B&lt;/a&gt; -                 &lt;a target=&quot;_blank&quot; href=&quot;https://www.baidu.com/&quot;&gt;C&lt;/a&gt;            &lt;/p&gt;            &lt;p&gt;created by &lt;a target=&quot;_blank&quot; href=&quot;#&quot;&gt;Lewis&lt;/a&gt;.&lt;/p&gt;        &lt;/div&gt;    &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>index.html</p><pre><code>{% extends "base.html" %}{% block main %}<div class="container">    <div class="row">        <div class="col-md-6">            <div class="panel panel-default">                <div class="panel-heading">                    <h3 class="panel-title"><span class="glyphicon glyphicon-user"></span> Please sign in</h3>                </div>                <div class="panel-body">                    <form action="/signin" method="post">                        <div class="form-group">                            <label>Email address</label>                            <input type="email" name="email" class="form-control" placeholder="Email">                            <p class="help-block">Use email: admin@example.com</p>                        </div>                        <div class="form-group">                            <label>Password</label>                            <input type="password" name="password" class="form-control" placeholder="Password">                            <p class="help-block">Use password: 123456</p>                        </div>                        <button type="submit" class="btn btn-primary">Sign In</button>                    </form>                </div>            </div>        </div>    </div>    <div class="row">        <div class="col-md-12">            <h1>Get more ...</h1>        </div>    </div></div>{% endblock %}</code></pre><p>login-failed.html</p><pre><code>{% extends "base.html" %} {% block main %}<!-- 测试格式是否输入正确 --><div class="container">    <div class="row">        <div class="col-md-12">            <h1>Sign in failed!</h1>            <div class="alert alert-danger"> <strong>Sorry!</strong> Your email or password does not match! Please try again.            </div>        </div>    </div>    <div class="row">        <div class="col-md-6">            <div class="panel panel-default">                <div class="panel-heading">                    <h3 class="panel-title"><span class="glyphicon glyphicon-user"></span> Please sign in</h3>                </div>                <div class="panel-body">                    <form action="/signin" method="post">                        <div class="form-group">                            <label>Email address</label>                            <input type="email" name="email" class="form-control" placeholder="Email">                            <p class="help-block">示例: admin@example.com</p>                        </div>                        <div class="form-group">                            <label>Password</label>                            <input type="password" name="password" class="form-control" placeholder="Password">                            <p class="help-block">示例: 123456</p>                        </div>                        <button type="submit" class="btn btn-primary">Sign In</button>                    </form>                </div>            </div>        </div>    </div></div>{% endblock %}</code></pre><p>login-success.html</p><pre><code>{% extends "base.html" %} {% block main %}<div class="container">    <div class="row">        <div class="col-md-12">            <h1>Sign in successfully!</h1>            <div class="alert alert-success"> <strong>Well done!</strong> You successfully signed in as {{ name }}!            </div>            <p><a href="/">Back to home</a></p>        </div>    </div></div>{% endblock %}</code></pre><h2 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h2><p>controller.js</p><pre><code>const fs = require(&#39;fs&#39;);// add url-route in /controllers:function addMapping(router, mapping) {    for (var url in mapping) {        if (url.startsWith(&#39;GET &#39;)) {            var path = url.substring(4);            router.get(path, mapping[url]);            console.log(`register URL mapping: GET ${path}`);        } else if (url.startsWith(&#39;POST &#39;)) {            var path = url.substring(5);            router.post(path, mapping[url]);            console.log(`register URL mapping: POST ${path}`);        } else if (url.startsWith(&#39;PUT &#39;)) {            var path = url.substring(4);            router.put(path, mapping[url]);            console.log(`register URL mapping: PUT ${path}`);        } else if (url.startsWith(&#39;DELETE &#39;)) {            var path = url.substring(7);            router.del(path, mapping[url]);            console.log(`register URL mapping: DELETE ${path}`);        } else {            console.log(`invalid URL: ${url}`);        }    }}//后面调用时，寻找controllers目录下的以js结尾的文件function addControllers(router, dir) {    fs.readdirSync(__dirname + &#39;/&#39; + dir).filter((f) =&gt; {        return f.endsWith(&#39;.js&#39;);    }).forEach((f) =&gt; {        console.log(`process controller: ${f}...`);        let mapping = require(__dirname + &#39;/&#39; + dir + &#39;/&#39; + f);        addMapping(router, mapping);    });}//寻找controllers目录下module.exports = function (dir) {    let        controllers_dir = dir || &#39;controllers&#39;,        router = require(&#39;koa-router&#39;)();    addControllers(router, controllers_dir);    return router.routes();};</code></pre><p>static-file.js</p><pre><code>const path = require(&#39;path&#39;);const mime = require(&#39;mime&#39;);const fs = require(&#39;mz/fs&#39;);// url: 类似 &#39;/static/&#39;// dir: 类似 __dirname + &#39;/static&#39;//接收两个参数：URL前缀和一个目录，然后返回一个async函数function staticFiles(url, dir) {    return async (ctx, next) =&gt; {        let rpath = ctx.request.path;        // 判断是否以指定的url开头:        if (rpath.startsWith(url)) {            // 获取文件完整路径:            let fp = path.join(dir, rpath.substring(url.length));            // 判断文件是否存在:            if (await fs.exists(fp)) {                // 查找文件的mime:                ctx.response.type = mime.getType(rpath);                // 读取文件内容并赋值给response.body:                ctx.response.body = await fs.readFile(fp);            } else {                // 文件不存在:                ctx.response.status = 404;            }        } else {            // 不是指定前缀的URL，继续处理下一个middleware:            await next();        }    };}module.exports = staticFiles;//关于mime//1.lookup() renamed to getType()//2.extension() renamed to getExtension()//3.charset() and load() methods have been removed</code></pre><p>templating.js</p><pre><code>const nunjucks = require(&#39;nunjucks&#39;);function createEnv(path, opts) {    var        autoescape = opts.autoescape === undefined ? true : opts.autoescape,        noCache = opts.noCache || false,        watch = opts.watch || false,        throwOnUndefined = opts.throwOnUndefined || false,        env = new nunjucks.Environment(            new nunjucks.FileSystemLoader(path, {                noCache: noCache,                watch: watch,            }), {                autoescape: autoescape,                throwOnUndefined: throwOnUndefined            });    if (opts.filters) {        for (var f in opts.filters) {            env.addFilter(f, opts.filters[f]);        }    }    return env;}//集成Nunjucks的middlewarefunction templating(path, opts) {    // 创建Nunjucks的env对象:    var env = createEnv(path, opts);    return async (ctx, next) =&gt; {        // 给ctx绑定render函数:（内部渲染模板）        ctx.render = function (view, model) {            // 把render后的内容赋值给response.body:            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));            // 设置Content-Type:            ctx.response.type = &#39;text/html&#39;;        };        // 继续处理请求:        await next();    };}module.exports = templating;// ctx.render内部渲染模板时，Model对象并不是传入的model变量，// 而是：Object.assign({}, ctx.state || {}, model || {})// 解析：// Object.assign()会把除第一个参数外的其他参数的所有属性复制到第一个参数中。// 第一个参数：ctx.state || {}，这个目的是为了能把一些公共的变量放入ctx.state并传给View。// 第二个参数：model || {}确保了即使传入undefined，model也会变为默认值{}。// 进阶：// 例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：// 这样就没有必要在每个Controller的async函数中都把user变量放入model中。// app.use(async (ctx, next) =&gt; {//     var user = tryGetUserFromCookie(ctx.request);//     if (user) {//         ctx.state.user = user;//         await next();//     } else {//         ctx.response.status = 403;//     }// });</code></pre><p>app.js(主运行js文件)</p><pre><code>const Koa = require(&#39;koa&#39;);const bodyParser = require(&#39;koa-bodyparser&#39;);//导入控制器处理URL路由和集成Nunjucks模板const controller = require(&#39;./controller&#39;);const templating = require(&#39;./templating&#39;);const app = new Koa();//生产环境上必须配置环境变量NODE_ENV = &#39;production&#39;，//开发环境不需要配置，实际上NODE_ENV = &#39;undefined&#39;.//定义了一个常量isProduction，它判断当前环境是否是production环境。//如果是，就使用缓存，如果不是，就关闭缓存const isProduction = process.env.NODE_ENV === &#39;production&#39;;// 第一个middleware是记录URL以及页面执行时间：app.use(async (ctx, next) =&gt; {    console.log(`Process ${ctx.request.method} ${ctx.request.url}...`);    var        start = new Date().getTime(),        execTime;    await next();    execTime = new Date().getTime() - start;    ctx.response.set(&#39;X-Response-Time&#39;, `${execTime}ms`);});// 第二个middleware处理静态文件：//内部let块，导入staticFiles自定义包(即目录+暴露js的文件名)//接收两个参数：URL前缀和一个目录，url: 类似 &#39;/static/&#39;;dir: 类似 __dirname + &#39;/static&#39;//if (! isProduction)即根据环境变量判断NODE_ENV，生产production，开发undefined//判断结果应为开发环境if (! isProduction) {    let staticFiles = require(&#39;./static-files&#39;);    app.use(staticFiles(&#39;/static/&#39;, __dirname + &#39;/static&#39;));}// 第三个middleware解析POST请求：app.use(bodyParser());// 第四个middleware负责给ctx加上render()来使用Nunjucks：//集成Nunjucks,调用这个方法来渲染模板app.use(templating(&#39;views&#39;, {    noCache: !isProduction,    watch: !isProduction}));//最后一个middleware处理URL路由：app.use(controller());app.listen(3000);console.log(&#39;app started at port 3000...&#39;);</code></pre><p>学完廖大的文章，模仿小改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/104835542&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MVC（node-koa应用）&lt;/a&gt;&lt;/p&gt;
&lt;h1
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://lewis.qi.tk/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="nodejs" scheme="http://lewis.qi.tk/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>hex（base16）、base32、base64三种编码方式区别</title>
    <link href="http://lewis.qi.tk/2020/05/16/hex%EF%BC%88base16%EF%BC%89%E3%80%81base32%E3%80%81base64%E4%B8%89%E7%A7%8D%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB/"/>
    <id>http://lewis.qi.tk/2020/05/16/hex%EF%BC%88base16%EF%BC%89%E3%80%81base32%E3%80%81base64%E4%B8%89%E7%A7%8D%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB/</id>
    <published>2020-05-16T11:33:48.000Z</published>
    <updated>2020-05-16T11:38:39.227Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/104785166" target="_blank" rel="noopener">hex（base16）、base32、base64三种编码方式区别</a></p><h1 id="总体："><a href="#总体：" class="headerlink" title="总体："></a>总体：</h1><p>hex编码不区分大小写，base32与base64编码区分大小写<br>三种都是稳定的把二进制数组变成可见字符的编码方式</p><h2 id="hex（-base16）"><a href="#hex（-base16）" class="headerlink" title="hex（=base16）"></a>hex（=base16）</h2><p>1.使用16个可见字符来表示一个二进制数组，编码后数据大小将x2<br>2.1个字符需要用2个可见字符来表示</p><h2 id="base32"><a href="#base32" class="headerlink" title="base32"></a>base32</h2><p>1.使用32个可见字符来表示一个二进制数组，编码后数据大小变成原来的8/5<br>2.5个字符用8个可见字符表示,不足8个字符，将用=来补充</p><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>1.使用64个可见字符来表示一个二进制数组，编码后数据大小变成原来的4/3<br>2.3个字符用4个可见字符来表示</p><p>测试：</p><pre><code>@Testpublic void test(){    String data = &quot;测试编码内容&quot; ;    byte[] bytes = data.getBytes() ;    //测试hex    try {        long start = System.currentTimeMillis() ;        String encryStr = &quot;&quot; ;        String decryStr = &quot;&quot; ;        for(int i= 0 ; i &lt; 10000 ; i++) {            encryStr = Hex.encodeHexString(bytes) ;            decryStr = new String(Hex.decodeHex(encryStr.toCharArray())) ;        }        print(&quot;Hex:&quot;  + (System.currentTimeMillis() - start ) + &quot; ms &quot; +  encryStr  + &quot; | &quot; + decryStr) ;    } catch (Exception e) {        e.printStackTrace();    }    //测试base64    try {        long start = System.currentTimeMillis() ;        String encryStr = &quot;&quot; ;        String decryStr = &quot;&quot; ;        for(int i= 0 ; i &lt; 10000 ; i++) {            encryStr = Base64.encodeBase64String(bytes) ;            decryStr = new String(Base64.decodeBase64(encryStr.getBytes()) );        }        print(&quot;base64: &quot; + (System.currentTimeMillis() - start ) + &quot; ms &quot; +  encryStr  + &quot; | &quot; + decryStr) ;        } catch (Exception e) {            e.printStackTrace();        }    }</code></pre><p>结论：<br>hex编码速度快，体积大；base64编码速度慢，体积小</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/104785166&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hex（base16）、base32、base64三种
      
    
    </summary>
    
    
      <category term="编码" scheme="http://lewis.qi.tk/categories/%E7%BC%96%E7%A0%81/"/>
    
    
      <category term="编码" scheme="http://lewis.qi.tk/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>node.js语法以及npm、webpack打包</title>
    <link href="http://lewis.qi.tk/2020/05/16/node-js%E8%AF%AD%E6%B3%95%E4%BB%A5%E5%8F%8Anpm%E3%80%81webpack%E6%89%93%E5%8C%85/"/>
    <id>http://lewis.qi.tk/2020/05/16/node-js%E8%AF%AD%E6%B3%95%E4%BB%A5%E5%8F%8Anpm%E3%80%81webpack%E6%89%93%E5%8C%85/</id>
    <published>2020-05-16T11:33:28.000Z</published>
    <updated>2020-05-16T11:37:11.445Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/104722319" target="_blank" rel="noopener">node.js语法以及npm、webpack打包</a></p><p>异步编程的直接体现就是回调,处理大量的并发请求<br>一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作</p><h2 id="cmd（npm、node-js）"><a href="#cmd（npm、node-js）" class="headerlink" title="cmd（npm、node.js）"></a>cmd（npm、node.js）</h2><p>允许用户从NPM服务器下载别人编写的第三方包到本地使用。<br>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。<br>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。  </p><h3 id="1-查看版本"><a href="#1-查看版本" class="headerlink" title="1.查看版本"></a>1.查看版本</h3><p>node-v<br>npm -v</p><h3 id="2-npm-命令来升级"><a href="#2-npm-命令来升级" class="headerlink" title="2.npm 命令来升级"></a>2.npm 命令来升级</h3><p>sudo npm install npm -g<br>npm install npm -g</p><hr><p>在E:\webpack-demo新建文件如webpack-test并进入<br>cd E:\webpack-demo\webpack-test  </p><h3 id="3-创建一个新的本地项目目录名为webpack-demo"><a href="#3-创建一个新的本地项目目录名为webpack-demo" class="headerlink" title="3.创建一个新的本地项目目录名为webpack-demo"></a>3.创建一个新的本地项目目录名为webpack-demo</h3><p>mkdir webpack-test</p><h3 id="4-进入目录"><a href="#4-进入目录" class="headerlink" title="4.进入目录"></a>4.进入目录</h3><p>cd webpack-test</p><h3 id="5-安装webpack"><a href="#5-安装webpack" class="headerlink" title="5.安装webpack"></a>5.安装webpack</h3><p>(安装最新版本) + <a href="mailto:webpack@4.41.6">webpack@4.41.6</a><br>npm install –save-dev webpack<br>(安装你需要的版本)<br>npm install –save-dev <a href="mailto:webpack@3.12.0">webpack@3.12.0</a></p><h3 id="6-安装webpack-cli-webpack-cli-3-3-11"><a href="#6-安装webpack-cli-webpack-cli-3-3-11" class="headerlink" title="6.安装webpack-cli  + webpack-cli@3.3.11"></a>6.安装webpack-cli  + <a href="mailto:webpack-cli@3.3.11">webpack-cli@3.3.11</a></h3><p>npm install –save-dev webpack-cli</p><h3 id="7-引入依赖（打包）"><a href="#7-引入依赖（打包）" class="headerlink" title="7.引入依赖（打包）"></a>7.引入依赖（打包）</h3><ul><li>安装一个要打包到<strong>生产环境</strong>的安装包<br>使用 npm install –save</li><li>安装一个用于<strong>开发环境</strong>的安装包（例如，linter, 测试库等）<br>使用 npm install –save-dev</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>要在 index.js 中打包 <strong>lodash 依赖</strong>，我们需要在本地安装 library：<br>(注意更改package.json不要有//之类的注释)<br>npm install –save lodash  </p><h3 id="8-更新-index-html-文件"><a href="#8-更新-index-html-文件" class="headerlink" title="8.更新 index.html 文件"></a>8.更新 index.html 文件</h3><p>现在，由于通过打包来合成脚本，我们必须更新 index.html 文件。<br>因为现在是通过 import 引入 lodash，所以将 lodash &lt;script&gt; 删除，<br>然后修改另一个 &lt;script&gt; 标签来加载 bundle，而不是原始的 /src 文件：</p><h3 id="9-将我们的脚本作为入口起点"><a href="#9-将我们的脚本作为入口起点" class="headerlink" title="9.将我们的脚本作为入口起点"></a>9.将我们的脚本作为入口起点</h3><p>npx webpack<br>然后输出为 main.js</p><h3 id="10-删除"><a href="#10-删除" class="headerlink" title="10.删除"></a>10.删除</h3><p>1.删除全局webpack-cli<br>npm uninstall -g webpack-cli<br>2.删除全局webpack<br>npm uninstall -g webpack<br>3.删除本地（局部）webpack-cli<br>npm uninstall webpack-cli<br>4.删除本地webpack<br>npm un webpack<br>5.检查webpack残余文件<br>rm -rf node_modules package-lock.json package.json  </p><hr><h3 id="1-创建package-json文件"><a href="#1-创建package-json文件" class="headerlink" title="1.创建package.json文件"></a>1.创建package.json文件</h3><pre><code>//1.手动输  npm init  //2.自动建立package.json(-y 的含义:在init的时候省去了敲回车的步骤，少用)  npm init -y会出现warn警告1：No description: 这个警告是说这个项目的描述为空会出现warn警告2：No repository field：这个警告就是说git仓库字段没有设置可以添加{    ....    &quot;scripts&quot;: {        &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;      },     &quot;private&quot;: true, #加这个声明私有    &quot;author&quot;: &quot;xxxx&quot;,    ....}</code></pre><p>Package.json属性说明:位于 node_modules/express/package.json 内容</p><pre><code>name            包名。version         包的版本号。description     包的描述。homepage        包的官网 url 。author          包的作者姓名。contributors    包的其他贡献者姓名。dependencies    依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module目录下。repository      包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。main            指定了程序的主入口文件，require(&#39;moduleName&#39;) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。keywords        关键字</code></pre><h3 id="2-安装模块【可以通过-require-来引入本地安装的包】"><a href="#2-安装模块【可以通过-require-来引入本地安装的包】" class="headerlink" title="2.安装模块【可以通过 require() 来引入本地安装的包】"></a>2.安装模块【可以通过 require() 来引入本地安装的包】</h3><p>npm install &lt;Module Name模块名&gt;      (本地安装)<br>npm install &lt;Module Name模块名&gt;  -g  (全局安装)<br>//express 包就放在了工程目录下的 node_modules 目录中<br>安装：npm install express<br>调用：var express = require(‘express’);  </p><p>注：</p><pre><code>我自己在项目的本地总共安装了这些npm install express             //路由、HTTP帮助程序（重定向，缓存等）npm install fs                          //文件npm install http                        //开发HTTP服务器程序npm install url                         //解析URLnpm install path                    //处理本地文件目录npm install http-servernpm install crypto                  //提供通用的加密和哈希算法npm install stream              //提供的仅在服务区端可用的模块,支持“流”这种数据结构npm install steam</code></pre><h3 id="3-查看、卸载、更新、搜索模块"><a href="#3-查看、卸载、更新、搜索模块" class="headerlink" title="3.查看、卸载、更新、搜索模块"></a>3.查看、卸载、更新、搜索模块</h3><p>（以express模块举例）<br>查看所有全局安装的模块：<br>npm list -g<br>查看某个模块的版本号：<br>npm list express<br>卸载模块<br>npm uninstall express<br>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在<br>npm ls<br>更新模块<br>npm update express<br>搜索模块<br>npm search express<br>启动模块<br>npm start  xxx<br>停止模块<br>npm stop  xxx  </p><h3 id="创建自己的模块"><a href="#创建自己的模块" class="headerlink" title="创建自己的模块"></a>创建自己的模块</h3><p>在 npm 资源库中注册用户（使用邮箱注册）<br>npm adduser<br>发布模块<br>npm publish<br>然后就可以安装自己的模块<br>npm install xxxxx</p><h3 id="3-创建-Node-js-应用"><a href="#3-创建-Node-js-应用" class="headerlink" title="3.创建 Node.js 应用"></a>3.创建 Node.js 应用</h3><ul><li>引入 required 模块，将实例化的 HTTP 赋值给变量 http  <blockquote><p>var http = require(“http”);  </p></blockquote></li><li>创建HTTP服务器<blockquote><p>http.createServer(function (request, response) {<br>  // 发送 HTTP 头部 （HTTP 状态值: 200 : OK 和 内容类型: text/plain）<br>  response.writeHead(200, {‘Content-Type’: ‘text/plain’});<br>  // 发送响应数据 “Hello World”<br>  response.end(‘Hello World\n’);<br>}).listen(8888);  </p></blockquote></li><li>终端打印如下信息<blockquote><p>console.log(‘Server running at <a href="http://127.0.0.1:8888/&#39;" target="_blank" rel="noopener">http://127.0.0.1:8888/&#39;</a>);</p></blockquote></li></ul><p>如下：<br>server.js  </p><pre><code>var http = require(&#39;http&#39;);http.createServer(function (request, response) {    response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});    response.end(&#39;Hello World\n&#39;);}).listen(8888);console.log(&#39;Server running at http://127.0.0.1:8888/&#39;);</code></pre><h2 id="4-node-命令"><a href="#4-node-命令" class="headerlink" title="4. node 命令"></a>4. node 命令</h2><p>node server.js<br>再打开<a href="http://127.0.0.1:8888/，即可看到Hello" target="_blank" rel="noopener">http://127.0.0.1:8888/，即可看到Hello</a> World</p><hr><h2 id="Node-js-REPL-交互式解释器"><a href="#Node-js-REPL-交互式解释器" class="headerlink" title="Node.js REPL(交互式解释器)"></a>Node.js REPL(交互式解释器)</h2><p>1.启动 Node 的终端<br>node  </p><p>2.使用 var 关键字的变量可以使用 console.log() 来输出变量  </p><pre><code>$ node&gt; x = 1010&gt; var y = 10undefined</code></pre><p>3.使用下划线(_)获取上一个表达式的运算结果</p><pre><code>&gt; x + y30&gt; var sum = _undefined</code></pre><pre><code>ctrl + c                退出当前终端。ctrl + c 按下两次        退出 Node REPL。ctrl + d                退出 Node REPL.</code></pre><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数callbak一般作为函数的最后一个参数出现<br>function foo1(name, age, callback) { }<br>function foo2(value, callback1, callback2) { }</p><h2 id="基本模块"><a href="#基本模块" class="headerlink" title="基本模块"></a>基本模块</h2><p><strong>在Node环境中，一个.js文件就称之为一个模块</strong></p><h3 id="color-red-1-自定义模块"><a href="#color-red-1-自定义模块" class="headerlink" title="$\color{red}1.自定义模块$"></a>$\color{red}1.自定义模块$</h3><ul><li>一个模块想要对外暴露变量（函数也是变量）<br> module.exports = variable;</li><li>一个模块要引用其他模块暴露的变量<br> var ref = require(‘module_name模块名’); 或<br> var ref = require(‘path_name相对目录名’);</li><li>原理：<strong>支持闭包</strong>。<ul><li>如果我们把一段JavaScript代码用一个函数包装起来，这段代码的<strong>所有“全局”变量就变成了函数内部的局部变量</strong></li></ul></li></ul><p>实例：</p><p>hello.js</p><pre><code>&#39;use strict&#39;;var s = &#39;Hello&#39;;function greet(name) {    console.log(s + &#39;, &#39; + name + &#39;!&#39;);}module.exports = greet;   //对外暴露变量(greet函数名)</code></pre><p>main.js</p><pre><code>&#39;use strict&#39;;// 引入hello模块,引入的模块作为变量保存在greet变量中var greet = require(&#39;./hello&#39;);  var s = &#39;world&#39;;greet(s); // s使用hello.js内的函数，输出Hello, world!</code></pre><h3 id="color-red-2-fs模块"><a href="#color-red-2-fs模块" class="headerlink" title="$\color{red}2.fs模块$"></a>$\color{red}2.fs模块$</h3><p>fs模块就是文件系统模块，负责读写文件。同时提供了异步和同步的方法</p><p>1.异步读文本文件</p><pre><code>&#39;use strict&#39;;               //js的严格模式var fs = require(&#39;fs&#39;);fs.readFile(&#39;sample.txt&#39;, &#39;utf-8&#39;, function (err, data) {    if (err) {        console.log(err);    } else {        console.log(data);    }});</code></pre><p>注：</p><ul><li>sample.txt文件必须在当前目录下，且文件编码为utf-8</li><li>当正常读取时，err参数为null，data参数为读取到的String</li><li>当读取发生错误时，err参数代表一个错误对象，data为undefined</li></ul><p>2.异步读二进制文件（图片）  </p><pre><code>&#39;use strict&#39;;var fs = require(&#39;fs&#39;);fs.readFile(&#39;sample.png&#39;, function (err, data) {    if (err) {        console.log(err);    } else {        console.log(data);        console.log(data.length + &#39; bytes&#39;);    }});</code></pre><p>注：</p><ul><li>回调函数的data参数将返回一个Buffer对象，是一个包含零个或任意个字节的数组（注意和Array不同）</li><li>Buffer对象转换成String<blockquote><p>// Buffer -&gt; String<br>var text = data.toString(‘utf-8’);<br>console.log(text);  </p></blockquote></li><li>String转换成Buffer<blockquote><p>// String -&gt; Buffer<br>var buf = Buffer.from(text, ‘utf-8’);<br>console.log(buf);  </p></blockquote></li></ul><p>3.同步读文件(少用)<br>多了一个Sync后缀，并且不接收回调函数，函数直接返回结果</p><pre><code>&#39;use strict&#39;;var fs = require(&#39;fs&#39;);try {    var data = fs.readFileSync(&#39;sample.txt&#39;, &#39;utf-8&#39;);    console.log(data);} catch (err) {    // 出错了}</code></pre><p>4.异步写文件</p><pre><code>&#39;use strict&#39;;var fs = require(&#39;fs&#39;);var data = &#39;Hello, Node.js&#39;;fs.writeFile(&#39;output.txt&#39;, data, function (err) {    if (err) {        console.log(err);    } else {        console.log(&#39;ok.&#39;);    }});</code></pre><p>注：  </p><ul><li>参数依次为文件名、数据和回调函数</li><li>回调函数由于只关心成功与否，因此只需要一个err参数</li></ul><p>5.异步写文件（忽略）</p><p>6.获取文件大小，创建时间等信息</p><pre><code>&#39;use strict&#39;;var fs = require(&#39;fs&#39;);fs.stat(&#39;sample.txt&#39;, function (err, stat) {    if (err) {        console.log(err);    } else {        // 是否是文件:        console.log(&#39;isFile: &#39; + stat.isFile());        // 是否是目录:        console.log(&#39;isDirectory: &#39; + stat.isDirectory());        if (stat.isFile()) {            // 文件大小:            console.log(&#39;size: &#39; + stat.size);            // 创建时间, Date对象:            console.log(&#39;birth time: &#39; + stat.birthtime);            // 修改时间, Date对象:            console.log(&#39;modified time: &#39; + stat.mtime);        }    }});</code></pre><p>注：使用fs.stat()，它返回一个Stat对象，能告诉我们文件或目录的详细信息</p><h3 id="color-red-3-stream模块（主要是fs模块）"><a href="#color-red-3-stream模块（主要是fs模块）" class="headerlink" title="$\color{red}3.stream模块（主要是fs模块）$"></a>$\color{red}3.stream模块（主要是fs模块）$</h3><p>标准输出流（stdout）。<br>流的特点是数据是有序的，而且必须<strong>依次读取，或者依次写入</strong>，不能像Array那样随机定位.<br>流也是一个对象</p><ul><li>data事件表示流的数据已经可以读取<ul><li>data事件可能会有多次，每次传递的chunk是流的一部分数据</li></ul></li><li>end事件表示这个流已经到末尾了</li><li>error事件表示出错了</li><li>所有可以<strong>读取</strong>数据的流都继承自stream.Readable</li><li>所有可以<strong>写入</strong>数据的流都继承自stream.Writable</li><li>一个Readable流和一个Writable流串起来后，所有的数据自动从Readable流进入Writable流，这种操作为<strong>pipe()方法</strong></li></ul><p>1.文件流读取文本</p><pre><code>&#39;use strict&#39;;var fs = require(&#39;fs&#39;);// 打开一个流:var rs = fs.createReadStream(&#39;sample.txt&#39;, &#39;utf-8&#39;);rs.on(&#39;data&#39;, function (chunk) {    console.log(&#39;DATA:&#39;)    console.log(chunk);});rs.on(&#39;end&#39;, function () {    console.log(&#39;END&#39;);});rs.on(&#39;error&#39;, function (err) {    console.log(&#39;ERROR: &#39; + err);});</code></pre><p>2.文件流写入文本，不断调用write()方法，最后以end()结束</p><pre><code>&#39;use strict&#39;;var fs = require(&#39;fs&#39;);var ws1 = fs.createWriteStream(&#39;output1.txt&#39;, &#39;utf-8&#39;);ws1.write(&#39;使用Stream写入文本数据...\n&#39;);ws1.write(&#39;END.&#39;);ws1.end();var ws2 = fs.createWriteStream(&#39;output2.txt&#39;);ws2.write(new Buffer(&#39;使用Stream写入二进制数据...\n&#39;, &#39;utf-8&#39;));ws2.write(new Buffer(&#39;END.&#39;, &#39;utf-8&#39;));ws2.end();</code></pre><p>3.读取源文件的所有数据都自动写入到目标文件</p><pre><code>&#39;use strict&#39;;var fs = require(&#39;fs&#39;);var rs = fs.createReadStream(&#39;sample.txt&#39;);var ws = fs.createWriteStream(&#39;copied.txt&#39;);rs.pipe(ws);</code></pre><h3 id="color-red-4-http模块（包含path、url模块）"><a href="#color-red-4-http模块（包含path、url模块）" class="headerlink" title="$\color{red}4.http模块（包含path、url模块）$"></a>$\color{red}4.http模块（包含path、url模块）$</h3><p>提供的request和response对象</p><ul><li>request对象封装了HTTP请求，调用request对象属性和方法可以拿到所有HTTP请求信息</li><li>response对象封装了HTTP响应，操作response对象方法，可以把HTTP响应返回给浏览器</li></ul><p>1.Web程序</p><pre><code>hello.js&#39;use strict&#39;;var http = require(&#39;http&#39;);// 创建http server，并传入回调函数:var server = http.createServer(function (request, response) {    // 回调函数接收request和response对象,    // 获得HTTP请求的method和url:    console.log(request.method + &#39;: &#39; + request.url);    // 将HTTP响应200写入response, 同时设置Content-Type: text/html:    response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html&#39;});    // 将HTTP响应的HTML内容写入response:    response.end(&#39;&lt;h1&gt;Hello world!&lt;/h1&gt;&#39;);});server.listen(8080);           // 让服务器监听8080端口:console.log(&#39;Server is running at http://127.0.0.1:8080/&#39;);再node hello.js 输出</code></pre><p>2.文件服务器(url和path模块)</p><p>将一个字符串解析为一个Url对象：</p><pre><code>&#39;use strict&#39;;var url = require(&#39;url&#39;);console.log(url.parse(&#39;http://user:pass@host.com:8080/path/to/file?query=string#hash&#39;));</code></pre><p>构造目录：<br>这样，我们就不关心怎么拼接路径了</p><pre><code>&#39;use strict&#39;;var path = require(&#39;path&#39;);var workDir = path.resolve(&#39;.&#39;); // 解析当前目录:为&#39;/Users/michael&#39;// 组合完整文件路径:当前目录+&#39;pub&#39;+&#39;index.html&#39;:为&#39;/Users/michael/pub/index.html&#39;var filePath = path.join(workDir, &#39;pub&#39;, &#39;index.html&#39;);</code></pre><p>实现一个文件服务器：</p><pre><code>&#39;use strict&#39;;var    fs = require(&#39;fs&#39;),    url = require(&#39;url&#39;),    path = require(&#39;path&#39;),    http = require(&#39;http&#39;);// 从命令行参数获取root目录，默认是当前目录:var root = path.resolve(process.argv[2] || &#39;.&#39;);console.log(&#39;静态根目录: &#39; + root);// 创建服务器:var server = http.createServer(function (request, response) {    // 获得URL的path，类似 &#39;/css/bootstrap.css&#39;:    var pathname = url.parse(request.url).pathname;    // 获得对应的本地文件路径，类似 &#39;/srv/www/css/bootstrap.css&#39;:    var filepath = path.join(root, pathname);    // 获取文件状态:    fs.stat(filepath, function (err, stats) {        if (!err &amp;&amp; stats.isFile()) {            console.log(&#39;200 &#39; + request.url);              // 没有出错并且文件存在:            response.writeHead(200);                        // 发送200响应:            fs.createReadStream(filepath).pipe(response);   // 将文件流导向response:        } else {            console.log(&#39;404 &#39; + request.url);              // 出错了或者文件不存在:            response.writeHead(404);                        // 发送404响应:            response.end(&#39;404 Not Found&#39;);        }    });});server.listen(8080);console.log(&#39;Server is running at http://127.0.0.1:8080/&#39;);</code></pre><p>注：运行node file_server.js /path/to/dir，把/path/to/dir改成你本地的一个有效的目录，然后在浏览器中输入<a href="http://localhost:8080/index.html，只要当前目录下存在文件index.html，服务器就可以把文件内容发送给浏览器。" target="_blank" rel="noopener">http://localhost:8080/index.html，只要当前目录下存在文件index.html，服务器就可以把文件内容发送给浏览器。</a></p><h3 id="color-red-5-crypto模块"><a href="#color-red-5-crypto模块" class="headerlink" title="$\color{red}5.crypto模块$"></a>$\color{red}5.crypto模块$</h3><p>。。。。</p><hr><p>这是我的学习笔记，待续（详见廖雪峰的官方网站）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/104722319&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node.js语法以及npm、webpack打包&lt;/a
      
    
    </summary>
    
    
      <category term="nodejs" scheme="http://lewis.qi.tk/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://lewis.qi.tk/tags/nodejs/"/>
    
      <category term="npm" scheme="http://lewis.qi.tk/tags/npm/"/>
    
      <category term="webpack" scheme="http://lewis.qi.tk/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>nginx基本结构分析</title>
    <link href="http://lewis.qi.tk/2020/05/16/nginx%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>http://lewis.qi.tk/2020/05/16/nginx%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</id>
    <published>2020-05-16T11:26:13.000Z</published>
    <updated>2020-05-16T11:31:48.386Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105583416" target="_blank" rel="noopener">nginx基本结构分析</a></p><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>源码的安装一般由有这三个步骤：配置(configure)、编译(make)、安装(make install)<br>端口默认80<br>windows语法路径：<br>Linux语法路径：/<br>【注意，不管什么系统，nginx的路径都是<code>/</code>】</p><p>nginx是轻量级的Web服务器、反向代理服务器、电子邮件（IMAP、POP3）代理服务器。占用内存小、并发能力强</p><p>在低并发时，用户可以直接访问Tomcat服务器，然后Tomcat服务器返回消息给用户【单个tomcat服务器IP是有限制的】</p><p><code>nginx</code>：高并发、高性能、热部署（修改时不需要把服务器关闭）</p><p><code>PCRE</code> ：<strong>让 Nginx 支持 Rewrite 功能。</strong></p><h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><ul><li>响应时间<ul><li>如处理一个请求200ms</li></ul></li><li>吞吐量<ul><li>每秒处理的请求数量</li></ul></li><li>QPS<ul><li>每秒响应的请求数量</li></ul></li><li>并发用户数<ul><li>同时承载使用功能的用户数</li></ul></li></ul><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><p>正向代理：<br>内网里不能直接访问外网的谷歌，可以借助VNP。。。来实现。</p><ul><li>正向代理“代理”的是$\color{red}客户端$，而且客户端是知道目标的，但目标是不知道客户端是通过VPN访问的。</li></ul><p>反向代理：<br>外网访问百度时，其实会进行一个转发，代理到内网去。</p><ul><li>反向代理“代理”的是$\color{red}服务器端$，而且这一个过程对于客户端而言是透明的</li></ul><p>Master进程的作用:</p><ul><li>读取并验证配置文件nginx.conf；管理worker进程；</li></ul><p>Worker进程的作用是？</p><ul><li>每一个Worker进程都维护一个线程（避免线程切换），处理连接和请求</li><li>注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程</li></ul><hr><h2 id="nginx-conf核心配置文件"><a href="#nginx-conf核心配置文件" class="headerlink" title="nginx.conf核心配置文件"></a>nginx.conf核心配置文件</h2><p>nginx.conf【简介】</p><pre class="line-numbers language-conf"><code class="language-conf">... #全局块events { #events块...}http #http块{    ... #http全局块    server #server块    {        ... #server全局块        location [PATTERN] #location块        {            ...        }        location [PATTERN]#location块        {            ...        }     }    server #server块    {        ...    }    ... #http全局块}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx.conf【Windows完整】</p><pre class="line-numbers language-conf"><code class="language-conf">#user  nobody;worker_processes  1;#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    server {        listen       80;        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            root   html;            index  index.html index.htm;        }        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \.php$ {        #    proxy_pass   http://127.0.0.1;        #}        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        #location ~ \.php$ {        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;        #    include        fastcgi_params;        #}        # deny access to .htaccess files, if Apache's document root        # concurs with nginx's one        #        #location ~ /\.ht {        #    deny  all;        #}    }    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server {    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}    # HTTPS server    #    #server {    #    listen       443 ssl;    #    server_name  localhost;    #    ssl_certificate      cert.pem;    #    ssl_certificate_key  cert.key;    #    ssl_session_cache    shared:SSL:1m;    #    ssl_session_timeout  5m;    #    ssl_ciphers  HIGH:!aNULL:!MD5;    #    ssl_prefer_server_ciphers  on;    #    location / {    #        root   html;    #        index  index.html index.htm;    #    }    #}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx.conf【Linux完整】</p><pre class="line-numbers language-conf"><code class="language-conf"># For more information on configuration, see:#   * Official English Documentation: http://nginx.org/en/docs/#   * Official Russian Documentation: http://nginx.org/ru/docs/user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events {    worker_connections 1024;}http {    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 2048;    include             /etc/nginx/mime.types;    default_type        application/octet-stream;    # Load modular configuration files from the /etc/nginx/conf.d directory.    # See http://nginx.org/en/docs/ngx_core_module.html#include    # for more information.    include /etc/nginx/conf.d/*.conf;    server {        listen       80 default_server;        listen       [::]:80 default_server;        server_name  _;        root         /usr/share/nginx/html;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        location / {        }        error_page 404 /404.html;            location = /40x.html {        }        error_page 500 502 503 504 /50x.html;            location = /50x.html {        }    }# Settings for a TLS enabled server.##    server {#        listen       443 ssl http2 default_server;#        listen       [::]:443 ssl http2 default_server;#        server_name  _;#        root         /usr/share/nginx/html;##        ssl_certificate "/etc/pki/nginx/server.crt";#        ssl_certificate_key "/etc/pki/nginx/private/server.key";#        ssl_session_cache shared:SSL:1m;#        ssl_session_timeout  10m;#        ssl_ciphers PROFILE=SYSTEM;#        ssl_prefer_server_ciphers on;##        # Load configuration files for the default server block.#        include /etc/nginx/default.d/*.conf;##        location / {#        }##        error_page 404 /404.html;#            location = /40x.html {#        }##        error_page 500 502 503 504 /50x.html;#            location = /50x.html {#        }#    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析nginx-conf核心配置"><a href="#分析nginx-conf核心配置" class="headerlink" title="分析nginx.conf核心配置"></a>分析nginx.conf核心配置</h2><h3 id="全局块配置"><a href="#全局块配置" class="headerlink" title="全局块配置"></a>全局块配置</h3><ul><li>影响nginx全局的指令<ul><li>有运行nginx服务器的用户组</li><li>nginx进程pid存放路径</li><li>日志存放路径</li><li>配置文件引入</li><li>允许生成worker process</li></ul></li></ul><p>nginx.conf</p><pre class="line-numbers language-conf"><code class="language-conf">#user  nobody;                      #配置用户或组，默认nobody#user www www;                      #定义Nginx运行的用户和用户组worker_processes  1;                #允许生成的进程数，默认1#error_log  logs/error.log;         #制定日志路径和级别                                    # http块，server块，级别为：debug|info|notice|warn|error|crit|alert|emerg#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;         #指定nginx进程运行文件存放地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="events块配置【工作模式及连接数上限】"><a href="#events块配置【工作模式及连接数上限】" class="headerlink" title="events块配置【工作模式及连接数上限】"></a>events块配置【工作模式及连接数上限】</h2><ul><li><p>影响nginx服务器或与用户的网络连接</p><ul><li>开启多个网络拦截序列化</li><li>一个进程是否允许同时接受多个网络连接</li><li>选取哪种事件驱动模型处理连接请求</li><li>每个进程的最大连接数</li></ul></li><li><p>参考事件模型（nginx针对不同的操作系统，有不同的事件模型）</p><ul><li><code>use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];</code></li></ul></li></ul><p>A）高效事件模型</p><ul><li>Kqueue<ul><li>使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</li></ul></li><li>Epoll<ul><li>使用于Linux内核2.6版本及以后的系统。</li></ul></li><li>/dev/poll<ul><li>使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</li></ul></li><li>Eventport<ul><li>使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要</li></ul></li></ul><p>B）标准事件模型</p><ul><li>Select、poll属于标准事件模型<ul><li>如果当前系统不存在更有效的方法，nginx会选择select或poll</li></ul></li></ul><p>C) 选择</p><ul><li><p>linux建议epoll</p></li><li><p>FreeBSD建议kqueue</p></li><li><p>worker_connections单个进程最大连接数（最大连接数=连接数*进程数）</p><ul><li>理论上每台nginx服务器的最大连接数为 = 65535</li></ul></li></ul><pre class="line-numbers language-txt"><code class="language-txt">注意:计算最大客户端连接数:`max_clients`全局中当前工作的进程数:`worker_process`每个进程的最大连接数:`worker_connections`- 当nginx作为http服务器时  - `max_clients = worker_process * worker_connections`- 当nginx作为反向代理服务器时  - 浏览器默认开启2个连接到server服务器，同时nginx还会使用fds从同一个连接池建立连接到外网的后端服务器，所以除以4  - `max_clients = worker_process * worker_connections / 4`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx.conf</p><pre class="line-numbers language-conf"><code class="language-conf">events {    accept_mutex on;            #设置网络连接序列化，防止惊群现象发生，默认on    multi_accept on;            #设置 一个进程是否允许同时接受多个网络连接    #use epoll                  #有select|poll|kqueue|epoll|resig|/dev/poll|eventport事件模型    worker_connections  1024;   #每个进程的最大连接数,默认1024    #keepalive_timeout 60;      #keepalive超时时间。}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http块配置【自身，http服务器】"><a href="#http块配置【自身，http服务器】" class="headerlink" title="http块配置【自身，http服务器】"></a>http块配置【自身，http服务器】</h2><ul><li>可以嵌套多个server<ul><li>配置代理、缓存、日志定义和第三方配置</li><li>可以文件引入</li><li>mime-type定义</li><li>是否使用sendfile传输文件</li><li>连接超时时间</li><li>单连接请求数</li></ul></li></ul><p>1、点击一个网站加载开启过慢，可以通过 <code>sendfile on</code> 来高效传输，<code>tcp_nopush on;</code>优化网络阻塞问题<br>2、<strong>HTTP/1.0默认短连接</strong>，客户端和服务器每进行一次HTTP操作就建立一次连接<br>3、<strong>HTTP/1.1后默认长连接</strong>，省去频繁创建和关闭连接的时间，<br> 在打开一个网页完成后，用于传输HTTP数据TCP连接不会马上关闭（连接时间长），当客户端再次访问这个服务器时，会继续使用这条已建立的连接。<br>4、<strong>HTTP的短连接和长连接，实际就是TCP的短连接和长连接</strong>。  </p><p>5、<code>upstream</code></p><ul><li>定义上游服务器集群，在反向代理中proxy_pass使用，用于负载均衡。</li><li>nginx的upstream目前支持4种方式的分配<ul><li><code>轮询weight</code></li><li><code>ip_hash</code></li><li><code>fair</code>（第三方）</li><li><code>url_hash</code>（第三方）</li></ul></li><li>每个设备的状态设置为:<ul><li><code>down</code><ul><li>当前的server暂时不参与负载</li></ul></li><li><code>weight</code><ul><li>weight越大，负载的权重就越大。</li></ul></li><li><code>max_fails</code><ul><li>允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</li></ul></li><li><code>fail_timeout</code><ul><li>max_fails次失败后，暂停的时间。</li></ul></li><li><code>backup</code><ul><li>其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</li></ul></li></ul></li></ul><pre class="line-numbers language-conf"><code class="language-conf">    1、轮询weight（默认）    #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。    #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。    upstream bakend {        server 192.xxx weight=10;        server 192.xxx weight=10;    }    2、ip_hash    #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。    upstream bakend {        ip_hash;        server 192.xxx:88;        server 192.xxx:80;    }    3、fair（第三方）    #按后端服务器的响应时间来分配请求，响应时间短的优先分配。    upstream backend {        server server1;        server server2;        fair;    }    4、url_hash（第三方）    #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。    #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法    upstream backend {        server squid1:3128;        server squid2:3128;        hash $request_uri;        hash_method crc32;    }    #tips:    upstream bakend{#定义负载均衡设备的Ip及设备状态}{        ip_hash;        server 127.0.0.1:9090 down;        server 127.0.0.1:8080 weight=2;        server 127.0.0.1:6060;        server 127.0.0.1:7070 backup;    }    #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;    #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。    #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug    #client_body_temp_path设置记录文件的目录 可以设置最多3层目录    #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx.conf</p><pre class="line-numbers language-conf"><code class="language-conf">http {    #配置支持哪些文件扩展名与文件类型映射表，在conf/mime.confs中查看【不支持jsp】    include       mime.types;    #默认的文件流类型    default_type  application/octet-stream;    #默认编码    #charset utf-8;    #取消服务访问日志    #access_log off;      #自定义打印日志的格式    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #打印日志的名字    #access_log  logs/access.log  main;    #自己添加部分--1【开始】#    #服务器名字的hash表大小    server_names_hash_bucket_size 128;    #客户端请求头部的缓冲区大小    client_header_buffer_size 32k;    #客户请求头缓冲大小    large_client_header_buffers 4 64k;    #设定通过nginx上传文件的大小    client_max_body_size 8m;    #自己添加部分--1【结束】#    #允许sendfile方式传输文件，开启高效传输模式默认为off【可以在http块，server块，location块。】    # sendfile系统调用不需要将数据拷贝或者映射到应用程序地址空间中去    sendfile        on;    # 每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。    # sendfile_max_chunk  100k;    #防止网络阻塞【此选项仅在使用sendfile的时候使用】    #tcp_nopush     on;    #长连接超时时间（秒）【可以在http，server，location块】    #keepalive_timeout  0;    keepalive_timeout  65;    #开启限制IP连接数的时候需要使用    #limit_zone crawler $binary_remote_addr 10m;    #自己添加部分（gzip压缩）---2【开始】#    #开启gzip压缩输出    gzip on;    #最小压缩文件大小    gzip_min_length 1k;    #压缩缓冲区    gzip_buffers 4 16k;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）    gzip_http_version 1.0;      #压缩等级      gzip_comp_level 2;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。    gzip_types text/plain application/x-javascript text/css application/xml;    gzip_vary on;    #自己添加部分（gzip压缩）---2【结束】#    #自己添加部分（FastCGI）---3【开始】#    #改善网站的性能：减少资源占用，提高访问速度。    fastcgi_connect_timeout 300;    fastcgi_send_timeout 300;    fastcgi_read_timeout 300;    fastcgi_buffer_size 64k;    fastcgi_buffers 4 64k;    fastcgi_busy_buffers_size 128k;    fastcgi_temp_file_write_size 128k;    #自己添加部分（FastCGI）---3【结束】#    #自己添加部分（负载均衡）---4【开始】#    #设定实际的服务器列表   upstream mysvr1 {    # 热备(其它所有的非backup机器down或者忙的时候，请求backup机器))     server 127.0.0.1:7878;     server 192.xxx:3333 backup;   }   upstream mysvr2 {    # weigth参数表示权值，权值越高被分配到的几率越大     server 192.xxx:80 weight=5;     server 192.xxx:80 weight=1;     server 192.xxx:80 weight=6;   }   upstream https-svr {    # 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题     ip_hash;     server 192.xxx:90;     server 192.xxx:90;   }    # 错误页    error_page 404 https://www.baidu.com;    #自己添加部分（负载均衡）---4【结束】#    ···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http块配置中的server块配置1【自身】"><a href="#http块配置中的server块配置1【自身】" class="headerlink" title="http块配置中的server块配置1【自身】"></a>http块配置中的server块配置1【自身】</h2><ul><li>每个http块可以包括多个server块</li><li>每个server块相当于一个$\color{red}虚拟主机$，可以包括全局server块和多个location块</li></ul><p>全局server块</p><ul><li>本虚拟机主机的监听配置 \ 监听HTTP端口</li><li>本虚拟机主机的名称/IP配置 \ 监听地址  </li></ul><p>$\color{red}注意location块的规则$</p><p>用于匹配URL</p><pre class="line-numbers language-conf"><code class="language-conf">location[= | ~ | ~* | ^~] uri {  ···}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>1、<code>=</code> :<ul><li>用于不含正则表达式的uri前，要求请求字符串与uri严格匹配。</li><li>如果匹配成功，就停止继续向下搜索并立即处理该请求。</li></ul></li><li>2、<code>~</code> :<ul><li>用于表示uri包含正则表达式，并且区分大小写。</li></ul></li><li>3、<code>~*</code> :<ul><li>用于表示uri包含正则表达式，并且不区分大小写。</li></ul></li><li>4、<code>^</code> :<ul><li>用于不含正则表达式的 uri前，要求Nginx服务器找到标识uri 和请求字符串匹配度最高的location 后，立即使用此location 处理请求，而不再使用location块中的正则uri和请求字符串做匹配。</li></ul></li><li>注意:<ul><li>如果uri包含正则表达式，则必须要有 <code>~</code> 或者 <code>~*</code> 标识。</li></ul></li></ul><pre class="line-numbers language-conf"><code class="language-conf">server {        # 本虚拟机主机的监听配置 # 监听HTTP端口        listen       80;        # 本虚拟机主机的名称/IP配置 # 监听地址, 域名可以有多个，用空格隔开        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            root   html;            index  index.html index.htm;        }        # 将服务器错误页重定向到静态页 /50x.html        #error_page  404              /404.html;        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }        # 将PHP脚本代理给Apache监听127.0.0.1:80        location ~ \.php$ {            proxy_pass   http://127.0.0.1;        }        # 将PHP脚本传递给正在侦听的FastCGI服务器127.0.0.1:9000        location ~ \.php$ {            root           html;            fastcgi_pass   127.0.0.1:9000;            fastcgi_index  index.php;            fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;            include        fastcgi_params;        }        # 如果Apache的文档根目录与nginx的文档根目录一致，则拒绝对.htaccess文件的访问        location ~ /\.ht {            deny  all;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http块配置中的server块配置2【自身】"><a href="#http块配置中的server块配置2【自身】" class="headerlink" title="http块配置中的server块配置2【自身】"></a>http块配置中的server块配置2【自身】</h2><pre class="line-numbers language-conf"><code class="language-conf">    # 另一个虚拟主机混合使用基于IP、name、端口的配置    server {        listen       8000;        listen       somename:8080;        server_name  somename  alias  another.alias;        location / {            root   html;            index  index.html index.htm;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http块配置中的server块配置3【自身】"><a href="#http块配置中的server块配置3【自身】" class="headerlink" title="http块配置中的server块配置3【自身】"></a>http块配置中的server块配置3【自身】</h2><pre class="line-numbers language-conf"><code class="language-conf">    # HTTPS服务    server {        listen       443 ssl;        server_name  localhost;        ssl_certificate      cert.pem;        ssl_certificate_key  cert.key;        ssl_session_cache    shared:SSL:1m;        ssl_session_timeout  5m;        ssl_ciphers  HIGH:!aNULL:!MD5;        ssl_prefer_server_ciphers  on;        location / {            root   html;            index  index.html index.htm;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105583416&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nginx基本结构分析&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://lewis.qi.tk/categories/Linux/"/>
    
    
      <category term="nginx" scheme="http://lewis.qi.tk/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Windows---nginx</title>
    <link href="http://lewis.qi.tk/2020/05/16/Windows-nginx/"/>
    <id>http://lewis.qi.tk/2020/05/16/Windows-nginx/</id>
    <published>2020-05-16T11:25:57.000Z</published>
    <updated>2020-05-16T11:30:36.836Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105577092" target="_blank" rel="noopener">Windows—nginx</a></p><h2 id="Windows版nginx"><a href="#Windows版nginx" class="headerlink" title="Windows版nginx"></a>Windows版nginx</h2><h3 id="1、Windows常用命令：【在安装目录下打开cmd】"><a href="#1、Windows常用命令：【在安装目录下打开cmd】" class="headerlink" title="1、Windows常用命令：【在安装目录下打开cmd】"></a>1、Windows常用命令：【在安装目录下打开cmd】</h3><ul><li>安装目录<ul><li><code>D:\nginx\nginx-1.16.1</code></li></ul></li><li>启动nginx【我已默认开机自启】<ul><li><code>start nginx</code></li></ul></li><li>快速关闭nginx<ul><li><code>nginx.exe -s stop</code></li></ul></li><li>平稳关闭nginx<ul><li><code>nginx.exe -s quit</code></li></ul></li><li><strong>重启：如果更改配置，重新加载配置指令</strong><ul><li><code>nginx.exe -s reload</code></li></ul></li><li>重新打开日志文件<ul><li><code>nginx.exe -s reopen</code></li></ul></li><li>为nginx指定一个配置文件<ul><li><code>nginx.exe -s filename</code></li></ul></li><li>不运行nginx，仅测试nginx配置文件<ul><li><code>nginx.exe -t</code></li></ul></li><li>查看nginx版本<ul><li><code>nginx -v</code></li></ul></li><li>查看nginx版本和编译器版本和配置参数<ul><li><code>nginx -V</code></li></ul></li></ul><h3 id="2、不想每次敲命令，在安装目录下配置启动批处理文件"><a href="#2、不想每次敲命令，在安装目录下配置启动批处理文件" class="headerlink" title="2、不想每次敲命令，在安装目录下配置启动批处理文件"></a>2、不想每次敲命令，在安装目录下配置<strong>启动批处理文件</strong></h3><p>startup.bat</p><pre class="line-numbers language-bat"><code class="language-bat">@echo offrem 如果启动前已经启动nginx并记录下pid文件，会kill指定进程nginx.exe -s stoprem 测试配置文件语法正确性nginx.exe -t -c conf/nginx.confrem 显示版本信息nginx.exe -vrem 按照指定配置去启动nginxnginx.exe -c conf/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、配置文件目录"><a href="#3、配置文件目录" class="headerlink" title="3、配置文件目录"></a>3、配置文件目录</h3><ul><li>安装目录<ul><li>D:\nginx\nginx-1.16.1</li><li><code>conf</code><ul><li><code>fastcgi.conf</code></li><li><code>fastcgi_params</code></li><li><code>mime.types</code></li><li><code>nginx.conf</code></li></ul></li><li><code>contrib</code></li><li><code>docs</code></li><li><code>html</code><ul><li><code>50x.html</code></li><li><code>index.html</code></li></ul></li><li><code>logs</code><ul><li><code>access.log</code></li><li><code>error.log</code></li><li><code>nginx.pid</code></li></ul></li><li><code>temp</code></li><li><code>nginx.exe</code></li></ul></li></ul><h3 id="4、Windows版应用【注意，不管什么系统，nginx的路径都是-】"><a href="#4、Windows版应用【注意，不管什么系统，nginx的路径都是-】" class="headerlink" title="4、Windows版应用【注意，不管什么系统，nginx的路径都是/】"></a>4、Windows版应用【注意，不管什么系统，nginx的路径都是<code>/</code>】</h3><h3 id="4-1、静态资源"><a href="#4-1、静态资源" class="headerlink" title="4.1、静态资源"></a>4.1、静态资源</h3><p>在<code>D:\nginx\nginx-1.16.1</code>目录下直接新建文件夹<code>static</code></p><p>例如一个完整的简单项目目录,项目名<code>Confession</code></p><pre class="line-numbers language-txt"><code class="language-txt">Confession/|+- css/|+- images/|+- js/|+ index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在nginx中的静态目录</p><pre class="line-numbers language-txt"><code class="language-txt">static/Confession/|+- css/|+- images/|+- js/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在server块的location块中设置root路径<code>D:/nginx/nginx-1.16.1/static/Confession</code></li><li>运行<ul><li><code>start nginx</code></li></ul></li><li>访问设置好后的项目静态资源<ul><li><code>localhost/images/1.gif</code></li></ul></li><li>重启<ul><li><code>nginx.exe -s reload</code></li></ul></li><li>关闭<ul><li><code>nginx.exe -s quit</code></li></ul></li></ul><p>nginx.conf</p><pre class="line-numbers language-conf"><code class="language-conf">location / {            root   D:/nginx/nginx-1.16.1/static/Confession;            index  index.html index.htm;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200417115104756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDYyNTg2,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="4-2、反向代理"><a href="#4-2、反向代理" class="headerlink" title="4.2、反向代理"></a>4.2、反向代理</h3><p>当用户发送请求，通过反向代理配置，将请求转发到指定的服务器上</p><p>需要配置一个tomcat</p><p>分析：</p><ul><li>location块中的root<ul><li>表示当匹配到这个请求路径时，将会在这个文件夹内寻找相应的文件</li></ul></li><li>location块中的index<ul><li>表示当没有指定主页是，默认选择这个文件</li><li>可以有多个指定主页，并按顺序加载，如果第一个不存在，则找第二个，以此类推</li></ul></li><li>server块中的error_page<ul><li>表示代表错误的页面</li></ul></li><li>访问路径server_name  <ul><li><code>localhost</code></li></ul></li><li>反向代理配置proxy_pass<ul><li>代表代理路径</li><li>当我们访问localhost时会被nginx转发到<code>localhost:8080</code>上</li></ul></li></ul><p>实验：</p><ul><li>安装apache-tomcat-9.0.34<ul><li><code>D:\nginx\apache-tomcat-9.0.34</code></li></ul></li><li>在<code>D:\nginx\apache-tomcat-9.0.34\webapps\ROOT</code>目录下加静态资源<ul><li>写demo.html</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动apache-tomcat<ul><li>找到D:\nginx\apache-tomcat-9.0.34\bin下</li><li>双击startup.bat运行</li><li>双击shutdown.bat关闭</li><li>或者直接双击tomcat9.exe</li></ul></li><li>运行<ul><li><code>start nginx</code></li></ul></li><li>访问当前<ul><li><code>localhost</code></li><li><code>localhost/demo.html</code></li></ul></li><li>访问<strong>转发</strong>设置好后的项目静态资源<ul><li><code>localhost:8080</code></li><li><code>localhost:8080/demo.html</code></li></ul></li><li>重启<ul><li><code>nginx.exe -s reload</code></li></ul></li><li>关闭<ul><li><code>nginx.exe -s quit</code></li></ul></li></ul><p>nginx.conf</p><pre class="line-numbers language-conf"><code class="language-conf">server {        listen       80;        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            proxy_pass localhost:8080;            index  index.html index.htm;        }        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3、动静分离"><a href="#4-3、动静分离" class="headerlink" title="4.3、动静分离"></a>4.3、动静分离</h3><h3 id="4-4、集群–负载均衡"><a href="#4-4、集群–负载均衡" class="headerlink" title="4.4、集群–负载均衡"></a>4.4、集群–负载均衡</h3><p>同一个业务部署在多个服务器上<br>即一个应用程序部署到多服务器上，通过负载均衡来调优选择哪台服务器去执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105577092&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows—nginx&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="Liunx" scheme="http://lewis.qi.tk/categories/Liunx/"/>
    
    
      <category term="nginx" scheme="http://lewis.qi.tk/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>centos6和8---keepalived.conf+高可用集群配置</title>
    <link href="http://lewis.qi.tk/2020/05/16/centos6%E5%92%8C8-keepalived-conf-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
    <id>http://lewis.qi.tk/2020/05/16/centos6%E5%92%8C8-keepalived-conf-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</id>
    <published>2020-05-16T11:25:39.000Z</published>
    <updated>2020-05-16T11:29:09.908Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105576919" target="_blank" rel="noopener">centos6和8—keepalived.conf+高可用集群配置</a></p><p>keepalived.conf【centos8】</p><pre class="line-numbers language-conf"><code class="language-conf">! Configuration File for keepalivedglobal_defs {               notification_email {     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   }   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server 192.168.200.1   smtp_connect_timeout 30   router_id LVS_DEVEL   vrrp_skip_check_adv_addr   vrrp_strict   vrrp_garp_interval 0   vrrp_gna_interval 0}vrrp_instance VI_1 {    state MASTER    interface eth0    virtual_router_id 51    priority 100    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {        192.168.200.16        192.168.200.17        192.168.200.18    }}virtual_server 192.168.200.100 443 {    delay_loop 6    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 192.168.201.100 443 {        weight 1        SSL_GET {            url {              path /              digest ff20ad2481f97b1754ef3e12ecd3a9cc            }            url {              path /mrtg/              digest 9b3a0c85a887a256d6939da88aabd8cd            }            connect_timeout 3            retry 3            delay_before_retry 3        }    }}virtual_server 10.10.10.2 1358 {    delay_loop 6    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    sorry_server 192.168.200.200 1358    real_server 192.168.200.2 1358 {        weight 1        HTTP_GET {            url {              path /testurl/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {              path /testurl2/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {              path /testurl3/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            connect_timeout 3            retry 3            delay_before_retry 3        }    }    real_server 192.168.200.3 1358 {        weight 1        HTTP_GET {            url {              path /testurl/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334c            }            url {              path /testurl2/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334c            }            connect_timeout 3            retry 3            delay_before_retry 3        }    }}virtual_server 10.10.10.3 1358 {    delay_loop 3    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 192.168.200.4 1358 {        weight 1        HTTP_GET {            url {              path /testurl/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {              path /testurl2/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {              path /testurl3/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            connect_timeout 3            retry 3            delay_before_retry 3        }    }    real_server 192.168.200.5 1358 {        weight 1        HTTP_GET {            url {              path /testurl/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {              path /testurl2/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {              path /testurl3/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            connect_timeout 3            retry 3            delay_before_retry 3        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keepalived.conf【centos6】</p><pre class="line-numbers language-conf"><code class="language-conf">! Configuration File for keepalivedglobal_defs {   notification_email {     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   }   notification_email_from Alexandre.Cassen@firewall.loc   smtp_server 192.168.200.1   smtp_connect_timeout 30   router_id LVS_DEVEL}vrrp_instance VI_1 {    state MASTER    interface eth0    virtual_router_id 51    priority 100    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {        192.168.200.16        192.168.200.17        192.168.200.18    }}virtual_server 192.168.200.100 443 {    delay_loop 6    lb_algo rr    lb_kind NAT    nat_mask 255.255.255.0    persistence_timeout 50    protocol TCP    real_server 192.168.201.100 443 {        weight 1        SSL_GET {            url {              path /              digest ff20ad2481f97b1754ef3e12ecd3a9cc            }            url {              path /mrtg/              digest 9b3a0c85a887a256d6939da88aabd8cd            }            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        }    }}virtual_server 10.10.10.2 1358 {    delay_loop 6    lb_algo rr     lb_kind NAT    persistence_timeout 50    protocol TCP    sorry_server 192.168.200.200 1358    real_server 192.168.200.2 1358 {        weight 1        HTTP_GET {            url {               path /testurl/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {               path /testurl2/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {               path /testurl3/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        }    }    real_server 192.168.200.3 1358 {        weight 1        HTTP_GET {            url {               path /testurl/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334c            }            url {               path /testurl2/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334c            }            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        }    }}virtual_server 10.10.10.3 1358 {    delay_loop 3    lb_algo rr     lb_kind NAT    nat_mask 255.255.255.0    persistence_timeout 50    protocol TCP    real_server 192.168.200.4 1358 {        weight 1        HTTP_GET {            url {               path /testurl/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {               path /testurl2/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {               path /testurl3/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        }    }    real_server 192.168.200.5 1358 {        weight 1        HTTP_GET {            url {               path /testurl/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {               path /testurl2/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            url {               path /testurl3/test.jsp              digest 640205b7b0fc66c1ea91c463fac6334d            }            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两个高可用集群centos6和8"><a href="#两个高可用集群centos6和8" class="headerlink" title="两个高可用集群centos6和8"></a>两个高可用集群centos6和8</h2><ul><li>centos8主服务器/etc/keepalived/keepalived.conf</li></ul><p>keepalived.conf【8】</p><pre class="line-numbers language-conf"><code class="language-conf">global_defs {                 #全局定义    notification_email {        acassen@firewall.loc        failover@firewall.loc        sysadmin@firewall.loc    }    notification_email_from Alexandre.Cassen@firewall.loc    smtp_server 192.168.xxx.xxx  #当前虚拟机ip    smtp_connect_timeout 30    router_id LVS_DEVEL}vrrp_script chk_http_port {     #自定义的检测脚本    script "/usr/local/src/nginx_check.sh"  #脚本路径    interval 2                  #（检测脚本执行的间隔）    weight 2}vrrp_instance VI_1 {    state MASTER         #  MASTER 是主服务器    interface eth0       #  主服务器的网卡eth0    virtual_router_id 51 # 主、备机的 virtual_router_id 必须相同    priority 100         # 主、备机取不同的优先级，主机值较大，备份机值较小    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {        192.168.xxx.50          # VRRP H 虚拟地址    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>centos6从服务器/etc/keepalived/keepalived.conf</li></ul><p>keepalived.conf【6】</p><pre class="line-numbers language-conf"><code class="language-conf">global_defs {                 #全局定义    notification_email {        acassen@firewall.loc        failover@firewall.loc        sysadmin@firewall.loc    }    notification_email_from Alexandre.Cassen@firewall.loc    smtp_server 192.168.xxx.xxx   #当前虚拟机ip    smtp_connect_timeout 30    router_id LVS_DEVEL}vrrp_script chk_http_port {     #自定义的检测脚本    script "/usr/local/src/nginx_check.sh"  #脚本路径    interval 2                  #（检测脚本执行的间隔）    weight 2}vrrp_instance VI_1 {    state BACKUP         #  BACKUP 是从服务器    interface eth0       #  主服务器的网卡eth0    virtual_router_id 51 # 主、备机的 virtual_router_id 必须相同    priority 90         # 主、备机取不同的优先级，主机值较大，备份机值较小    advert_int 1    authentication {        auth_type PASS        auth_pass 1111    }    virtual_ipaddress {        192.168.xxx.50          # VRRP H 虚拟地址    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加自定义的检测脚本<ul><li>路径：<code>/usr/local/src/nginx_check.sh</code></li></ul></li></ul><p>nginx_check.sh</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bashA=`ps -C nginx –no-header |wc -l`if [ $A -eq 0 ];then /usr/local/nginx/sbin/nginx sleep 2 if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then killall keepalived fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105576919&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;centos6和8—keepalived.conf+高
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://lewis.qi.tk/categories/Linux/"/>
    
    
      <category term="centos6" scheme="http://lewis.qi.tk/tags/centos6/"/>
    
      <category term="centos8" scheme="http://lewis.qi.tk/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>centos6下的nginx安装</title>
    <link href="http://lewis.qi.tk/2020/05/16/centos6%E4%B8%8B%E7%9A%84nginx%E5%AE%89%E8%A3%85/"/>
    <id>http://lewis.qi.tk/2020/05/16/centos6%E4%B8%8B%E7%9A%84nginx%E5%AE%89%E8%A3%85/</id>
    <published>2020-05-16T11:25:22.000Z</published>
    <updated>2020-05-16T11:27:37.039Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105576865" target="_blank" rel="noopener">centos6下的nginx安装</a></p><p>安装pcre依赖</p><ul><li><code>cd /usr/src</code></li><li><code>ls</code></li><li><code>tar -xvf pcre-8.44.tar.gz</code>  【解压】</li><li><code>cd pcre-8.44/</code></li><li><code>./configure</code> 【编译检查】</li><li><code>make &amp;&amp; make install</code> 【编译并安装】</li><li><code>pcre-config --version</code> 【看版本】</li></ul><p>安装openssl、zlib【当前目录】</p><ul><li><code>yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</code></li></ul><p>安装nginx</p><ul><li><code>cd ..</code>【root@www src】</li><li><code>tar -xvf nginx-1.16.1.tar.gz</code></li><li><code>cd nginx-1.16.1/</code></li><li><code>./configure</code> 【编译检查】</li><li><code>make &amp;&amp; make install</code> 【编译并安装】</li></ul><p>添加防火墙端口</p><ul><li>`vim /etc/sysconfig/iptables</li><li><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</code></li><li><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</code></li><li><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8081 -j ACCEPT</code></li><li><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 9001 -j ACCEPT</code></li></ul><p>设置防火墙[root@localhost ~]</p><ul><li>查看防火墙状态<ul><li><code>service iptables status</code></li></ul></li><li>停止防火墙<ul><li><code>service iptables stop</code></li></ul></li><li>启动防火墙<ul><li><code>service iptables start</code></li></ul></li><li>重启防火墙<ul><li><code>service iptables restart</code></li></ul></li><li>永久关闭防火墙<ul><li><code>chkconfig iptables off</code></li></ul></li><li>永久关闭后重启<ul><li><code>chkconfig iptables on</code></li></ul></li></ul><p>$\color{red}启动nginx$</p><ul><li><code>ls -l libpcre.so*</code></li><li><code>ln -s /usr/local/lib/libpcre.so.1.2.10 libpcre.so.1</code></li><li><code>export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH</code></li><li><code>cd /usr/local/nginx/sbin/</code></li><li><code>ls</code></li><li><code>[root@www sbin]# ./nginx</code></li></ul><p>再查看进程</p><ul><li><code>[root@www sbin]# ps -ef | grep nginx</code></li></ul><p>在LIunx中输入IP地址和端口，测试访问</p><ul><li><code>localhost</code></li></ul><p>在Windows中输入IP地址和端口，测试访问</p><ul><li><code>192.168.186.128</code></li></ul><p>$\color{red}查看nginx.conf$</p><ul><li><code>cd /usr/local/nginx/conf/</code></li><li><code>ls</code></li><li><code>[root@www conf]# vi nginx.conf</code></li></ul><ul><li>启动keepalived<ul><li><code>/etc/init.d/keepalived start</code></li></ul></li><li>查看keepalived的进程<ul><li><code>ps -ef | grep keepalived</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105576865&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;centos6下的nginx安装&lt;/a&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://lewis.qi.tk/categories/Linux/"/>
    
    
      <category term="centos6" scheme="http://lewis.qi.tk/tags/centos6/"/>
    
  </entry>
  
  <entry>
    <title>用fiddler简单抓包</title>
    <link href="http://lewis.qi.tk/2020/05/16/%E7%94%A8fiddler%E7%AE%80%E5%8D%95%E6%8A%93%E5%8C%85/"/>
    <id>http://lewis.qi.tk/2020/05/16/%E7%94%A8fiddler%E7%AE%80%E5%8D%95%E6%8A%93%E5%8C%85/</id>
    <published>2020-05-16T11:21:52.000Z</published>
    <updated>2020-05-16T11:23:56.628Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105606004" target="_blank" rel="noopener">用fiddler简单抓包</a></p><h1 id="命令行工具QuickExec"><a href="#命令行工具QuickExec" class="headerlink" title="命令行工具QuickExec"></a>命令行工具QuickExec</h1><p>左下角黑色的QuickExec</p><ul><li><code>help</code>  <ul><li>打开官方的使用页面介绍</li></ul></li><li><code>select</code>  <ul><li>选择会话的命令</li></ul></li><li><code>cls</code><ul><li>清屏</li></ul></li><li><code>?.png</code><ul><li>用来选择png后缀的图片</li></ul></li><li><code>bpu</code><ul><li>截获request</li></ul></li></ul><p>快捷键</p><ul><li>Ctrl+x 清屏</li></ul><h2 id="抓包https设置"><a href="#抓包https设置" class="headerlink" title="抓包https设置"></a>抓包https设置</h2><p>Tools-》Options-》点击https标签-》都勾选-》下载https根证书</p><p>设置火狐的地理，变成系统自动代理</p><h2 id="过滤会话filters请求选项卡"><a href="#过滤会话filters请求选项卡" class="headerlink" title="过滤会话filters请求选项卡"></a>过滤会话filters请求选项卡</h2><p>Hosts选择过滤方式</p><ul><li>1、Filters选项卡</li><li>2、use filter</li></ul><h3 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h3><ul><li>3、no zone filter过滤方式【少用】<ul><li>show only intranet hosts【只显示内网hosts】</li><li>show only internet hosts【只显示外网hosts】</li></ul></li><li>4、no host filter过滤方式【多用】<ul><li>hide the following hosts【隐藏以下hosts】</li><li>show only the following hosts【只显示以下hosts，重要】</li><li>flag the following hosts【标记以下hosts，在左侧session中会加粗】</li></ul></li></ul><h3 id="client-process【根据进程选择过滤请求】"><a href="#client-process【根据进程选择过滤请求】" class="headerlink" title="client process【根据进程选择过滤请求】"></a>client process【根据进程选择过滤请求】</h3><ul><li>5、show only traffic form【只选择来自后面选进程的请求】</li><li>6、Show only Internet Explorer traffic【只选择来自IE的请求】</li><li>7、Hide traffic from Service Host【隐藏来自service host的请求】</li></ul><h3 id="request-headers-【根据请求头进行过滤】"><a href="#request-headers-【根据请求头进行过滤】" class="headerlink" title="request headers 【根据请求头进行过滤】"></a>request headers 【根据请求头进行过滤】</h3><ul><li>8、show only if URL contains 【只显示URL包含什么东西，多个则空格分开】</li><li>9、Hide if URL contains【隐藏URL包含什么东西，多个则空格分开】</li><li>10、Flag requests with headers【加粗显示包含指定的HTTP请求头类型名】</li><li>11、Delete request headers【删除指定的HTTP请求头类型名】】</li><li>12、Set request header【创建一个指定名称和值的HTTP请求头/更新HTTP请求头为指定值】</li></ul><h3 id="breakpoints【断点】"><a href="#breakpoints【断点】" class="headerlink" title="breakpoints【断点】"></a>breakpoints【断点】</h3><ul><li>13、Break request on POST【针对所有post请求设置断点】</li><li>14、Break request on GET with query string【针对所有get请求设置断点，包含params参数】</li><li>15、Break on XMLHttpRequest【通过xmlhttprequest对象发送的请求设置断点，是否含有x-requested-with和x-download-initiator】</li><li>16、Break response on Content- Type【响应头content-type中包含指定的文本设置断点】</li></ul><h3 id="Response-Status-Code【使用请求状态码】"><a href="#Response-Status-Code【使用请求状态码】" class="headerlink" title="Response Status Code【使用请求状态码】"></a>Response Status Code【使用请求状态码】</h3><ul><li>17、Hide success (2xx)【隐藏状态码200-299的响应】</li><li>18、Hide non-2xx【隐藏所有非状态码200-299的响应】</li><li>19、Hide Authentication demands(401,407)【隐藏状态码400,407的响应】</li><li>20、Hide redirects (300,301,302,303,307)【隐藏状态码300-303,307的重定向响应】</li><li>21、Hide Not Modified (304)【隐藏状态码304的响应】</li></ul><h3 id="actions运行"><a href="#actions运行" class="headerlink" title="actions运行"></a>actions运行</h3><ul><li>run filterset now</li></ul><h2 id="composer选项卡"><a href="#composer选项卡" class="headerlink" title="composer选项卡"></a>composer选项卡</h2><p>把会话拖入后直接改</p><h2 id="设置断点修改Request请求"><a href="#设置断点修改Request请求" class="headerlink" title="设置断点修改Request请求"></a>设置断点修改Request请求</h2><p>方法一：</p><ul><li>中断所有的会话<ul><li><code>Rules</code> -&gt; <code>Automatic Breakpoint</code>  -&gt; <code>Before Requests</code></li></ul></li><li>消除命令<ul><li><code>Rules</code> -&gt; <code>Automatic Breakpoint</code>  -&gt; <code>Disabled</code></li></ul></li></ul><p>方法二：</p><ul><li>只会中断<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><ul><li>在命令行中输入命令<code>bpu www.baidu.com</code></li></ul></li><li>消除命令<ul><li>在命令行中输入命令 <code>bpu</code></li></ul></li></ul><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><ul><li>1、打开登录界面  <code>http://passport.cnblogs.com/login.aspx</code></li><li>2、打开Fiddler,  在命令行中输入<ul><li><code>bpu http://passport.cnblogs.com/login.aspx</code></li></ul></li><li>3、输入<strong>错误</strong>的用户名和密码 点击登录</li><li>4、 Fiddler 能中断这次会话，选择被中断的会话，<ul><li>点击<code>Inspectors tab</code> 下的 <code>WebForms tab</code></li><li>修改用户名密码，然后点击<code>Run to Completion</code></li></ul></li><li>5、结果是<strong>正确</strong>登录</li></ul><h3 id="实例2【请求报文的修改】"><a href="#实例2【请求报文的修改】" class="headerlink" title="实例2【请求报文的修改】"></a>实例2【请求报文的修改】</h3><ul><li>1、进入<code>http://ask.testfan.cn/</code>，点击登录，打开<code>http://ask.testfan.cn/login</code>登录页面</li><li>2、中断所有的会话<ul><li><code>Rules</code> -&gt; <code>Automatic Breakpoint</code>  -&gt; <code>Before Requests</code></li></ul></li><li>3、会跳出相应链接<ul><li>在<code>inspectors</code>中找到row的文本显示形式，可以直接拦截请求修改后</li><li>点击<code>run to completion</code>再提交</li></ul></li><li>4.消除命令<ul><li><code>Rules</code> -&gt; <code>Automatic Breakpoint</code>  -&gt; <code>Disabled</code></li></ul></li></ul><h2 id="设置断点修改Response响应"><a href="#设置断点修改Response响应" class="headerlink" title="设置断点修改Response响应"></a>设置断点修改Response响应</h2><p>方法一：</p><ul><li>中断所有的会话<ul><li><code>Rules</code>-&gt; <code>Automatic Breakpoint</code>  -&gt; <code>After Response</code></li></ul></li><li>消除命令<ul><li><code>Rules</code>-&gt; <code>Automatic Breakpoint</code>  -&gt; <code>Disabled</code></li></ul></li></ul><p>方法二：</p><ul><li>只会中断<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><ul><li>在命令行中输入命令<code>bpafter www.baidu.com</code></li></ul></li><li>消除命令<ul><li>在命令行中输入命令 <code>bpafter</code></li></ul></li></ul><h3 id="实例1【响应报文的修改】"><a href="#实例1【响应报文的修改】" class="headerlink" title="实例1【响应报文的修改】"></a>实例1【响应报文的修改】</h3><ul><li>1、进入<code>http://conf.wsm.360.cn/</code>，显示的是nginx的错误页面</li><li>2、中断所有的会话<ul><li><code>Rules</code> -&gt; <code>Automatic Breakpoint</code>  -&gt; <code>After Requests</code></li></ul></li><li>3、会跳出相应链接<ul><li>再在第二个框下，点击row修改，再发送</li><li>点击<code>run to completion</code>再提交</li></ul></li><li>4、如果还想把响应报文返回一些信息<ul><li>可以在choose response中选择响应返回的状态码</li><li>如200_diddlergif.dat</li><li>200_simplehtml.dat</li></ul></li><li>4.消除命令<ul><li><code>Rules</code> -&gt; <code>Automatic Breakpoint</code>  -&gt; <code>Disabled</code></li></ul></li></ul><pre class="line-numbers language-txt"><code class="language-txt">HTTP/1.1 403 ForbiddenServer: nginx/1.9.15Date: Sat, 18 Apr 2020 11:32:55 GMTContent-Type: text/htmlConnection: closeContent-Length: 169<html><head><title>403 Forbidden</title></head><body bgcolor="white"><center><h1>403 Forbidden</h1></center><hr><center>nginx/1.9.15</center></body></html>改成：HTTP/1.1 403 ForbiddenServer: nginx/1.9.15Date: Sat, 18 Apr 2020 11:32:55 GMTContent-Type: text/htmlConnection: closeContent-Length: 169<html><head><title>403 Forbidden这就是个错误</title></head><body bgcolor="white"><center><h1>403 Forbidden</h1></center><hr><center>nginx/9.9.9</center></body></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例2【响应报文的修改】"><a href="#实例2【响应报文的修改】" class="headerlink" title="实例2【响应报文的修改】"></a>实例2【响应报文的修改】</h3><ul><li>1、进入<code>https://t.qianzhan.com/caijing/detail/200418-4a7c3321.html</code>，显示的是页面</li><li>2、中断所有的会话<ul><li><code>Rules</code> -&gt; <code>Automatic Breakpoint</code>  -&gt; <code>After Requests</code></li></ul></li><li>3、会跳出相应链接<ul><li>再在第二个框下，点击row修改，再发送</li><li>点击<code>run to completion</code>再提交</li></ul></li><li>4、如果还想把响应报文返回一些信息<ul><li>可以在choose response中选择响应返回的状态码</li><li>如200_diddlergif.dat</li><li>200_simplehtml.dat</li></ul></li><li>4.消除命令<ul><li><code>Rules</code> -&gt; <code>Automatic Breakpoint</code>  -&gt; <code>Disabled</code></li></ul></li></ul><pre class="line-numbers language-txt"><code class="language-txt">HTTP/1.1 200 OKDate: Sat, 18 Apr 2020 12:05:28 GMTContent-Type: text/html; charset=utf-8Content-Length: 62409Connection: keep-aliveServer: nginxCache-Control: privateLast-Modified: Sat, 18 Apr 2020 12:00:00 GMTX-NWS-UUID-VERIFY: cbe94da3f4fec551e970bbf78f743f8bVary: Accept-EncodingX-NWS-LOG-UUID: 707fa9f9-af2f-4b06-9b04-065632bfc552X-Daa-Tunnel: hop_count=3X-Cache-Lookup: Hit From UpstreamX-Cache-Lookup: Hit From Inner ClusterX-Cache-Lookup: Hit From Upstream<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <meta name="applicable-device" content="pc" />    <title>张文宏：中国做的是饱和式的诊断，世界上很多国家还做不到_产经_前瞻经济学人</title>    <meta name="Keywords" content="张文宏,饱和式诊断" />    <meta name="Description" content="4月18日，中国和新加坡医疗专家就新冠疫情交流防疫经验，上海市新冠肺炎医疗救治专家组组长张文宏表示，中国做的是饱和式的诊断，世界上很多国家还做不到的。" />    <link rel="apple-touch-icon-precomposed" href="https://img1.qianzhan.com/img/apple-touch-icon.png" />    <link rel="stylesheet" type="text/css" href="https://img1.qianzhan.com/2017/css/common.css?v=20190930" />    <link rel="stylesheet" type="text/css" href="https://img1.qianzhan.com/2017/css/art.css?v=20190113" />    <script type="text/javascript" src="https://img1.qianzhan.com/scripts/jquery-1.8.2.min.2017.js?v=20170401" charset="UTF-8"></script>    <meta name="mobile-agent" content="format=xhtml;url=//xw.qianzhan.com/t/detail/556/200418-4a7c3321.html?r=1" />    <link rel="alternate" media="only screen and(max-width: 760px)" href="//xw.qianzhan.com/t/detail/556/200418-4a7c3321.html?r=1" />    <script type="text/javascript">        if (top.location != self.location) {            top.location = self.location.href;        }        if (window.location.href.indexOf("?from=xw") > 0) {            sDialog.setCookie('computer', '1', 30, '.qianzhan.com');        }        if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) {            var computer = sDialog.getCookie('computer');            if (computer!="1") {                try {                    if (/Android|Windows Phone|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {                        window.location.href = '//xw.qianzhan.com/t/detail/556/200418-4a7c3321.html?r=1';                    }                } catch (e) { }            }        }    </script></head>改成：HTTP/1.1 200 OKDate: Sat, 18 Apr 2020 12:05:28 GMTContent-Type: text/html; charset=utf-8Content-Length: 62409Connection: keep-aliveServer: nginxCache-Control: privateLast-Modified: Sat, 18 Apr 2020 12:00:00 GMTX-NWS-UUID-VERIFY: cbe94da3f4fec551e970bbf78f743f8bVary: Accept-EncodingX-NWS-LOG-UUID: 707fa9f9-af2f-4b06-9b04-065632bfc552X-Daa-Tunnel: hop_count=3X-Cache-Lookup: Hit From UpstreamX-Cache-Lookup: Hit From Inner ClusterX-Cache-Lookup: Hit From Upstream<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <meta name="applicable-device" content="pc" />    <title>张文宏：对对对</title>    <meta name="Keywords" content="张文宏,饱和式诊断" />    <meta name="Description" content="4月18日，中国和新加坡医疗专家就新冠疫情交流防疫经验，上海市新冠肺炎医疗救治专家组组长张文宏表示，中国做的是饱和式的诊断，世界上很多国家还做不到的。" />    <link rel="apple-touch-icon-precomposed" href="https://img1.qianzhan.com/img/apple-touch-icon.png" />    <link rel="stylesheet" type="text/css" href="https://img1.qianzhan.com/2017/css/common.css?v=20190930" />    <link rel="stylesheet" type="text/css" href="https://img1.qianzhan.com/2017/css/art.css?v=20190113" />    <script type="text/javascript" src="https://img1.qianzhan.com/scripts/jquery-1.8.2.min.2017.js?v=20170401" charset="UTF-8"></script>    <meta name="mobile-agent" content="format=xhtml;url=//xw.qianzhan.com/t/detail/556/200418-4a7c3321.html?r=1" />    <link rel="alternate" media="only screen and(max-width: 760px)" href="//xw.qianzhan.com/t/detail/556/200418-4a7c3321.html?r=1" />    <script type="text/javascript">        if (top.location != self.location) {            top.location = self.location.href;        }        if (window.location.href.indexOf("?from=xw") > 0) {            sDialog.setCookie('computer', '1', 30, '.qianzhan.com');        }        if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) {            var computer = sDialog.getCookie('computer');            if (computer!="1") {                try {                    if (/Android|Windows Phone|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {                        window.location.href = '//xw.qianzhan.com/t/detail/556/200418-4a7c3321.html?r=1';                    }                } catch (e) { }            }        }    </script></head><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建AutoResponder规则"><a href="#创建AutoResponder规则" class="headerlink" title="创建AutoResponder规则"></a>创建AutoResponder规则</h2><p>允许你从本地返回文件，而不用将http request 发送到服务器上</p><ul><li>1、打开百度，把logo图片保存到本地，并且对图片做些修改。</li><li>2、打开Fiddler 找到logo图片的会话，<code>https://www.baidu.com/img/bd_logo1.png</code>,把这个会话拖到<code>AutoResponer Tab</code>下</li><li>3 、选择AutoResponder选项卡【三个都选】<ul><li><code>Enable automatic reaponses</code>【是否启用自动匹配的规则】</li><li><code>Unmatched requests passthrough</code>【没有匹配搭配规则默认通过】</li><li><code>Enable Latency</code>【是否启用延迟】</li></ul></li><li>4、add rules</li><li>5、在<code>Rule Editor</code> 下面选择<ul><li><code>Find a file...</code> 选择本地保存的图片</li><li>最后点击Save 保存下。</li></ul></li><li>6、再打开百度, 你会看到首页的图片用的是本地的</li></ul><p>一些内置的bat的rules，存放在D:\fiddler4\ResponseTemplates</p><p>可以自己写规则,通用的匹配规则如下：</p><ul><li>无前缀<ul><li>表示基本搜索，搜索到字符串就匹配，只要match中包含了rules的字符串即可</li></ul></li><li>前缀为“<code>EXACT</code>”<ul><li>表示完全匹配，大小写敏感</li></ul></li><li>前缀为“<code>NOT</code>”<ul><li>表示发现就不匹配</li></ul></li><li>前缀为“<code>REGEX</code>”<ul><li>表示正则匹配</li><li><code>.+</code> ：匹配1个或多个字符<ul><li>如：<code>regex:.+jpg</code>，表示包含有jpg字符串且以jpg结尾即匹配</li></ul></li><li><code>.*</code> : 匹配0个或多个字符<ul><li>如：<code>regex:.+.jpg.*</code>，表示包含有.jpg字符串即匹配</li></ul></li><li><code>^</code> ： 匹配字符串开始位置</li><li><code>$</code> ： 匹配字符串结束位置<ul><li>如：<code>regex:(?insx).+.(jpg|png|bmp)$</code>，表示包含以jpg或png或bmp字符串结尾的，不区分大小写，且是单行的即匹配</li></ul></li></ul></li><li>前缀为<code>regex:(?insx)</code>的匹配方式<ul><li><code>i</code>：不区分大小写</li><li><code>n</code>：指定唯一有效的捕获是显示命名或编号的形式</li><li><code>s</code>：单行</li><li><code>x</code>：空格</li></ul></li></ul><p>规则实例</p><pre class="line-numbers language-txt"><code class="language-txt">- EXACT:http://www.baidu.com- regex:(?inx).+\.jpg$  #匹配以jpg结尾的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="实例1【更改图片】"><a href="#实例1【更改图片】" class="headerlink" title="实例1【更改图片】"></a>实例1【更改图片】</h3><ul><li>1、进入<code>https://t.qianzhan.com/caijing/detail/200418-4a7c3321.html</code>，显示的是页面</li><li>2、找到显示图片的会话<ul><li><code>https://img3.qianzhan.com/news/202004/18/20200418-a7359eb01ab847fb_700x5000.jpg</code></li><li>inspectors选项卡中最下面栏中的Imageview可以显示图片</li></ul></li><li>3、选择AutoResponder选项卡,全选</li><li>4、add rules</li><li>5、在<code>Rule Editor</code> 下面选择<ul><li><code>Find a file...</code> 选择本地保存的图片</li><li>最后点击Save 保存下。</li></ul></li><li>6、再打开百度, 你会看到首页的图片用的是本地的</li></ul><h2 id="移动端抓包"><a href="#移动端抓包" class="headerlink" title="移动端抓包"></a>移动端抓包</h2><ul><li><p>tools -》 options -》 connectoins - 》 Allow remote computers to connect【勾选】</p></li><li><p>端口8888</p></li><li><p>cmd -》 ipconfig 【查看自己的IP地址】</p><ul><li>看无线连接</li><li>ipv4：xxx.xxx.xxx.xxx</li></ul></li><li><p>在手机上勾选手动代理</p><ul><li>输入代理服务器主机名：xxx.xxx.xxx.xxx</li><li>输入代理服务器端口：8888</li></ul></li><li><p>在手机上输入：<code>http://xxx.xxx.xxx.xxx:8888</code></p><ul><li>下载证书，显示<code>FiddlerRoot.cer</code></li><li>会输入锁屏密码</li><li>证书名称自定义为：fiddlerroot证书</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105606004&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用fiddler简单抓包&lt;/a&gt;&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
    
      <category term="渗透" scheme="http://lewis.qi.tk/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="fiddler" scheme="http://lewis.qi.tk/tags/fiddler/"/>
    
  </entry>
  
  <entry>
    <title>Liunx服务设置开机自启</title>
    <link href="http://lewis.qi.tk/2020/05/16/Liunx%E6%9C%8D%E5%8A%A1%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    <id>http://lewis.qi.tk/2020/05/16/Liunx%E6%9C%8D%E5%8A%A1%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</id>
    <published>2020-05-16T11:08:26.000Z</published>
    <updated>2020-05-16T11:20:47.402Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105884436" target="_blank" rel="noopener">Liunx服务设置开机自启</a></p><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><ul><li>init是所有进程的顶层，所有的启动脚本放置在<code>/etc/rc.d/init.d/</code>中</li><li>init始终是第一个进程（其进程编号始终为1）</li></ul><h2 id="bash脚本"><a href="#bash脚本" class="headerlink" title="bash脚本"></a>bash脚本</h2><p>第一部分</p><p>1、在系统/etc目录下</p><ul><li>可以找到rc0.d ~ rc6.d 启动文件夹，启动分为0~6一共7个级别</li></ul><p>2、rc?.d/ 中放置的是 init.d 中脚本的<strong>链接文件</strong>，命名格式如下:</p><ul><li><strong><em>/etc/rc?.d/链接文件链接到/etc/init.d/目录下的脚本</em></strong><ul><li><code>S{number}{name}</code><ul><li>S 开始的文件向脚本传递 start 参数</li></ul></li><li><code>K{number}{name}</code>【number 决定执行的顺序】<ul><li>K 开始的文件向脚本传递 stop 参数</li></ul></li></ul></li></ul><p>3、分析</p><ul><li>number 决定执行的顺序<ul><li>0代表停止</li><li>1代表单用户模式</li><li>2-5代表多用户模式</li><li>6代表重启</li></ul></li><li>查看权限和详细链接情况<ul><li>cd /etc/rc?.d/</li><li>ls -l</li></ul></li></ul><p>第二部分【脚本编写，我未来再来深究】</p><ul><li>4、在/etc/init.d/目录下<strong>编写脚本</strong>，脚本格式如下</li><li>#! /bin/sh<ul><li>这是bash脚本的头，必须要添加，是为了设置defaults的值。</li></ul></li></ul><p>这个是挂载共享文件夹的脚本名字任意 这里命名为mount</p><pre class="line-numbers language-sh"><code class="language-sh">这是bash脚本的头 必须要添加 应该是为了设置defaults的值 否则不成功#! /bin/sh### BEGIN INIT INFO# Provides: OnceDoc# Required-Start: $network $remote_fs $local_fs# Required-Stop: $network $remote_fs $local_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: start and stop node# Description: OnceDoc### END INIT INFOvmware-hgfsclient | while read folder; do  vmwpath="/mnt/hgfs/${folder}"  echo "[i] Mounting ${folder}   (${vmwpath})"  mkdir -p "${vmwpath}"  umount -f "${vmwpath}" 2>/dev/null  vmhgfs-fuse -o allow_other -o auto_unmount ".host:/${folder}" "${vmwpath}"donesleep 2s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用自启动命令"><a href="#使用自启动命令" class="headerlink" title="使用自启动命令"></a>使用自启动命令</h2><ul><li>1、添加开机自启项【xxx服务名】<ul><li>update-rc.d xxx defaults 99<ul><li>(99是启动顺序)</li><li>重启即可</li></ul></li></ul></li><li>2、查看开机启动项<ul><li>cat /etc/rc*.d</li></ul></li><li>3、移除开机启动项<ul><li>update-rc.d -f xxx remove</li></ul></li></ul><h2 id="例子：开机自启apache2"><a href="#例子：开机自启apache2" class="headerlink" title="例子：开机自启apache2"></a>例子：开机自启apache2</h2><ul><li>update-rc.d -f apache2 defaults</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105884436&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Liunx服务设置开机自启&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://lewis.qi.tk/categories/Linux/"/>
    
    
      <category term="centos6" scheme="http://lewis.qi.tk/tags/centos6/"/>
    
      <category term="centos8" scheme="http://lewis.qi.tk/tags/centos8/"/>
    
      <category term="kali" scheme="http://lewis.qi.tk/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>Liunx-centos8 yum操作+安装mysql8+安装nginx</title>
    <link href="http://lewis.qi.tk/2020/05/16/Liunx-centos8-yum%E6%93%8D%E4%BD%9C-%E5%AE%89%E8%A3%85mysql8-%E5%AE%89%E8%A3%85nginx/"/>
    <id>http://lewis.qi.tk/2020/05/16/Liunx-centos8-yum%E6%93%8D%E4%BD%9C-%E5%AE%89%E8%A3%85mysql8-%E5%AE%89%E8%A3%85nginx/</id>
    <published>2020-05-16T11:08:09.000Z</published>
    <updated>2020-05-16T11:19:09.220Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105471864" target="_blank" rel="noopener">Liunx-centos8 yum操作+安装mysql8+安装nginx</a></p><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><p>1、Yum仓库是Linux软件仓库(保存RPM包)。</p><ul><li>YUM仓库可以设置在本地（本地磁盘），也可以设置在或远端（FTP，HTTP或HTTPS）。</li></ul><p>2、RPM包是Red Hat Package Manager管理的文件， RPM包可以在Red Hat / CentOS上快速轻松地安装软件。</p><p>将yum源设置为163 yum，提升软件包安装和更新的速度</p><p>列出所有可更新的软件清单：</p><ul><li><code>yum check-update</code></li></ul><p>更新所有软件命令：</p><ul><li><code>yum update</code></li></ul><p>仅安装指定的软件命令：</p><ul><li><code>yum -y install &lt;package_name&gt;</code></li></ul><p>仅更新指定的软件命令：</p><ul><li><code>yum update &lt;package_name&gt;</code></li></ul><p>列出所有可安裝的软件清单命令：</p><ul><li><code>yum list</code></li></ul><p>删除软件包命令：</p><ul><li><code>yum remove &lt;package_name&gt;</code></li></ul><p>查找软件包 命令：</p><ul><li><code>yum search &lt;keyword&gt;</code></li></ul><p>清除缓存目录下的软件包</p><ul><li><code>yum clean packages</code></li></ul><p>清除缓存目录下的 headers</p><ul><li><code>yum clean headers</code></li></ul><h2 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h2><p>先看一下有无安装</p><ul><li><p>安装</p></li><li><p><code>yum install openssh-server</code></p></li></ul><h2 id="安装mysql8"><a href="#安装mysql8" class="headerlink" title="安装mysql8"></a>安装mysql8</h2><p>下载 关于myssql的Yum 资源包</p><ul><li><code>wget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm</code></li><li><code>rpm -Uvh mysql80-community-release-el8-1.noarch.rpm</code></li></ul><p>查看rpm包里可用mysql版本</p><ul><li><code>yum repolist all | grep mysql</code></li></ul><p>启用和禁用安装服务</p><ul><li><code>yum config-manager --enable mysql80-community</code></li><li><code>yum config-manager --disable mysql80-community</code></li></ul><p>查看所有启用状态的可安装服务</p><ul><li><code>yum repolist enabled | grep mysql</code></li></ul><p>安装mysql服务</p><ul><li><code>yum install mysql-server</code></li></ul><p>更新mysql</p><ul><li><code>yum update mysql-server</code></li></ul><p>初始化mysql数据库</p><ul><li><code>mysqld --initialize</code></li></ul><p>启动mysql</p><ul><li><code>chown mysql:mysql -R /var/lib/mysql</code></li><li><code>service mysqld start</code></li><li><code>systemctl status mysqld</code></li></ul><p>查看mysql版本</p><ul><li><code>mysql -V</code></li></ul><p>获取mysql初始密码</p><ul><li><code>grep &quot;password&quot; /var/log/mysql/mysqld.log</code></li></ul><p>登录并修改密码</p><ul><li><code>mysql -u root -p</code></li><li><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</code></li><li><code>flush privileges;</code></li><li><code>exit;</code></li></ul><p>再次登录</p><ul><li><code>mysql -u root -p</code></li></ul><p>设置远程连接</p><ul><li><code>use mysql;</code></li><li><code>update user set host = &#39;%&#39; where user = &#39;root&#39;;</code></li><li><code>select host, user from user;</code></li><li><code>flush privileges;</code></li><li><code>exit;</code></li></ul><p>重启mysql服务</p><ul><li><code>service mysqld restart;</code></li></ul><p>查看mysql、防火墙服务状态、关闭防火墙</p><ul><li><code>service mysqld status</code></li><li><code>:q</code>【退出查看】</li><li><code>systemctl status firewalld</code></li><li><code>systemctl stop firewalld</code></li><li><code>systemctl disable firewalld</code> 【永久关闭防火墙】</li></ul><pre class="line-numbers language-txt"><code class="language-txt">[root@www ~]# systemct1 disable firewalldRemoved /etc/ systemd/ system/ multi-user. target . wants/ firewalld. service .Removed / etc/ systemd/ system/ dbus- org. fedoraproject . FirewallD1. service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置mysql开机自启</p><ul><li><code>systemctl enable mysqld</code></li></ul><pre class="line-numbers language-txt"><code class="language-txt">[ root@www ~]# systemctl enable mysqldCreated symlink / etc/ sy stemd/ system/ multi user .target wants/mysq1d. service +/usr/ 1ib/ systemd / system/ mysqld. service .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>安装</p><ul><li><code>yum install nginx -y</code></li></ul><p>设置开机启动</p><ul><li><code>systemctl enable nginx</code></li></ul><p>启动软件</p><ul><li><code>systemctl start nginx</code></li></ul><p>查看安装版本</p><ul><li><code>nginx -V</code></li></ul><p>设置防火墙规则</p><ul><li><code>firewall-cmd --permanent --zone=public --add-service=http</code></li><li><code>firewall-cmd --permanent --zone=public --add-service=https</code></li><li><code>firewall-cmd --reload</code></li></ul><p>测试，打开浏览器，访问IP或者访问主机名www即可</p><ul><li><code>你自己设的IP地址</code> 【windows的IP是<code>127.0.0.1</code>】</li><li><code>你自己设的主机名</code> 【windows的主机名是<code>localhost</code>】</li></ul><p>配置文件目录<br>主配置文件：/etc/nginx/nginx.conf<br>默认文件目录：/usr/share/nginx/html<br>错误日志：/var/log/nginx/error.log<br>访问日志：/var/log/nginx/access.log  </p><ul><li><code>cd nginx.conf</code></li><li><code>cat nginx.conf</code></li></ul><p>nginx.conf</p><pre class="line-numbers language-conf"><code class="language-conf"># For more information on configuration, see:#   * Official English Documentation: http://nginx.org/en/docs/#   * Official Russian Documentation: http://nginx.org/ru/docs/user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events {    worker_connections 1024;}http {    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 2048;    include             /etc/nginx/mime.types;    default_type        application/octet-stream;    # Load modular configuration files from the /etc/nginx/conf.d directory.    # See http://nginx.org/en/docs/ngx_core_module.html#include    # for more information.    include /etc/nginx/conf.d/*.conf;    server {        listen       80 default_server;        listen       [::]:80 default_server;        server_name  _;        root         /usr/share/nginx/html;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        location / {        }        error_page 404 /404.html;            location = /40x.html {        }        error_page 500 502 503 504 /50x.html;            location = /50x.html {        }    }# Settings for a TLS enabled server.##    server {#        listen       443 ssl http2 default_server;#        listen       [::]:443 ssl http2 default_server;#        server_name  _;#        root         /usr/share/nginx/html;##        ssl_certificate "/etc/pki/nginx/server.crt";#        ssl_certificate_key "/etc/pki/nginx/private/server.key";#        ssl_session_cache shared:SSL:1m;#        ssl_session_timeout  10m;#        ssl_ciphers PROFILE=SYSTEM;#        ssl_prefer_server_ciphers on;##        # Load configuration files for the default server block.#        include /etc/nginx/default.d/*.conf;##        location / {#        }##        error_page 404 /404.html;#            location = /40x.html {#        }##        error_page 500 502 503 504 /50x.html;#            location = /50x.html {#        }#    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105471864&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Liunx-centos8 yum操作+安装mysql
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://lewis.qi.tk/categories/Linux/"/>
    
    
      <category term="centos8" scheme="http://lewis.qi.tk/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>Liunx-centos8入门+配置网络</title>
    <link href="http://lewis.qi.tk/2020/05/16/Liunx-centos8%E5%85%A5%E9%97%A8-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/"/>
    <id>http://lewis.qi.tk/2020/05/16/Liunx-centos8%E5%85%A5%E9%97%A8-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/</id>
    <published>2020-05-16T11:07:51.000Z</published>
    <updated>2020-05-16T11:17:45.931Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105471808" target="_blank" rel="noopener">Liunx-centos8入门+配置网络</a></p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>Linux 用户登陆输入密码时，字符是不显示的，防止别人看见你密码的位数<br>Linux预设提供了<strong>六个命令窗口终端机</strong>让我们来登录。</p><ul><li>Liunx系统<ul><li>命令窗口切换的快捷键为 <code>Ctrl + Alt + F1 ~ F6</code></li><li>命令窗口界面返回图形界面,按下Ctrl + Alt + F7 就回来</li></ul></li><li>vm虚拟机的Liunx系统<ul><li>命令窗口切换的快捷键为 <code>Alt + Space + F1 ~ F6</code></li><li>图形界面界面返回命令窗口按 <code>Alt + Shift + Ctrl + F1~F6</code></li></ul></li></ul><p>查看LIunx版本</p><ul><li><code>cat /etc/redhat-release</code></li></ul><p>添加终端快捷方式</p><ul><li><p><code>terminal</code></p></li><li><p><code>/usr/bin/gnome-terminal</code></p></li><li><p><code>ctrl+</code>`</p></li></ul><p>命令解析器</p><ul><li><p>unix系统</p><ul><li>shell</li></ul></li><li><p>Linux系统</p><ul><li>bash·····</li></ul></li><li><p><code>Bourne Shell</code></p><ul><li>（/usr/bin/sh或/bin/sh）</li></ul></li><li><p><code>Bourne Again Shell</code> 【即bash】</p><ul><li>（/bin/bash）</li></ul></li><li><p><code>C Shell</code></p><ul><li>（/usr/bin/csh）</li></ul></li><li><p><code>K Shell</code></p><ul><li>（/usr/bin/ksh）</li></ul></li><li><p><code>Shell for Root</code></p><ul><li>（/sbin/sh）</li></ul></li></ul><p>Linux快捷键</p><ul><li><code>Tab键</code><ul><li>自动补全路径</li></ul></li><li><code>cd /xxx</code><ul><li>进入目录</li></ul></li><li><code>ctrl + p</code>  或 上<ul><li>上一条执行过的命令</li></ul></li><li><code>ctrl + n</code>  或 下<ul><li>下一条执行过的命令</li></ul></li><li><code>ctrl + b</code> 或 左<ul><li>光标左移</li></ul></li><li><code>ctrl + f</code> 或 右<ul><li>光标右移</li></ul></li><li><code>ctrl + a</code><ul><li>光标移到行首</li></ul></li><li><code>ctrl + e</code><ul><li>光标移到行尾</li></ul></li></ul><h2 id="开机过程"><a href="#开机过程" class="headerlink" title="开机过程"></a>开机过程</h2><p>1.内核的引导。<br>2.运行 init。<br>3.系统初始化。<br>4.建立终端 。<br>5.用户登录系统。  </p><ul><li>1.BIOS 开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动<ul><li><code>/boot</code> 目录下的内核文件</li></ul></li><li>2.init 进程是系统所有进程的起点<ul><li><code>/etc/inittab</code> 读取配置文件</li></ul></li><li>运行这些开机启动的程序，叫做”守护进程”（daemon）</li><li>启动时根据”运行级别”，确定要运行哪些程序<ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li><li>运行级别2：多用户状态(没有NFS)</li><li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登陆后进入图形GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul></li><li>系统初始化<ul><li><code>si::sysinit:/etc/rc.d/rc.sysinit</code>它调用执行了<code>/etc/rc.d/rc.sysinit</code></li><li>激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务</li></ul></li><li>用户登录系统<ul><li>如果用户名不是 root，且存在 <code>/etc/nologin</code> 文件，login 将输出 nologin 文件的内容，然后退出。</li><li>只有 <code>/etc/securetty</code> 中登记了的终端才允许 root 用户登录</li></ul></li></ul><h2 id="关机、重启"><a href="#关机、重启" class="headerlink" title="关机、重启"></a>关机、重启</h2><p>选项关机</p><ul><li>System -&gt; Shut down -&gt;Shut down</li></ul><p>将数据由内存同步到硬盘中</p><ul><li><code>sync</code></li></ul><p>关机</p><ul><li><code>shutdown -h now</code>  <ul><li>【root，最安全】立即关机</li></ul></li><li><code>shutdown –h 20:25</code><ul><li>【root】今天20:25关机</li></ul></li><li><code>shutdown –h +10</code><ul><li>【root】十分钟后关机，单位：分</li></ul></li><li><code>poweroff</code><ul><li>【最常用】</li></ul></li><li><code>halt</code>  <ul><li>【最简单】等同于shutdown –h now 或 poweroff</li></ul></li><li><code>init 0</code><ul><li>init定义了8个运行级别，<code>init 0</code> 为<strong>关机</strong>，<code>init 1</code> 为<strong>重启</strong></li></ul></li></ul><p>取消关机</p><ul><li><code>shutdown -c</code><ul><li>【root】</li></ul></li></ul><p>重启</p><ul><li><code>reboot</code><ul><li>立马重启</li></ul></li><li><code>shutdown –r now</code><ul><li>立马重启</li></ul></li><li><code>shutdown –r +10</code><ul><li>十分钟后重启</li></ul></li></ul><p>正确的关机流程为：</p><ul><li><code>sync &gt; shutdown &gt; reboot &gt; halt</code></li></ul><h2 id="系统文件"><a href="#系统文件" class="headerlink" title="系统文件"></a>系统文件</h2><h2 id="1-用户"><a href="#1-用户" class="headerlink" title="1.用户"></a>1.用户</h2><p>用户分为</p><ul><li><strong>owner [属主]</strong></li><li><strong>group [属组]</strong></li><li><strong>others [其他]</strong></li><li><strong>all [所有用户]</strong></li></ul><p>查看文件权限信息</p><ul><li><code>ls -l</code><ul><li>第一列：<code>-</code> 表示文件、 <code>d</code> 表示目录</li><li>第一列还有所有者权限、用户组权限、其他用户权限</li><li>以上共10个数字：1|3|3|3、-/d|owner|group|others</li></ul></li></ul><pre class="line-numbers language-txt"><code class="language-txt">[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)数字    说明                                            权限0       没有任何权限                                     ---1       执行权限                                        --x2       写入权限                                        -w-3       执行权限和写入权限：1 (执行) + 2 (写入) = 3       -wx4       读取权限                                        r--5       读取和执行权限：4 (读取) + 1 (执行) = 5          r-x6       读取和写入权限：4 (读取) + 2 (写入) = 6          rw-7       所有权限: 4 (读取) + 2 (写入) + 1 (执行) = 7     rwx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更改文件属性【加上-R的参数，那么该目录下的所有文件的属组都会更改】</p><p>1、chgrp：更改文件属组</p><ul><li><code>chgrp [-R] 属组名 文件名</code></li></ul><p>2、chown：更改文件属主，也可以同时更改文件属组</p><ul><li><code>chown [–R] 属主名 文件名</code></li><li><code>chown [-R] 属主名：属组名 文件名</code></li></ul><p>3、chmod：更改文件9个属性【xyz 为数字，就是 rwx 属性数值的相加】</p><ul><li><code>chmod [-R] xyz 文件或目录</code></li><li><code>chmod [-R] u=rwx,g=rwx,o=rwx 文件名</code></li></ul><h3 id="2-文件"><a href="#2-文件" class="headerlink" title="2.文件"></a>2.文件</h3><p>文件目录系统是<strong>树结构</strong></p><p>使用 <code>man [命令]</code> 来查看各个命令的使用文档，如 ：<code>man cp</code></p><p>显示目前的目录</p><ul><li><code>pwd</code> 【以连结档的数据显示】</li><li><code>pwd -P</code> 【不以连结档的数据显示，而是显示正确的完整路径】</li></ul><p>创建一个新的目录</p><ul><li><code>mkdir</code></li></ul><p>删除一个空的目录</p><ul><li><code>rmdir</code></li></ul><p>查看目录</p><ul><li><code>ls /</code></li></ul><p>查看文件</p><ul><li><code>ls</code></li></ul><p>查看所有文件（隐藏文件）</p><ul><li><code>ls -a</code></li></ul><p>查看当前目录下的所有文件列表</p><ul><li><code>ls -al</code></li><li><code>[权限][文件数][所有者][用户组][文件容量][修改日期][文件名]</code></li></ul><p>【注：查看用户】</p><ul><li>1.<code>cd /home</code></li><li>2.<code>ls</code></li></ul><p>切换用户目录</p><ul><li>绝对目录：从根目录开始写<ul><li><code>cd /root/aaa/</code>  【使用绝对路径切换到 aaa 目录】</li></ul></li><li>相对目录：相对于当前工作目录而言<ul><li><code>.</code> 【当前目录】</li><li><code>cd ./aaa/</code>  【使用相对路径切换到 aaa 目录】</li><li><code>..</code> 【当前的上一级目录，如 cd ../man】</li><li><code>cd -</code> 【在两个临近的目录间切换】</li><li><code>cd ~</code> 【切换到根目录】</li></ul></li></ul><h3 id="3-文件的操作"><a href="#3-文件的操作" class="headerlink" title="3.文件的操作"></a>3.文件的操作</h3><p>创建</p><ul><li><code>touch filename</code></li></ul><p>编辑</p><ul><li><code>vi filename</code></li></ul><p>查看</p><ul><li><code>cat filename</code></li></ul><p>复制</p><ul><li><code>cp filename copyfile</code></li></ul><p>重命名</p><ul><li><code>mv filename newfile</code></li></ul><p>删除</p><ul><li><code>rm filename filename2</code></li></ul><p>统计词数</p><ul><li><code>wc filename</code></li></ul><p>重定向【改变输入输出设备，$\color{red}箭头的方向注入$】</p><ul><li><code>echo hello &gt; hello.txt</code><ul><li>把hello打印到hello.txt的文本中【覆盖】</li></ul></li><li><code>echo hello &gt;&gt; hello.txt</code><ul><li>把hello打印到hello.txt的文本中【追加】</li></ul></li><li><code>cat &lt; hello.txt</code><ul><li>把hello.txt输出查看</li></ul></li></ul><p>管道【将前一个命令的标准输出作为下一个程序的标准输入】</p><ul><li><code>cat hello.txt | grep -n 8</code><ul><li>先查看<code>hello.txt</code>文件，再查找<code>8</code>数字，<code>-n</code> 是显示行号</li></ul></li><li><code>cat hello.txt | grep -n 8 &gt; cat.txt</code><ul><li>先查看<code>hello.txt</code>文件，再查找<code>8</code>数字，<code>-n</code> 是显示行号，写入<code>cat.txt</code>文件</li></ul></li></ul><p>Linux程序运行时都会创建三个文件流</p><ul><li><strong>标准输入流(stdin)</strong><ul><li>stdin的文件描述符为0，Linux程序默认从stdin<strong>读取</strong>数据。</li></ul></li><li><strong>标准输出流(stdout)</strong><ul><li>stdout 的文件描述符为1，Linux程序默认向stdout<strong>输出</strong>数据。</li></ul></li><li><strong>标准错误流(stderr)</strong><ul><li>stderr的文件描述符为2，Linux程序会向stderr流中<strong>写入错误</strong>信息。</li></ul></li></ul><h2 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h2><p>硬链接（Hard Link），软（符号）链接（Symbolic Link）</p><p><strong>硬链接</strong></p><ul><li>硬连接指通过索引节点来进行连接。多个文件名指向同一索引节点是存在的</li><li>作用：$\color{red}允许一个文件拥有多个有效路径名，防止“误删”$</li><li>A 是 B 的硬链接（A 和 B 都是文件名）<ul><li>则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同。</li><li>一个 inode 节点对应两个不同的文件名</li><li>删除其中任何一个都不会影响另外一个的访问。</li></ul></li></ul><p><strong>软链接</strong></p><ul><li>类似于 Windows 的快捷方式</li><li>文件实际上是一个文本文件，其中包含的有另一文件的位置信息</li><li>A 是 B 的软链接（A 和 B 都是文件名）<ul><li>A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同。</li><li>A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）</li></ul></li></ul><p>测试</p><pre class="line-numbers language-txt"><code class="language-txt">[oracle@Linux]$ touch f1          #创建测试文件f1[oracle@Linux]$ ln f1 f2          #创建f1的一个硬连接文件f2[oracle@Linux]$ ln -s f1 f3       #创建f1的一个符号连接文件f3[oracle@Linux]$ ls -li            # -i参数显示文件的inode节点信息total 09797648 -rw-r--r--  2 oracle oinstall 0 Apr 21 08:11 f19797648 -rw-r--r--  2 oracle oinstall 0 Apr 21 08:11 f29797649 lrwxrwxrwx  1 oracle oinstall 2 Apr 21 08:11 f3 -> f1#在f1文件输入内容[oracle@Linux]$ echo "I am f1 file" >>f1#查看f1[oracle@Linux]$ cat f1I am f1 file#删除f1后[oracle@Linux]$ rm -f f1#查看f2,f3[oracle@Linux]$ cat f2I am f1 file[oracle@Linux]$ cat f3cat: f3: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一列是inode节点</li><li>原文件 <code>f1</code> 与硬连接文件 <code>f2</code> 的 <strong>inode节点相同</strong>，均为 9797648。</li><li>原文件 <code>f1</code> 与软连接文件 <code>f3</code> 的 <strong>inode节点相同</strong>。</li><li>删除原始文件 <code>f1</code> 后，硬连接 <code>f2</code> 不受影响，软连接 <code>f3</code> 文件无效</li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>添加账号</p><ul><li><code>useradd 选项 用户名</code></li><li><code>useradd –d  /home/sam -m sam -s /bin/sh -g group –G adm,root gem</code><ul><li>选项</li><li><code>-c</code> 注释。</li><li><code>-d</code> 指定用户主目录，如果目录不存在，则同时 <code>-m</code> ，创建主目录。</li><li><code>-g</code> 指定用户所属的用户组。</li><li><code>-G</code> 指定用户所属的附加组。</li><li><code>-s</code> 指定用户的登录Shell。</li><li><code>-u</code> 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li></ul><p>删除帐号</p><ul><li><code>userdel 选项 用户名</code></li><li><code>userdel -r sam</code><ul><li>选项</li><li><code>-r</code> 把用户的主目录一起删除。</li></ul></li></ul><p>修改帐号</p><ul><li><code>usermod 选项 用户名</code></li><li><code>usermod -s /bin/ksh -d /home/z –g developer sam</code><ul><li>选项</li><li><code>-c, -d, -m, -g, -G, -s, -u</code> 同上</li><li><code>-o</code></li></ul></li></ul><p>用户口令密码管理</p><ul><li><code>passwd 选项 用户名</code><ul><li>选项</li><li><code>-l</code> 禁用账号，不能登录。【passwd -l sam】</li><li><code>-u</code> 口令解锁。</li><li><code>-d</code> 使账号无口令。【passwd -d sam】</li><li><code>-f</code> 强迫用户下次登录时修改口令。</li></ul></li></ul><p>普通用户<br>$ <code>passwd</code><br>Old password:<br>New password:<br>Re-enter new password:  </p><p>超级用户<br>$ <code>passwd sam</code><br>New password:<br>Re-enter new password:  </p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>增加一个新的用户组【新组标识号GID是在当前已有的最大组标识号的基础上加1】</p><ul><li><code>groupadd 选项 用户组</code></li><li><code>groupadd -g 101 group1</code><ul><li>选项</li><li><code>-g</code> 指定GID。</li><li><code>-o</code> 与-g选项同时使用，表示新用户组GID与已有用户组GID相同。</li></ul></li></ul><p>删除用户组</p><ul><li><code>groupdel 用户组</code></li></ul><p>修改用户组</p><ul><li><code>groupmod 选项 用户组</code></li><li><code>groupmod –g 10000 -n group1 group2</code> 【组group1的GID改为10000，组名修改为group2】<ul><li>选项</li><li><code>-g、-G</code> 同上</li><li><code>-n</code> 将用户组名字改为新名字</li></ul></li></ul><p>一个用户同时属于多个用户组，用户可以在用户组之间切换</p><ul><li>作用：具有不同用户组的权限。</li></ul><p>切换到要到的用户组</p><ul><li><code>newgrp 目的用户组</code></li><li><code>newgrp root</code></li></ul><p>查看用户管理</p><p>一、<code>cat /etc/passwd</code></p><ul><li><code>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</code></li><li>大多都是伪用户</li></ul><pre class="line-numbers language-txt"><code class="language-txt">root:x:0:0:root:/root:/bin/bash···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二、<code>cat /etc/shadow</code></p><ul><li><code>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></li><li>/etc/shadow中的记录行与/etc/passwd中的一一对应</li></ul><p>三、<code>cat /etc/group</code></p><ul><li><code>组名:口令:组标识号:组内用户列表</code></li><li>用户组的所有信息</li></ul><pre class="line-numbers language-txt"><code class="language-txt">root:x:0:bin:x:1:bin,daemondaemon:x:2:bin,daemonsys:x:3:bin,adm···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="超级用户root"><a href="#超级用户root" class="headerlink" title="超级用户root"></a>超级用户root</h2><p>切换到超级用户</p><ul><li><code>sudo su</code></li></ul><p>退出超级用户</p><ul><li><code>exit</code></li></ul><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>检查文件系统的磁盘空间占用<strong>大小</strong>情况</p><ul><li><code>df [-ahikHTm] [目录或文件名]</code></li><li><code>df -h</code><ul><li>选项【默认Kbytes，8 Kbytes = 1 KBytes】</li><li><code>-a</code> ：列出所有的文件系统。</li><li><code>-k</code> ：KBytes容量显示。</li><li><code>-m</code> ：MBytes容量显示。</li><li><code>-h</code> ：GBytes, MBytes, KBytes 格式自行容量显示。</li><li><code>-H</code> ：以 M=1000K 取代 M=1024K 的进位方式。</li><li><code>-T</code> ：显示文件系统类型。</li><li><code>-i</code> ：以 inode 的数量显示。</li></ul></li></ul><p>检查文件系统的磁盘空间占用<strong>数量</strong>情况</p><ul><li><code>du [-ahskm] 文件或目录名称</code></li><li><code>du -h / du</code><ul><li>选项</li><li><code>-a 、-k 、-m 、-h</code> 同上</li><li><code>-s</code> ：列出总量而已，而不列出每个各别的目录占用容量；</li><li><code>-S</code> ：不包括子目录下的总计，与 -s 有点差别。</li></ul></li></ul><p>磁盘分区表操作工具</p><ul><li><code>fdisk [-l] 装置名称</code></li><li><code>fdisk</code><ul><li>选项</li><li><code>-l</code> ：输出后面接的装置所有的分区内容</li></ul></li></ul><h2 id="mount挂载"><a href="#mount挂载" class="headerlink" title="mount挂载"></a>mount挂载</h2><p>首先增加硬盘，然后格式化硬盘，在硬盘上创建分区，创建目录，最后再挂载</p><p>1.Windows下的mount挂载，就是给磁盘分区提供一个盘符（C,D,E,…）</p><ul><li>U盘插入为mount</li><li>U盘拔出为unmount</li></ul><p>2.Linux下只有一个根目录/，分配给linux的所有区都在/下的某个位置</p><ul><li><code>mount /dev/sdb1  ~/Share/</code><ul><li><code>/dev</code>是目录，<code>/dev/sdb1</code>不是目录，<code>ls /dev/sdb1</code>无法执行。</li><li>因为/dev/sdb1，是一个类似指针的东西，指向这个分区的原始数据块。</li><li>mount前，系统并不知道这个数据块哪部分数据代表文件，如何对它们操作。</li></ul></li></ul><p>分析：</p><ul><li>把新硬盘区<code>sdb1</code>挂载到工作目录的<code>~/Share/</code>文件夹下</li><li>之后访问这个<code>~/Share/</code>文件夹就相当于访问这个硬盘的<code>sdb1</code>分区了</li></ul><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p><code>sudo</code>是linux系统管理指令<br>允许让普通用户执行一些或者全部的root命令的一个工具，如halt，reboot，su等等</p><h2 id="centos8"><a href="#centos8" class="headerlink" title="centos8"></a>centos8</h2><p>CentOS 8主要使用AppStream, BaseOS, Extras三个仓库</p><p>打开终端</p><ul><li><code>CTRL + ALT + T</code></li></ul><h3 id="连接网络，设置IP地址"><a href="#连接网络，设置IP地址" class="headerlink" title="连接网络，设置IP地址"></a>连接网络，设置IP地址</h3><p>1、手动更改网络接口配置文件，查看网络接口</p><ul><li><code>ip link show</code></li></ul><pre class="line-numbers language-txt"><code class="language-txt">1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:002: ens160: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000    link/ether 这里是你的MAC地址 brd ff:ff:ff:ff:ff:ff···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、选择第二个ens160网络接口，进入网络配置文件目录</p><ul><li><code>cd  /etc/sysconfig/network-scripts/</code></li></ul><p>3、在vim编辑器中修改：文件名称是ifcfg- 网卡名称</p><ul><li><code>vi ifcfg-ens160</code></li></ul><pre class="line-numbers language-vim"><code class="language-vim">···BROWSER_ONLY<span class="token operator">=</span>noBOOTPROTO<span class="token operator">=</span>staticDEFROUTE<span class="token operator">=</span>yesIPV4_FAILURE_FATAL<span class="token operator">=</span>noIPV6INIT<span class="token operator">=</span>yesIPV6_AUTOCONF<span class="token operator">=</span>yesIPV6_DEFROUTE<span class="token operator">=</span>yesIPV6_FAILURE_FATAL<span class="token operator">=</span>noIPV6_ADDR_GEN_MODE<span class="token operator">=</span>stable<span class="token operator">-</span>privacyNAME<span class="token operator">=</span>ens160UUID<span class="token operator">=</span>你自己的UUIDDEVICE<span class="token operator">=</span>ens160ONBOOT<span class="token operator">=</span>yesIPADDR<span class="token operator">=</span><span class="token number">192.168</span><span class="token operator">.</span><span class="token number">1.60</span>PREFIX<span class="token operator">=</span><span class="token number">24</span>GATEWAY<span class="token operator">=</span><span class="token number">192.168</span><span class="token operator">.</span><span class="token number">1.2</span>DNS1<span class="token operator">=</span><span class="token number">8.8</span><span class="token operator">.</span><span class="token number">8.8</span>DNS2<span class="token operator">=</span><span class="token number">8.8</span><span class="token operator">.</span><span class="token number">4.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、重新加载网络配置</p><p>方式一：【一步到位，后面不用】</p><ul><li><code>ip addr flush dev ens160 &amp;&amp; systemctl restart NetworkManager.service</code></li></ul><p>方式二：</p><ul><li><code>nmcli c reload</code></li></ul><p>5、CentOS 8默认不支持network.service服务<br>安装network.service服务  </p><ul><li><code>yum install network-scripts</code></li></ul><p>6、重启网络服务</p><ul><li><code>service network restart</code></li></ul><p>7、重启网络服务</p><ul><li><code>systemctl  restart  network.service</code></li></ul><p>8、测试网络是否正常</p><ul><li><code>ping www.baidu.com</code></li></ul><p>9、查看ip地址</p><ul><li><code>ip addr show</code></li></ul><h3 id="设置主机名为www"><a href="#设置主机名为www" class="headerlink" title="设置主机名为www"></a>设置主机名为www</h3><ul><li><code>hostname  www</code></li></ul><p>编辑配置文件</p><ul><li><code>vi /etc/hostname</code><ul><li>把<code>localhost.localdomain</code>改为<code>www</code></li></ul></li><li><code>vi /etc/hosts</code><ul><li>把<code>127.0.0.1   localhost  localhost.localdomain</code>  改为<code>127.0.0.1   localhost  www</code></li></ul></li></ul><h3 id="把网卡名称ifcfg-ens160改为ifcfg-eth0"><a href="#把网卡名称ifcfg-ens160改为ifcfg-eth0" class="headerlink" title="把网卡名称ifcfg-ens160改为ifcfg-eth0"></a>把网卡名称ifcfg-ens160改为ifcfg-eth0</h3><p>1、进入目录</p><ul><li><code>cd  /etc/sysconfig/network-scripts/</code></li></ul><p>2、改文件名</p><ul><li><code>mv  ifcfg-ens160  ifcfg-eth0</code></li></ul><p>3、编辑</p><ul><li><code>vi  ifcfg-eth0</code></li></ul><p>4、修改</p><ul><li><code>NAME=eth0</code></li><li><code>DEVICE=eth0</code></li></ul><p>5、编辑</p><ul><li><code>vi /etc/sysconfig/grub</code></li><li>在<code>GRUB_CMDLINE_LINUX</code>变量中添加一句<code>net.ifnames=0 biosdevname=0</code></li></ul><p>6、重新生成grub配置并更新内核参数</p><ul><li><code>grub2-mkconfig -o /boot/grub2/grub.cfg</code></li></ul><p>7、添加udev的规则</p><ul><li><code>cd  /etc/udev/rules.d</code></li><li><code>vi  70-persistent-net.rules</code></li><li>输入<code>SUBSYSTEM==&quot;net&quot;,ACTION==&quot;add&quot;,DRIVERS==&quot;?*&quot;,ATTR{address}==&quot;这里是你的MAC地址&quot;,ATTR｛type｝==&quot;1&quot; ,KERNEL==&quot;eth*&quot;,NAME=&quot;eth0&quot;</code></li></ul><p>8、重启系统</p><ul><li><code>shutdown -r now</code></li></ul><h2 id="运行ffmepg视频转码"><a href="#运行ffmepg视频转码" class="headerlink" title="运行ffmepg视频转码"></a>运行ffmepg视频转码</h2><ul><li>在Vidoes打开终端</li><li>转码<ul><li><code>ffmpeg -i a.mp4 a_h264.mp4</code></li></ul></li><li>播放<ul><li><code>mplayer -vo caca -quiet a_h264.mp4</code></li></ul></li><li>右下角连接声卡</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105471808&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Liunx-centos8入门+配置网络&lt;/a&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://lewis.qi.tk/categories/Linux/"/>
    
    
      <category term="centos8" scheme="http://lewis.qi.tk/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>x-shell和xftp连接Linux</title>
    <link href="http://lewis.qi.tk/2020/05/16/x-shell%E5%92%8Cxftp%E8%BF%9E%E6%8E%A5Linux/"/>
    <id>http://lewis.qi.tk/2020/05/16/x-shell%E5%92%8Cxftp%E8%BF%9E%E6%8E%A5Linux/</id>
    <published>2020-05-16T11:07:26.000Z</published>
    <updated>2020-05-16T11:15:51.568Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105430274" target="_blank" rel="noopener">x-shell和xftp连接Linux</a></p><h2 id="在xshell中建立连接"><a href="#在xshell中建立连接" class="headerlink" title="在xshell中建立连接"></a>在xshell中建立连接</h2><p>Linux 终端输入查看IP地址</p><ul><li>在CentOs6中，输入 <code>ifconfig -a</code><ul><li>第一段显示的Inet addr后边的就是Linux的IP地址</li></ul></li><li>在CentOs7中，输入 <code>ip addr</code></li></ul><p>以下为CentOs6输出，我把IP地址用xxx替代</p><pre class="line-numbers language-txt"><code class="language-txt">eth0    Link encap:Ethernet  HWaddr 00:0C:29:12:3E:2D          inet addr:xxx.xxx.xxx.xxx  Bcast:xxx.xxx.xxxxxx  Mask:255.255.255.0        inet6 addr:xxxx::xxx:xxxx:xxxx:xxxx/64 Scope:Link        UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1        RX packets:10885 errors:0 dropped:0 overruns:0 frame:0        TX packets:5127 errors:0 dropped:0 overruns:0 carrier:0        collisions:0 txqueuelen:1000        RX bytes:15058180 (14.3 MiB)  TX bytes:338736 (330.7 KiB)lo      Link encap:Local Loopback          inet addr:127.0.0.1  Mask:255.0.0.0        inet6 addr: ::1/128 Scope:Host        UP LOOPBACK RUNNING  MTU:16436  Metric:1        RX packets:10 errors:0 dropped:0 overruns:0 frame:0        TX packets:10 errors:0 dropped:0 overruns:0 carrier:0        collisions:0 txqueuelen:0        RX bytes:582 (582.0 b)  TX bytes:582 (582.0 b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在Linux中输入</p><ul><li><code>which ssh</code> 查看是否安装有 openssh-server 服务</li><li>如果返回目录，则说明安装</li><li>如果没有返回，则执行 <code>yum install -y openssh-server</code> 安装命令</li></ul><p>在xshell中文件-&gt;新建-&gt;</p><ul><li>名称：自定义</li><li>协议：SSH</li><li>主机：服务器IP地址（Linux的IP：xxx.xxx.xxx.xxx)</li><li>端口号：默认22</li></ul><p>确定建立连接后，再双击连接，输入Linux的用户名和密码</p><ul><li>用户名：xxx</li><li>密码：xxx</li></ul><p>连接结果</p><pre class="line-numbers language-txt"><code class="language-txt">Connecting to xxx. xxx.xxx.xxx:xx...Connection established .To escape to local shell, press' Ctrl +Alt+ ] ' ./usr/ bin/xauth: creating new authority file /home/xxx/ .Xauthority<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在cmd中建立连接"><a href="#在cmd中建立连接" class="headerlink" title="在cmd中建立连接"></a>在cmd中建立连接</h2><ul><li>直接输入<ul><li><code>ssh xxx@ xxx. xxx.xxx.xxx:xx</code></li><li><code>ssh 用户名@远程服务器IP地址</code></li><li>再输入Linux的密码即可</li></ul></li></ul><h2 id="xftp"><a href="#xftp" class="headerlink" title="xftp"></a>xftp</h2><p>新建连接同上，可以通过客户端进行互联</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>点击向左或向右传输</li><li>直接拖动</li></ul><p>显示Linux隐藏文件</p><ul><li>xftp -&gt; 工具 -&gt; 选项 -&gt; 常规 -&gt; 显示隐藏文件</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105430274&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;x-shell和xftp连接Linux&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Liunx" scheme="http://lewis.qi.tk/categories/Liunx/"/>
    
    
      <category term="centos6" scheme="http://lewis.qi.tk/tags/centos6/"/>
    
      <category term="centos8" scheme="http://lewis.qi.tk/tags/centos8/"/>
    
  </entry>
  
  <entry>
    <title>vue组件化深入--day03</title>
    <link href="http://lewis.qi.tk/2020/05/16/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E6%B7%B1%E5%85%A5-day03/"/>
    <id>http://lewis.qi.tk/2020/05/16/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E6%B7%B1%E5%85%A5-day03/</id>
    <published>2020-05-16T10:51:54.000Z</published>
    <updated>2020-05-16T11:05:19.591Z</updated>
    
    <content type="html"><![CDATA[<p>CSDN文章链接：<a href="https://blog.csdn.net/qq_45062586/article/details/105719652" target="_blank" rel="noopener">vue组件化深入</a></p><h2 id="vue–自定义-component-标签"><a href="#vue–自定义-component-标签" class="headerlink" title="vue–自定义 component 标签"></a>vue–自定义 component 标签</h2><ul><li><p>先仔细看下components命名规则对比</p></li><li><p><code>is</code> 关键字</p><ul><li><code>&lt;component :is=&quot;xxx&quot;&gt;&lt;/component&gt;</code></li></ul></li><li><p>ComponentA: ComponentA 的缩写—-&gt;ComponentA  </p></li><li><p>即这个变量名同时是：</p><ul><li><strong>用在模板中的自定义元素的名称</strong></li><li><strong>包含了这个组件选项的变量名</strong></li></ul></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">'./ComponentA.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ComponentA    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例1：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> HelloTom <span class="token operator">=</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'HelloTom'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{msg}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> HelloJerry <span class="token operator">=</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          msg<span class="token punctuation">:</span> <span class="token string">'HelloJerry'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{msg}}&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'hello-tom'</span><span class="token punctuation">:</span> HelloTom<span class="token punctuation">,</span>        <span class="token string">'hello-jerry'</span><span class="token punctuation">:</span> HelloJerry      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态组件-amp-异步组件"><a href="#动态组件-amp-异步组件" class="headerlink" title="动态组件 &amp; 异步组件"></a>动态组件 &amp; 异步组件</h2><h3 id="的’is’-关键字"><a href="#的’is’-关键字" class="headerlink" title=" 的’is’ 关键字"></a><component> 的’is’ 关键字</h3><ul><li>$\color{red}’is’ 关键字$ 用来动态切换组件<ul><li>其属性值可以是 <strong>值</strong>、也可以是 <strong>函数</strong></li><li>绑定key数据，根据key的值不同，调用不同的组件。</li></ul></li></ul><p>例1：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>component <span class="token punctuation">:</span>is<span class="token operator">=</span><span class="token string">"key"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> componentA <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div style="color:red">我是A组件&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token keyword">var</span> componentB <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div style="color:blank">我是B组件&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token keyword">var</span> componentC <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div style="color:pink">我是C组件&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"comA"</span><span class="token punctuation">:</span> componentA<span class="token punctuation">,</span>        <span class="token string">"comB"</span><span class="token punctuation">:</span> componentB<span class="token punctuation">,</span>        <span class="token string">"comC"</span><span class="token punctuation">:</span> componentC    <span class="token punctuation">}</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        key<span class="token punctuation">:</span><span class="token string">'comB'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例2：</p><ul><li>多个组件使用同一个挂载点，并动态切换【动态组件】</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"example"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>切换页面<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>component <span class="token punctuation">:</span>is<span class="token operator">=</span><span class="token string">"currentView"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> home <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token string">'&lt;div>我是主页&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> post <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token string">'&lt;div>我是提交页&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> archive <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token string">'&lt;div>我是存档页&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    home<span class="token punctuation">,</span>    post<span class="token punctuation">,</span>    archive<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    index<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token string">'post'</span><span class="token punctuation">,</span><span class="token string">'archive'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">currentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例2的另一种实现形式：</p><ul><li>直接绑定到组件对象上，位于data中，用数组表示</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"example"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>切换页面<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>component <span class="token punctuation">:</span>is<span class="token operator">=</span><span class="token string">"currentView"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    index<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是主页&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是提交页&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是存档页&lt;/div>`</span></span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">currentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lt-keep-alive-gt-标签"><a href="#lt-keep-alive-gt-标签" class="headerlink" title="&lt;keep-alive&gt;标签"></a><code>&lt;keep-alive&gt;</code>标签</h2><ul><li>包裹动态组件【含is】时，会缓存不活动的组件实例，而不是销毁它们<ul><li>失活的组件将会被缓存！</li></ul></li><li>是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中</li><li>和 <code>&lt;transition&gt;</code> 相似</li></ul><p>实例1：</p><ul><li>如果有多个条件性的子元素，<code>&lt;keep-alive&gt;</code> 要求同时只能有一个子元素被渲染<ul><li>子元素home</li><li>子元素posts</li><li>子元素archive</li></ul></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"example"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>切换页面<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>    <span class="token operator">&lt;</span>home v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"index===0"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>home<span class="token operator">></span>    <span class="token operator">&lt;</span>posts v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"index===1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>posts<span class="token operator">></span>    <span class="token operator">&lt;</span>archive v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>archive<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span><span class="token punctuation">{</span>    home<span class="token punctuation">:</span><span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是主页&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>    posts<span class="token punctuation">:</span><span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是提交页&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>    archive<span class="token punctuation">:</span><span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是存档页&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    index<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> len <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>components<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lt-keep-alive-gt-的属性【-include-和-exclude】"><a href="#lt-keep-alive-gt-的属性【-include-和-exclude】" class="headerlink" title="&lt;keep-alive&gt; 的属性【:include 和 :exclude】"></a><code>&lt;keep-alive&gt;</code> 的属性【<code>:include</code> 和 <code>:exclude</code>】</h2><p>用法：</p><ul><li>include（包括） 和 exclude （不包括）属性允许组件有条件地缓存。<ul><li>首先检查组件自身的 name 选项，【匹配到后则缓存匹配的值】</li><li>如果 name 选项不可用，则匹配它的局部注册名称（父组件 components 选项的键值）【匹配到后则缓存匹配的值】</li></ul></li><li>(使用 v-bind)</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 逗号分隔字符串 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a,b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 正则表达式  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/a|b/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Array --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>a<span class="token punctuation">'</span>, <span class="token punctuation">'</span>b<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><ul><li>这里是检查了自己的name属性，发现未找到</li><li>再检查局部注册名称（父组件） components 选项的键值<ul><li>所以【include】<strong>只缓存home和archive，不缓存posts</strong></li></ul></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"example"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>切换页面<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive include<span class="token operator">=</span><span class="token string">"home,archive"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>component <span class="token punctuation">:</span>is<span class="token operator">=</span><span class="token string">"currentView"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    index<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'home'</span><span class="token punctuation">,</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是主页&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'posts'</span><span class="token punctuation">,</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是提交页&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'archive'</span><span class="token punctuation">,</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是存档页&lt;/div>`</span></span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">currentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token operator">%</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lt-keep-alive-gt-的【activated-和-deactivated-】函数"><a href="#lt-keep-alive-gt-的【activated-和-deactivated-】函数" class="headerlink" title="&lt;keep-alive&gt; 的【activated() 和 deactivated()】函数"></a><code>&lt;keep-alive&gt;</code> 的【<code>activated()</code> 和 <code>deactivated()</code>】函数</h2><p>用法：</p><ul><li>在 <code>&lt;keep-alive&gt;</code> 树内的所有嵌套组件中触发<ul><li>activated()  点击开始时</li><li>deactivated() 切换结束时</li></ul></li></ul><p>分析：</p><ul><li>:is=”currentView”，函数在计算属性中定义</li><li>data的arr中存放模板<ul><li>注意：【activated()和deactivated()中的重写<code>$emit</code>函数，是vue<strong>自定义事件</strong>pass-data】</li></ul></li><li>当按顺序点击，轮到下标是 我是主页 的模板是触发自定义函数<br>@pass-data，其参数则触发getData延迟（先显示$emit的第二个参数值，再消失””）</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"example"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>切换页面<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>    <span class="token operator">&lt;</span>component <span class="token punctuation">:</span>is<span class="token operator">=</span><span class="token string">"currentView"</span> @pass<span class="token operator">-</span>data<span class="token operator">=</span><span class="token string">"getData"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    index<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>    msg<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是主页&lt;/div>`</span></span><span class="token punctuation">,</span>        <span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'pass-data'</span><span class="token punctuation">,</span><span class="token string">'主页被添加'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">deactivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'pass-data'</span><span class="token punctuation">,</span><span class="token string">'主页被移除'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是提交页&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>我是存档页&lt;/div>`</span></span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">currentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token operator">%</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">getData</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h2><ul><li>以一个工厂函数的方式定义你的组件，它会异步解析你的组件定义</li><li>只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染</li></ul><p>核心：  </p><ul><li>是第二个参数<code>function (resolve, reject) {...}</code></li></ul><p>实现：  </p><ul><li>resolve加载成功后，执行处理的逻辑</li><li>reject加载失败后，执行处理的逻辑</li></ul><p>普通组件：</p><pre class="line-numbers language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-example'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>this is a global component&lt;/div>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>异步组件：</p><pre class="line-numbers language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-example'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do some thing 处理其它逻辑，并在完成后向 `resolve` 回调传递组件定义</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'&lt;div>I am async!&lt;/div>'</span>      <span class="token comment" spellcheck="true">// 组件定义的其它选项</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 或者调用reject回调表示失败</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>result is failed&lt;/div>`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异步组件变成单文件-vue-webpack-的-code-splitting"><a href="#异步组件变成单文件-vue-webpack-的-code-splitting" class="headerlink" title="异步组件变成单文件.vue +  webpack 的 code-splitting"></a>异步组件变成单文件<code>.vue</code> +  webpack 的 <code>code-splitting</code></h2><p>【定义为异步加载的组件，在打包时，打包成单独js文件存储在static/js文件夹】</p><ul><li><code>require</code></li></ul><p>my-async-component.vue【变成单组件】</p><pre class="line-numbers language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-webpack-example'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do some thing</span>    <span class="token comment" spellcheck="true">// 这个特殊的 `require` 语法将会告诉 webpack</span>    <span class="token comment" spellcheck="true">// 自动将你的构建代码切割成多个包，这些包</span>    <span class="token comment" spellcheck="true">// 会通过 Ajax 请求加载</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./my-async-component'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>import</code>会返回一个 <code>Promise</code> 对象</li><li>可自定义异步加载状态【根据加载处理的状态来改变要渲染的组件】<ul><li>loading</li><li>error</li><li>delay</li><li>timeout</li></ul></li></ul><p>async-webpack-example.vue【在组件引用这个组件】</p><p>情况1：全局注册组件，并异步加载</p><pre class="line-numbers language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-webpack-example'</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./my-async-component'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//-----------或者--------------------</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'async-webpack-example'</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        component<span class="token punctuation">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyComponent.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 加载时使用的组件</span>        loading<span class="token punctuation">:</span> LoadingComponent<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 加载失败时使用的组件</span>        error<span class="token punctuation">:</span> ErrorComponent<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span>        delay<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 如果提供了超时时间且组件加载也超时了，</span>        <span class="token comment" spellcheck="true">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span>        timeout<span class="token punctuation">:</span> <span class="token number">3000</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况2：局部注册组件，并异步加载【根实例】</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'async-webpack-example'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./my-async-component'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理边界情况"><a href="#处理边界情况" class="headerlink" title="处理边界情况"></a>处理边界情况</h2><p>处理边界情况之<code>$root</code>，<code>$parents</code>，<code>$refs</code><br>【可替代将数据以 prop 的方式传入子组件】</p><ul><li><code>$root</code>，<code>$parents</code>都能实现访问父组件的属性和方法<ul><li><code>$root</code>访问到的是<strong>它的根组件</strong></li><li><code>$parents</code>访问到的是<strong>最近一级的父组件</strong></li></ul></li><li><code>$refs</code>只会在组件渲染完成之后生效，并且它们不是响应式的。<ul><li>避免在模板或计算属性中访问 $refs</li></ul></li></ul><h3 id="子组件访问根实例【-root】"><a href="#子组件访问根实例【-root】" class="headerlink" title="子组件访问根实例【$root】"></a>子组件访问根实例【$root】</h3><ul><li><code>new Vue</code> 根实例，其子组件可以通过 <code>$root</code> 属性进行访问</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取根组件的数据</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>foo<span class="token comment" spellcheck="true">// 写入根组件的数据</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// 访问根组件的计算属性</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>a<span class="token comment" spellcheck="true">// 调用根组件的方法</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子组件访问最近一级的父组件【-parents】"><a href="#子组件访问最近一级的父组件【-parents】" class="headerlink" title="子组件访问最近一级的父组件【$parents】"></a>子组件访问最近一级的父组件【$parents】</h3><ul><li>最近一级的父组件，其子组件可以通过 <code>$parents</code> 属性进行访问</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>root<span class="token operator">-</span>obj<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>root<span class="token operator">-</span>obj<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//子组件（是子子组件的父组件）</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'root-obj'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                    &lt;button @click='getRoot'>子组件&lt;/button>                    &lt;child-component>&lt;/child-component>                &lt;/div>`</span></span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//得到自己</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">//得到var app = new Vue({})【根组件即这个的父组件】</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//得到var app = new Vue({})</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//子子组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                &lt;button @click='getRoot'>子子组件&lt;/button>                &lt;/div>`</span></span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//得到自己</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">//得到Vue.component('root-obj', {})</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//得到var app = new Vue({})</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根组件</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'Root'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="父组件访问子组件实例【-ref-和-refs-最常用】"><a href="#父组件访问子组件实例【-ref-和-refs-最常用】" class="headerlink" title="父组件访问子组件实例【 ref 和 $refs 最常用】"></a>父组件访问子组件实例【 <code>ref</code> 和 <code>$refs</code> 最常用】</h3><ul><li>最近一级的父组件，其子组件可以通过 <code>$parents</code> 属性进行访问<ul><li>避免在模板或计算属性中访问 $refs</li><li>只会在组件渲染完成之后生效</li></ul></li></ul><p>实例1：vue-cli的单组件形式<br>首先子组件需添加<code>ref=&quot;属性值&quot;</code>，然后即可使用使用<code>$refs.ref的属性值</code></p><p>父组件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>base<span class="token operator">-</span>alert ref<span class="token operator">=</span><span class="token string">"baseAlert"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>base<span class="token operator">-</span>alert<span class="token operator">></span>    <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"clickMe"</span><span class="token operator">></span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> BaseAlert <span class="token keyword">from</span> <span class="token string">'@/components/BaseAlert'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        BaseAlert    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        clickMe <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//popUp 方法在子组件中定义</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>baseAlert<span class="token punctuation">.</span><span class="token function">popUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>div <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  background<span class="token punctuation">:</span> red<span class="token punctuation">;</span>  margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 100px<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>child component<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    popUp <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例2：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">'refView'</span><span class="token operator">></span>通过ref访问子组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//子组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'base-input'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;input type='text'/>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根实例</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'Root'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">refView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>baseInput<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>baseInput<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="依赖注入-provide选项-和-inject选项"><a href="#依赖注入-provide选项-和-inject选项" class="headerlink" title="依赖注入 provide选项 和 inject选项"></a>依赖注入 <strong>provide选项</strong> 和 <strong>inject选项</strong></h3><ul><li>把依赖注入看作一部分“大范围有效的 prop”<ul><li>明天再写，这里不太会</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSDN文章链接：&lt;a href=&quot;https://blog.csdn.net/qq_45062586/article/details/105719652&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue组件化深入&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;vu
      
    
    </summary>
    
    
      <category term="vue" scheme="http://lewis.qi.tk/categories/vue/"/>
    
    
      <category term="vue" scheme="http://lewis.qi.tk/tags/vue/"/>
    
  </entry>
  
</feed>
